@page "/account/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

<AuthorizeView>
    <Authorized>
        <MudButton> Logout</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                        <MudTextField T="string" Label="Username" Required="true"
                                      RequiredError="User name is required!"/>
                        <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                      Validation="@(new EmailAddressAttribute { ErrorMessage = "The email address is invalid" })"/>
                        <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="_pwField1"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                                      Required="true"
                                      RequiredError="Password is required!"/>
                        <MudTextField T="string" Label="Password" HelperText="Repeat the password"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, string>(PasswordMatch))"/>
                        <div class="d-flex">
                        </div>
                        <div class="d-flex align-center justify-space-between">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class=" ml-auto">Sign up
                            </MudButton>
                            <MudButton Variant="Variant.Filled" DisableElevation="true"
                                       OnClick="@(() => _form.ResetValidation())">
                                Login
                            </MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
                @* <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                OnClick="@(()=>form.Validate())">Sign up</MudButton>
                <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">
                Login</MudButton>
                </MudPaper> *@
            </MudItem>
            @* *@
        </MudGrid>
    </NotAuthorized>
</AuthorizeView>



@code {

    bool _success;
    string[] _errors = { };
    MudTextField<string> _pwField1;
    MudForm _form;

    private void Signup()
    {
        // create user account
    }

    private void SwitchToLoginForm()
    {
        // navigate to login form
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }

        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (_pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}

@* <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true"
OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton> *@

@* <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
<MudRadio Option="@("Personal")">Personal</MudRadio>
<MudRadio Option="@("Professional")">Professional</MudRadio>
</MudRadioGroup> *@

@* <MudItem xs="12" sm="5">
<MudPaper Class="pa-4 mud-height-full">
<MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
@foreach (var error in errors)
{
<MudText Color="@Color.Error">@error</MudText>
}
</MudPaper>
</MudItem> *@

@* </NotAuthorized><MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" /> *@