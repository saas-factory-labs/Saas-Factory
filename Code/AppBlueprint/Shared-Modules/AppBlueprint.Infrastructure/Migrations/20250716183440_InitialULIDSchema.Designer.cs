// <auto-generated />
using System;
using AppBlueprint.Application.Enums;
using AppBlueprint.Infrastructure.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AppBlueprint.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716183440_InitialULIDSchema")]
    partial class InitialULIDSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.ApiKeyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("SecretRef")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Organization.OrganizationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.Team.TeamEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OrganizationEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationEntityId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TenantId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.TeamInvite.TeamInviteEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamInviteEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.TeamMember.TeamMemberEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMemberEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Country")
                        .HasDatabaseName("IX_Tenants_Country");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Tenants_Email");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Tenants_IsActive");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_Tenants_IsSoftDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Tenants_Name");

                    b.HasIndex("VatNumber")
                        .HasDatabaseName("IX_Tenants_VatNumber");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Families", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyInvite.FamilyInviteEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FamilyId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyInvites", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyMember.FamilyMemberEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FamilyId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("FamilyId1")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("FamilyId1");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyMemberEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.AddressEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ContactPersonEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactPersonEntityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PostalCode");

                    b.HasIndex("StreetId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CityEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CountryEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("CountryEntityId");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_Cities_CountryId");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_Cities_IsSoftDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Cities_Name");

                    b.HasIndex("PostalCode")
                        .HasDatabaseName("IX_Cities_PostalCode");

                    b.HasIndex("StateId")
                        .HasDatabaseName("IX_Cities_StateId");

                    b.HasIndex("StateId", "PostalCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Cities_StateId_PostalCode_Unique");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GlobalRegionId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("IsoCode")
                        .HasMaxLength(3)
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("GlobalRegionId")
                        .HasDatabaseName("IX_Countries_GlobalRegionId");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_Countries_IsSoftDeleted");

                    b.HasIndex("IsoCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Countries_IsoCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Countries_Name");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryRegionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("Primary key for country region using ULID format");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("Foreign key to the country this region belongs to");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("Name of the region within the country (e.g., Syddanmark, Midtjylland)");

                    b.HasKey("Id")
                        .HasName("PK_CountryRegions");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_CountryRegions_CountryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_CountryRegions_Name");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_CountryRegions_CountryId_Name_Unique");

                    b.ToTable("CountryRegions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.Region.GlobalRegionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_GlobalRegions_Name");

                    b.ToTable("GlobalRegions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.StateEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CountryId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IsoCode")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.StreetEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .HasDatabaseName("IX_Streets_CityId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Streets_Name");

                    b.HasIndex("CityId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Streets_CityId_Name_Unique");

                    b.ToTable("Streets", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Admin.AdminEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.ApiLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the API log entry");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKeyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("character varying(450)")
                        .HasComment("Foreign key reference to the API key used for the request");

                    b.Property<string>("RequestMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("character varying(10)")
                        .HasComment("HTTP method used for the request (GET, POST, PUT, PATCH, DELETE, etc.)");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2000)")
                        .HasComment("The API endpoint path that was requested");

                    b.Property<int>("ResponseLatency")
                        .HasColumnType("integer")
                        .HasComment("Response time in milliseconds for performance monitoring");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("character varying(450)")
                        .HasComment("Session identifier for tracking user sessions");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(true)
                        .HasColumnType("character varying(45)")
                        .HasComment("Source IP address of the client making the request");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer")
                        .HasComment("HTTP status code returned by the API");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)")
                        .HasComment("HTTP status message or custom response message");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId")
                        .HasDatabaseName("IX_ApiLogs_ApiKeyId");

                    b.HasIndex("RequestMethod")
                        .HasDatabaseName("IX_ApiLogs_RequestMethod");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_ApiLogs_SessionId");

                    b.HasIndex("SourceIp")
                        .HasDatabaseName("IX_ApiLogs_SourceIp");

                    b.HasIndex("StatusCode")
                        .HasDatabaseName("IX_ApiLogs_StatusCode");

                    b.HasIndex("ApiKeyId", "StatusCode")
                        .HasDatabaseName("IX_ApiLogs_ApiKeyId_StatusCode");

                    b.HasIndex("SessionId", "StatusCode")
                        .HasDatabaseName("IX_ApiLogs_SessionId_StatusCode");

                    b.ToTable("ApiLogs", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.AuditLogEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("Primary key for audit log entry");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)")
                        .HasComment("Description of the action performed (GDPR sensitive)")
                        .HasAnnotation("DataClassification", GDPRType.SensitiveMiscellaneous)
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("Category classification for the audit action");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when the action was performed");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasComment("New value after the change (JSON format)")
                        .HasAnnotation("DataClassification", GDPRType.SensitiveMiscellaneous);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasComment("Previous value before the change (JSON format)")
                        .HasAnnotation("DataClassification", GDPRType.SensitiveMiscellaneous);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("Foreign key to the tenant where the action occurred");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("Foreign key to the user who performed the action");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_AuditLogs_Category")
                        .HasFilter("\"Category\" IS NOT NULL");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_AuditLogs_IsSoftDeleted");

                    b.HasIndex("ModifiedAt")
                        .HasDatabaseName("IX_AuditLogs_ModifiedAt");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AuditLogs_TenantId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLogs_UserId");

                    b.HasIndex("Category", "ModifiedAt")
                        .HasDatabaseName("IX_AuditLogs_Category_ModifiedAt")
                        .HasFilter("\"Category\" IS NOT NULL");

                    b.HasIndex("TenantId", "IsSoftDeleted")
                        .HasDatabaseName("IX_AuditLogs_TenantId_IsSoftDeleted");

                    b.HasIndex("TenantId", "ModifiedAt")
                        .HasDatabaseName("IX_AuditLogs_TenantId_ModifiedAt");

                    b.HasIndex("UserId", "ModifiedAt")
                        .HasDatabaseName("IX_AuditLogs_UserId_ModifiedAt");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.ResourcePermissionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_ResourcePermissions_IsSoftDeleted");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("IX_ResourcePermissions_ResourceId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ResourcePermissions_UserId");

                    b.HasIndex("UserId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("IX_ResourcePermissions_UserId_ResourceId_Unique");

                    b.ToTable("ResourcePermissions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.ResourcePermissionType.ResourcePermissionTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourcePermissionId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ResourcePermissionId");

                    b.ToTable("ResourcePermissionTypes", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the role was created");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional description of the role's purpose and permissions");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the role was last modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("The role name (e.g., Administrator, User, Manager)");

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Roles_CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Billing.PaymentProvider.PaymentProviderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Unique identifier for the payment provider");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when the payment provider was created");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional description of the payment provider and its capabilities");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if this payment provider is currently active and available for use");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the payment provider was last updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("Name of the payment provider (e.g., Stripe, PayPal, Square)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PaymentProviders_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PaymentProviders_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_PaymentProviders_Name");

                    b.ToTable("PaymentProviders", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Billing.Subscription.SubscriptionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("Unique identifier for the subscription plan");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)")
                        .HasComment("Unique code identifier for the subscription plan");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when the subscription was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("User ID who created this subscription");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1000)")
                        .HasComment("Detailed description of the subscription plan features and benefits");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)")
                        .HasComment("Name of the subscription plan (e.g., Basic, Pro, Enterprise)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)")
                        .HasComment("Current status of the subscription (Active, Inactive, Discontinued, etc.)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)")
                        .HasComment("User ID who last updated this subscription");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Subscriptions_Code");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Subscriptions_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Subscriptions_CreatedBy");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Subscriptions_Name");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Subscriptions_Status");

                    b.HasIndex("TenantId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.AccountEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CustomerType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CustomerId1")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantId1")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId1");

                    b.ToTable("ContactPersons", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentlyAtOnboardingFlowStep")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganizationEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VatId")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerType")
                        .HasDatabaseName("IX_Customers_CustomerType");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Customers_Id");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_Customers_IsSoftDeleted");

                    b.HasIndex("OrganizationEntityId");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("IX_Customers_OrganizationId");

                    b.HasIndex("StripeCustomerId")
                        .IsUnique()
                        .HasDatabaseName("IX_Customers_StripeCustomerId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Customers_Type");

                    b.HasIndex("VatNumber")
                        .HasDatabaseName("IX_Customers_VatNumber");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.DataExport.DataExportEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.ToTable("DataExports");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Email.EmailAddress.EmailAddressEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasComment("Primary key for email address");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(true)
                        .HasColumnType("character varying(320)")
                        .HasComment("Email address following RFC 5321 standards")
                        .HasAnnotation("DataClassification", GDPRType.DirectlyIdentifiable)
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("ContactPersonEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ContactPersonId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasComment("Optional foreign key to associated customer");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenantId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasComment("Optional foreign key to associated tenant");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasComment("Foreign key to the user who owns this email");

                    b.HasKey("Id")
                        .HasName("PK_Emails");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasDatabaseName("IX_Emails_Address_Unique");

                    b.HasIndex("ContactPersonEntityId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Emails_CustomerId")
                        .HasFilter("\"CustomerId\" IS NOT NULL");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Emails_TenantId")
                        .HasFilter("\"TenantId\" IS NOT NULL");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Emails_UserId");

                    b.HasIndex("UserId", "CustomerId")
                        .HasDatabaseName("IX_Emails_UserId_CustomerId");

                    b.ToTable("EmailAddresses", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Email.EmailInvite.EmailInviteEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("InviteIsUsed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferredEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ExpireAt")
                        .HasDatabaseName("IX_EmailInvites_ExpireAt");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_EmailInvites_IsSoftDeleted");

                    b.HasIndex("ReferredEmailAddress")
                        .HasDatabaseName("IX_EmailInvites_ReferredEmailAddress");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_EmailInvites_Token");

                    b.HasIndex("UserEntityId")
                        .HasDatabaseName("IX_EmailInvites_UserEntityId");

                    b.ToTable("EmailInvites", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Email.EmailVerificationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasBeenOpened")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_EmailVerifications_IsSoftDeleted");

                    b.HasIndex("Token")
                        .HasDatabaseName("IX_EmailVerifications_Token");

                    b.HasIndex("UserEntityId")
                        .HasDatabaseName("IX_EmailVerifications_UserEntityId");

                    b.ToTable("EmailVerifications", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.FileManagement.FileEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Integration.IntegrationEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasComment("Primary key for integration");

                    b.Property<string>("ApiKeySecretReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)")
                        .HasComment("Reference to the securely stored API key")
                        .HasAnnotation("DataClassification", GDPRType.SensitiveMiscellaneous);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when the integration was created");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional description of the integration purpose");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the integration was last updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("Friendly name for the integration");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasComment("Foreign key to the user who owns this integration");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("Name of the third-party service (e.g., Stripe, SendGrid, Twilio)");

                    b.HasKey("Id")
                        .HasName("PK_Integrations");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Integrations_CreatedAt");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Integrations_OwnerId");

                    b.HasIndex("ServiceName")
                        .HasDatabaseName("IX_Integrations_ServiceName");

                    b.HasIndex("OwnerId", "ServiceName")
                        .IsUnique()
                        .HasDatabaseName("IX_Integrations_OwnerId_ServiceName_Unique");

                    b.HasIndex("ServiceName", "CreatedAt")
                        .HasDatabaseName("IX_Integrations_ServiceName_CreatedAt");

                    b.ToTable("Integrations", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.LanguageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Languages_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Languages_Name");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.NotificationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notifications_CreatedAt");

                    b.HasIndex("IsRead")
                        .HasDatabaseName("IX_Notifications_IsRead");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Notifications_OwnerId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Notifications_UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.PermissionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the permission was created");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional description of what this permission allows");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the permission was last modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("The permission name (e.g., 'read:users', 'write:documents')");

                    b.HasKey("Id")
                        .HasName("PK_Permissions");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Permissions_CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.PhoneNumberEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ContactPersonId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.RolePermissionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermissions_RoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.SessionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionData")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("SensitiveData", true);

                    b.HasKey("Id");

                    b.HasIndex("SessionKey")
                        .IsUnique();

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.EmailVerification.EmailVerificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasBeenOpened")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("EmailVerificationEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.ProfileEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("Country")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("TimeZone")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfileEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("SensitiveData", true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_Users_IsSoftDeleted");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Users_TenantId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.UserRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Modules.Credit.CreditEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("CreditRemaining")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("IX_Credits_IsSoftDeleted");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Credits_TenantId");

                    b.HasIndex("TenantId", "IsSoftDeleted")
                        .HasDatabaseName("IX_Credits_TenantId_IsSoftDeleted");

                    b.ToTable("Credits", (string)null);
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.ApiKeyEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Organization.OrganizationEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.Team.TeamEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Organization.OrganizationEntity", null)
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationEntityId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany("Teams")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Teams_Tenants_TenantId");

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.TeamInvite.TeamInviteEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.Team.TeamEntity", "Team")
                        .WithMany("TeamInvites")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.TeamMember.TeamMemberEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.Team.TeamEntity", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", null)
                        .WithMany("Tenants")
                        .HasForeignKey("CustomerEntityId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Tenants_Customers_CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyInvite.FamilyInviteEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyEntity", "Family")
                        .WithMany("FamilyInvites")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyMember.FamilyMemberEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyEntity", null)
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyEntity", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.AddressEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ContactPersonEntityId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.StreetEntity", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserEntityId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Customer");

                    b.Navigation("Street");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CityEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryEntityId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Cities_Countries_CountryId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Cities_States_StateId");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.Region.GlobalRegionEntity", "GlobalRegion")
                        .WithMany("Countries")
                        .HasForeignKey("GlobalRegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Countries_GlobalRegions_GlobalRegionId");

                    b.Navigation("GlobalRegion");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryRegionEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryRegions_Countries_CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.StateEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.StreetEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Streets_Cities_CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.ApiLogEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.SessionEntity", "SessionEntity")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .HasPrincipalKey("SessionKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApiLogs_Sessions_SessionId");

                    b.Navigation("SessionEntity");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.AuditLogEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AuditLogs_Users_ModifiedByUserId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AuditLogs_Tenants_TenantId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AuditLogs_Users_UserId");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.ResourcePermissionEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany("ResourcePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ResourcePermissions_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.ResourcePermissionType.ResourcePermissionTypeEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.ResourcePermissionEntity", "ResourcePermission")
                        .WithMany("PermissionTypes")
                        .HasForeignKey("ResourcePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourcePermission");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.RoleEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Billing.Subscription.SubscriptionEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.AccountEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactPersons_Customers_CustomerId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactPersons_Tenants_TenantId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId1");

                    b.Navigation("Customer");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Organization.OrganizationEntity", null)
                        .WithMany("Customers")
                        .HasForeignKey("OrganizationEntityId");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Email.EmailAddress.EmailAddressEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactPersonEntityId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", "ContactPerson")
                        .WithMany()
                        .HasForeignKey("ContactPersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Emails_ContactPersons_ContactPersonId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Emails_Customers_CustomerId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Emails_Tenants_TenantId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmailAddresses_Users_UserId");

                    b.Navigation("ContactPerson");

                    b.Navigation("Customer");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Email.EmailInvite.EmailInviteEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany("ReferralInvitations")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_EmailInvites_Users_UserEntityId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Email.EmailVerificationEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_EmailVerifications_Users_UserEntityId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Integration.IntegrationEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Integrations_Users_OwnerId");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.NotificationEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.PhoneNumberEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", "ContactPerson")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactPersonId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactPerson");

                    b.Navigation("Customer");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.RoleEntity", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Roles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.EmailVerification.EmailVerificationEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", null)
                        .WithMany("EmailVerifications")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.ProfileEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.ProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Tenants_TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles_RoleId");

                    b.HasOne("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Organization.OrganizationEntity", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Team.Team.TeamEntity", b =>
                {
                    b.Navigation("TeamInvites");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2B.Entities.Tenant.Tenant.TenantEntity", b =>
                {
                    b.Navigation("ContactPersons");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.B2C.Entities.Family.FamilyEntity", b =>
                {
                    b.Navigation("FamilyInvites");

                    b.Navigation("FamilyMembers");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Addressing.Region.GlobalRegionEntity", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.ResourcePermissionEntity", b =>
                {
                    b.Navigation("PermissionTypes");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Authorization.RoleEntity", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.ContactPerson.ContactPersonEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.Customer.CustomerEntity", b =>
                {
                    b.Navigation("ContactPersons");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("AppBlueprint.Infrastructure.DatabaseContexts.Baseline.Entities.User.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("EmailAddresses");

                    b.Navigation("EmailVerifications");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ReferralInvitations");

                    b.Navigation("ResourcePermissions");

                    b.Navigation("Roles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
