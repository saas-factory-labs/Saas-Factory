// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AppBlueprint.Presentation.Ui.Sdk.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CustomerEntity : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The contactPersons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.ContactPersonEntity>? ContactPersons { get; set; }
#nullable restore
#else
        public List<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.ContactPersonEntity> ContactPersons { get; set; }
#endif
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The currentlyAtOnboardingFlowStep property</summary>
        public int? CurrentlyAtOnboardingFlowStep { get; set; }
        /// <summary>The customerType property</summary>
        public int? CustomerType { get; set; }
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The stripeCustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StripeCustomerId { get; set; }
#nullable restore
#else
        public string StripeCustomerId { get; set; }
#endif
        /// <summary>The stripeSubscriptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StripeSubscriptionId { get; set; }
#nullable restore
#else
        public string StripeSubscriptionId { get; set; }
#endif
        /// <summary>The tenants property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.TenantEntity>? Tenants { get; set; }
#nullable restore
#else
        public List<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.TenantEntity> Tenants { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The vatId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VatId { get; set; }
#nullable restore
#else
        public string VatId { get; set; }
#endif
        /// <summary>The vatNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VatNumber { get; set; }
#nullable restore
#else
        public string VatNumber { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.CustomerEntity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.CustomerEntity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.CustomerEntity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "contactPersons", n => { ContactPersons = n.GetCollectionOfObjectValues<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.ContactPersonEntity>(global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.ContactPersonEntity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "currentlyAtOnboardingFlowStep", n => { CurrentlyAtOnboardingFlowStep = n.GetIntValue(); } },
                { "customerType", n => { CustomerType = n.GetIntValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "stripeCustomerId", n => { StripeCustomerId = n.GetStringValue(); } },
                { "stripeSubscriptionId", n => { StripeSubscriptionId = n.GetStringValue(); } },
                { "tenants", n => { Tenants = n.GetCollectionOfObjectValues<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.TenantEntity>(global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.TenantEntity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "vatId", n => { VatId = n.GetStringValue(); } },
                { "vatNumber", n => { VatNumber = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.ContactPersonEntity>("contactPersons", ContactPersons);
            writer.WriteStringValue("country", Country);
            writer.WriteIntValue("currentlyAtOnboardingFlowStep", CurrentlyAtOnboardingFlowStep);
            writer.WriteIntValue("customerType", CustomerType);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("stripeCustomerId", StripeCustomerId);
            writer.WriteStringValue("stripeSubscriptionId", StripeSubscriptionId);
            writer.WriteCollectionOfObjectValues<global::AppBlueprint.Presentation.Ui.Sdk.Client.Models.TenantEntity>("tenants", Tenants);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("vatId", VatId);
            writer.WriteStringValue("vatNumber", VatNumber);
        }
    }
}
#pragma warning restore CS0618
