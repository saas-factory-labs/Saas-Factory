@using AppBlueprint.Infrastructure.Authorization
@implements IDisposable
@inject IUserAuthenticationProvider AuthenticationService
@inject NavigationManager NavigationManager

<CascadingValue Value="@_authState">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private AuthenticationState _authState = new();

    protected override async Task OnInitializedAsync()
    {
        _authState = new AuthenticationState
        {
            IsAuthenticated = AuthenticationService.IsAuthenticated(),
            Username = ""
        };

        await base.OnInitializedAsync();
    }

    public async Task<bool> LoginAsync(string email, string password)
    {
        var result = await AuthenticationService.LoginAsync(email, password);
        
        if (result)
        {
            _authState = new AuthenticationState
            {
                IsAuthenticated = true,
                Username = email
            };
            
            await InvokeAsync(StateHasChanged);
            NavigationManager.NavigateTo("/dashboard");
        }
        
        return result;
    }

    public async Task LogoutAsync()
    {
        await AuthenticationService.LogoutAsync();
        
        _authState = new AuthenticationState
        {
            IsAuthenticated = false,
            Username = ""
        };
        
        await InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo("/login");
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    public class AuthenticationState
    {
        public bool IsAuthenticated { get; set; }
        public string Username { get; set; } = string.Empty;
    }
}