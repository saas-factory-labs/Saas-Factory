@using AppBlueprint.Infrastructure.Authorization
@using AppBlueprint.UiKit.Components.Authentication
@inject NavigationManager NavigationManager

@if (_isAuthenticated)
{
    @ChildContent
}
else if (_isCheckingAuth)
{
    <MudProgressCircular Indeterminate="true" />
}

@code {
    [Parameter]
    public required RenderFragment ChildContent { get; set; }
    
    [CascadingParameter]
    public required AuthProvider Auth { get; set; }

    private bool _isAuthenticated;
    private bool _isCheckingAuth = true;
    private bool _hasChecked = false;

    protected override void OnInitialized()
    {
        if (Auth is null)
        {
            Console.Error.WriteLine("[RequireAuthentication] Error: AuthProvider is null");
            _isCheckingAuth = false;
            return;
        }
        
        // Subscribe to auth state changes
        Auth.OnAuthStateChanged += HandleAuthStateChanged;
        
        Console.WriteLine("[RequireAuthentication] OnInitialized - Subscribed to auth state changes");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasChecked)
        {
            _hasChecked = true;
            
            Console.WriteLine($"[RequireAuthentication] OnAfterRenderAsync - Checking auth state");
            
            // Check authentication state
            _isAuthenticated = Auth?.IsAuthenticated ?? false;
            _isCheckingAuth = false;
            
            Console.WriteLine($"[RequireAuthentication] IsAuthenticated = {_isAuthenticated}");
            
            if (!_isAuthenticated)
            {
                Console.WriteLine("[RequireAuthentication] Not authenticated - redirecting to login");
                NavigationManager.NavigateTo("/login", forceLoad: false);
            }
            else
            {
                Console.WriteLine("[RequireAuthentication] Authenticated - showing protected content");
                StateHasChanged();
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private void HandleAuthStateChanged()
    {
        Console.WriteLine("[RequireAuthentication] Auth state changed - updating UI");
        _isAuthenticated = Auth?.IsAuthenticated ?? false;
        _isCheckingAuth = false;
        Console.WriteLine($"[RequireAuthentication] New auth state: {_isAuthenticated}");
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (Auth is not null)
        {
            Auth.OnAuthStateChanged -= HandleAuthStateChanged;
        }
    }
}
