@page "/forgot-password"
@using AppBlueprint.Infrastructure.Services.Users
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Forgot Password - AppBlueprint</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Forgot Password</MudText>
        
        @if (_isSuccess)
        {
            <div class="d-flex flex-column align-center my-4">
                <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Success" Size="Size.Large" Class="mb-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Check Your Email</MudText>
                <MudText Align="Align.Center" Class="mb-4">
                    We've sent a password reset link to <strong>@_email</strong>. 
                    Please check your inbox and follow the instructions to reset your password.
                </MudText>
                <MudText Align="Align.Center" Class="mud-text-secondary mb-4">
                    If you don't see the email in your inbox, please check your spam folder.
                </MudText>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ResetForm">
                        Send to another email
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/login">
                        Return to Login
                    </MudButton>
                </div>
            </div>
        }        else
        {
            <form id="forgot-password-form"
                  method="post"
                  action="/forgot-password"
                  @onsubmit="HandleForgotPassword"
                  @onsubmit:preventDefault="true"
                  data-dashlane-rid="forgot-password-form"
                  data-form-type="other">
                
                @* Hidden native input for password managers *@
                <div style="position: absolute; left: -9999px; width: 1px; height: 1px; opacity: 0;">
                    <input type="email" 
                           name="email" 
                           autocomplete="username"
                           value="@_email"
                           @onchange="(e) => _email = e.Value?.ToString() ?? string.Empty"
                           data-dashlane-rid="hidden-email"
                           data-lpignore="false" />
                </div>
                
                <MudForm @ref="_form" Class="mt-4">
                    <MudText Class="mb-4">
                        Enter your email address and we'll send you a link to reset your password.
                    </MudText>
                      <MudTextField @bind-Value="_email" 
                                  Label="Email" 
                                  Required="true"
                                  RequiredError="Email is required"
                                  InputType="InputType.Email" 
                                  id="email"
                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email format" })"
                                  InputAttributes="@(new Dictionary<string, object>
                                  {
                                      ["autocomplete"] = "username",
                                      ["name"] = "email",
                                      ["type"] = "email",
                                      ["data-lpignore"] = "false",
                                      ["data-form-type"] = "other",
                                      ["data-dashlane-rid"] = "email-field",
                                      ["data-dashlane-label"] = "Email"
                                  })" />
                
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Link="/login">
                        Back to Login
                    </MudButton>                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                           OnClick="HandleForgotPassword" Disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <span class="ms-2">Sending...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </MudButton>
                </div>
                </MudForm>
            </form>
        }
    </MudPaper>
</MudContainer>

@code {
    private string _email = string.Empty;
    private bool _isLoading;
    private bool _isSuccess;
    private MudForm _form = default!;
    
    private async Task HandleForgotPassword()
    {
        await _form.Validate();
        
        if (!_form.IsValid)
        {
            return;
        }

        if (string.IsNullOrEmpty(_email))
        {
            Snackbar.Add("Please enter your email address", Severity.Warning);
            return;
        }

        try
        {
            _isLoading = true;
            
            // Request password reset token
            await UserService.InitiatePasswordResetAsync(_email, CancellationToken.None);
            
            // Mark as success to show the success message
            _isSuccess = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void ResetForm()
    {
        _isSuccess = false;
        _email = string.Empty;
    }
}