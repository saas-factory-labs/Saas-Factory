@page "/login"
@using AppBlueprint.Infrastructure.Authorization
@using AppBlueprint.UiKit.Components.Authentication
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Login - AppBlueprint</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudTabs @bind-ActivePanelIndex="_activeTabIndex">            <!-- ─────────────────────────────  LOGIN  ───────────────────────────── -->            <MudTabPanel Text="Login">
                @* Pure HTML form optimized for password managers *@
                <form id="login-form"
                      method="post"
                      action="/login"
                      @onsubmit="HandleLoginSubmit"
                      @onsubmit:preventDefault="true"
                      autocomplete="on"
                      data-form-type="login">

                    <div class="login-form-container">
                        <!-- Email Field -->
                        <div class="mud-input-field">
                            <label for="username" class="mud-input-label">Email</label>
                            <input type="email" 
                                   id="username"
                                   name="username" 
                                   autocomplete="username"
                                   @bind="_loginEmail"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Password Field -->
                        <div class="mud-input-field">
                            <label for="current-password" class="mud-input-label">Password</label>
                            <input type="password" 
                                   id="current-password"
                                   name="password" 
                                   autocomplete="current-password"
                                   @bind="_loginPassword"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Remember Me -->
                        <div class="remember-me-container">
                            <label class="remember-me-label">
                                <input type="checkbox" 
                                       @bind="_rememberMe"
                                       class="remember-me-checkbox" />
                                <span>Remember me</span>
                            </label>
                        </div>

                        <!-- Actions -->
                        <div class="login-actions">
                            <MudLink Href="/forgot-password" Class="forgot-password-link">Forgot password?</MudLink>

                            <button type="submit"
                                    class="login-submit-button"
                                    disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span>Signing in…</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                    </div>
                </form>

                <style>
                    .login-form-container {
                        display: flex;
                        flex-direction: column;
                        gap: 16px;
                        margin-top: 16px;
                    }

                    .mud-input-field {
                        position: relative;
                        margin-bottom: 16px;
                    }

                    .mud-input-label {
                        position: absolute;
                        top: -8px;
                        left: 12px;
                        background: white;
                        padding: 0 4px;
                        font-size: 12px;
                        color: rgba(0, 0, 0, 0.6);
                        z-index: 1;
                    }

                    .mud-input-control {
                        width: 100%;
                        height: 56px;
                        padding: 16.5px 14px;
                        border: 1px solid rgba(0, 0, 0, 0.23);
                        border-radius: 4px;
                        font-size: 16px;
                        font-family: "Roboto", "Helvetica", "Arial", sans-serif;
                        background: white;
                        transition: border-color 0.2s ease;
                    }

                    .mud-input-control:focus {
                        outline: none;
                        border-color: #594ae2;
                        border-width: 2px;
                    }

                    .mud-input-control:focus + .mud-input-label,
                    .mud-input-control:not(:placeholder-shown) + .mud-input-label {
                        color: #594ae2;
                    }

                    .remember-me-container {
                        margin: 8px 0;
                    }

                    .remember-me-label {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                        font-size: 14px;
                        cursor: pointer;
                    }

                    .remember-me-checkbox {
                        width: 18px;
                        height: 18px;
                        accent-color: #594ae2;
                    }

                    .login-actions {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-top: 24px;
                    }

                    .forgot-password-link {
                        color: #594ae2;
                        text-decoration: none;
                        font-size: 14px;
                    }

                    .forgot-password-link:hover {
                        text-decoration: underline;
                    }

                    .login-submit-button {
                        background-color: #594ae2;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        padding: 8px 22px;
                        min-width: 64px;
                        font-size: 0.875rem;
                        font-weight: 500;
                        cursor: pointer;
                        transition: background-color 0.2s ease;
                    }

                    .login-submit-button:hover:not(:disabled) {
                        background-color: #4c3ed7;
                    }

                    .login-submit-button:disabled {
                        background-color: rgba(0, 0, 0, 0.12);
                        color: rgba(0, 0, 0, 0.26);
                        cursor: not-allowed;
                    }
                </style>
            </MudTabPanel>            <!-- ───────────────────────────  REGISTER  ──────────────────────────── -->
            <MudTabPanel Text="Register">
                @* Pure HTML form optimized for password managers *@
                <form id="register-form"
                      method="post"
                      action="/register"
                      @onsubmit="HandleRegisterSubmit"
                      @onsubmit:preventDefault="true"
                      autocomplete="on"
                      data-form-type="signup">

                    <div class="register-form-container">
                        <!-- Name Field -->
                        <div class="mud-input-field">
                            <label for="name" class="mud-input-label">Name</label>
                            <input type="text" 
                                   id="name"
                                   name="name" 
                                   autocomplete="name"
                                   @bind="_registerName"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Email Field -->
                        <div class="mud-input-field">
                            <label for="email" class="mud-input-label">Email</label>
                            <input type="email" 
                                   id="email"
                                   name="email" 
                                   autocomplete="username"
                                   @bind="_registerEmail"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Password Field -->
                        <div class="mud-input-field">
                            <label for="new-password" class="mud-input-label">Password</label>
                            <input type="password" 
                                   id="new-password"
                                   name="password" 
                                   autocomplete="new-password"
                                   @bind="_registerPassword"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Confirm Password Field -->
                        <div class="mud-input-field">
                            <label for="confirm-password" class="mud-input-label">Confirm Password</label>
                            <input type="password" 
                                   id="confirm-password"
                                   name="confirm-password" 
                                   autocomplete="new-password"
                                   @bind="_registerConfirmPassword"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Submit Button -->
                        <div class="register-actions">
                            <button type="submit"
                                    class="register-submit-button"
                                    disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span>Registering…</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                    </div>
                </form>

                <style>
                    .register-form-container {
                        display: flex;
                        flex-direction: column;
                        gap: 16px;
                        margin-top: 16px;
                    }

                    .register-actions {
                        display: flex;
                        justify-content: flex-end;
                        margin-top: 24px;
                    }

                    .register-submit-button {
                        background-color: #594ae2;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        padding: 8px 22px;
                        min-width: 64px;
                        font-size: 0.875rem;
                        font-weight: 500;
                        cursor: pointer;
                        transition: background-color 0.2s ease;
                    }

                    .register-submit-button:hover:not(:disabled) {
                        background-color: #4c3ed7;
                    }

                    .register-submit-button:disabled {
                        background-color: rgba(0, 0, 0, 0.12);
                        color: rgba(0, 0, 0, 0.26);
                        cursor: not-allowed;
                    }
                </style>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter] private AuthProvider Auth { get; set; } = default!;

    private int _activeTabIndex;
    private string _loginEmail               = string.Empty;
    private string _loginPassword            = string.Empty;
    private bool   _rememberMe;
    private string _registerName             = string.Empty;
    private string _registerEmail            = string.Empty;
    private string _registerPassword         = string.Empty;
    private string _registerConfirmPassword  = string.Empty;
    private bool   _isLoading;

    protected override void OnInitialized()
    {
        if (Auth?.IsAuthenticated == true)
            NavigationManager.NavigateTo("/");
    }

    /* ─────────────  LOGIN  ───────────── */
    private async Task HandleLoginSubmit() => await HandleLogin();

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(_loginEmail) || string.IsNullOrWhiteSpace(_loginPassword))
        {
            Snackbar.Add("Please enter both email and password", Severity.Warning);
            return;
        }

        try
        {
            _isLoading = true;
            if (await Auth.LoginAsync(_loginEmail, _loginPassword))
            {
                Snackbar.Add("Login successful!", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add("Invalid email or password. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /* ────────────  REGISTER  ──────────── */
    private async Task HandleRegisterSubmit() => await HandleRegister();

    private async Task HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(_registerName))
        {
            Snackbar.Add("Please enter your name", Severity.Warning); return;
        }
        if (string.IsNullOrWhiteSpace(_registerEmail))
        {
            Snackbar.Add("Please enter your email", Severity.Warning); return;
        }
        if (string.IsNullOrWhiteSpace(_registerPassword))
        {
            Snackbar.Add("Please enter a password", Severity.Warning); return;
        }
        if (_registerPassword != _registerConfirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Warning); return;
        }

        try
        {
            _isLoading = true;

            bool loginSuccess = await Auth.LoginAsync(_registerEmail, _registerPassword);  // replace with real API

            if (loginSuccess)
            {
                Snackbar.Add("Registration successful! You're now logged in.", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add("Registration successful, but automatic login failed. Please log in manually.", Severity.Warning);
                _activeTabIndex = 0;
                _loginEmail     = _registerEmail;
                _loginPassword  = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Registration failed: {ex.Message}", Severity.Error);        }
        finally
        {
            _isLoading = false;
        }
    }
}