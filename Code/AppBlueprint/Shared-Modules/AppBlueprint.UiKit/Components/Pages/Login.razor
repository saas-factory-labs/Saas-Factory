@page "/login"
@using AppBlueprint.Infrastructure.Authorization
@using AppBlueprint.UiKit.Components.Authentication
@using AppBlueprint.Infrastructure.Authorization.Providers.Logto
@using Microsoft.Extensions.Configuration
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IUserAuthenticationProvider AuthService
@inject IConfiguration Configuration

<PageTitle>Login - AppBlueprint</PageTitle>

@if (_useLogtoHostedLogin)
{
    <!-- Show loading screen while redirecting to Logto -->
    <div class="login-page-wrapper">
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="min-height: 100vh;">
            <MudPaper Elevation="3" Class="pa-6 text-center">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" Class="mb-4" />
                <MudText Typo="Typo.h5" Class="mb-2">Redirecting to Login...</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Please wait while we redirect you to the login page.</MudText>
            </MudPaper>
        </MudContainer>
    </div>
}
else
{
    <!-- Original login form for non-Logto authentication -->
    <div class="login-page-wrapper">
        <div class="login-container">
            <div class="login-hero-section">
                <div class="login-logo">
                    <div class="login-icon">
                        <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" />
                        </svg>
                    </div>
                    <h1 class="login-title">Welcome Back</h1>
                    <p class="login-subtitle">Sign in to your account to continue</p>
                </div>
            </div>
            
            <MudPaper Elevation="8" Class="login-paper">
                <MudTabs @bind-ActivePanelIndex="_activeTabIndex" 
                         Color="Color.Primary"
                         TabPanelHeaderStyle="font-weight: 600; font-size: 16px"
                         Rounded="true"
                         Centered="true"
                         Border="false"
                         Class="login-tabs">            <!-- ─────────────────────────────  LOGIN  ───────────────────────────── -->            <MudTabPanel Text="Login">
                @* Pure HTML form optimized for password managers *@
                <form id="login-form"
                      @onsubmit="HandleLoginSubmit"
                      @onsubmit:preventDefault="true"
                      autocomplete="on"
                      data-form-type="login">

                    <div class="login-form-container">
                        <!-- Email Field -->
                        <div class="mud-input-field">
                            <label for="username" class="mud-input-label">Email</label>
                            <input type="email" 
                                   id="username"
                                   name="username" 
                                   autocomplete="username"
                                   @bind="_loginEmail"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Password Field -->
                        <div class="mud-input-field">
                            <label for="current-password" class="mud-input-label">Password</label>
                            <input type="password" 
                                   id="current-password"
                                   name="password" 
                                   autocomplete="current-password"
                                   @bind="_loginPassword"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Remember Me -->
                        <div class="remember-me-container">
                            <label class="remember-me-label">
                                <input type="checkbox" 
                                       @bind="_rememberMe"
                                       class="remember-me-checkbox" />
                                <span>Remember me</span>
                            </label>
                        </div>

                        <!-- Actions -->
                        <div class="login-actions">
                            <MudLink Href="/forgot-password" Class="forgot-password-link">Forgot password?</MudLink>

                            <button type="submit"
                                    class="login-submit-button"
                                    disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span>Signing in…</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                    </div>
                </form>

                <style>
                    /* CSS Custom Properties */
                    :root {
                        --primary-color: #594ae2;
                        --primary-hover: #4c3ed7;
                        --primary-focus: #3d2ed5;
                        --primary-light: rgba(89, 74, 226, 0.1);
                        --primary-shadow: rgba(89, 74, 226, 0.2);
                        --border-color: rgba(0, 0, 0, 0.12);
                        --text-primary: rgba(0, 0, 0, 0.87);
                        --text-secondary: rgba(0, 0, 0, 0.6);
                        --disabled-bg: rgba(0, 0, 0, 0.08);
                        --disabled-text: rgba(0, 0, 0, 0.38);
                        --surface-white: #ffffff;
                        --surface-light: #fafafa;
                        --spacing-xs: 4px;
                        --spacing-sm: 8px;
                        --spacing-md: 16px;
                        --spacing-lg: 24px;
                        --spacing-xl: 32px;
                        --spacing-xxl: 48px;
                        --border-radius: 12px;
                        --border-radius-sm: 8px;
                        --font-size-h1: 28px;
                        --font-size-body: 16px;
                        --font-size-label: 14px;
                        --font-size-button: 14px;
                        --font-size-caption: 12px;
                        --shadow-soft: 0 4px 20px rgba(0, 0, 0, 0.08);
                        --shadow-hover: 0 8px 30px rgba(0, 0, 0, 0.12);
                        --gradient-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                    }

                    /* Global page styling for login */
                    body.login-page {
                        margin: 0;
                        padding: 0;
                        background: var(--gradient-bg);
                        min-height: 100vh;
                        font-family: "Roboto", "Helvetica", "Arial", sans-serif;
                    }

                    .login-page-wrapper {
                        min-height: 100vh;
                        background: var(--gradient-bg);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: var(--spacing-md);
                        position: relative;
                        overflow: hidden;
                        width: 100%;
                        box-sizing: border-box;
                    }

                    .login-page-wrapper::before {
                        content: '';
                        position: absolute;
                        top: -50%;
                        right: -50%;
                        width: 100%;
                        height: 100%;
                        background: radial-gradient(circle, var(--primary-light) 0%, transparent 70%);
                        animation: float 6s ease-in-out infinite;
                        pointer-events: none;
                    }

                    .login-page-wrapper::after {
                        content: '';
                        position: absolute;
                        bottom: -50%;
                        left: -50%;
                        width: 80%;
                        height: 80%;
                        background: radial-gradient(circle, rgba(89, 74, 226, 0.05) 0%, transparent 70%);
                        animation: float 8s ease-in-out infinite reverse;
                        pointer-events: none;
                    }

                    @@keyframes float {
                        0%, 100% { transform: translate(0, 0) rotate(0deg); }
                        33% { transform: translate(20px, -20px) rotate(2deg); }
                        66% { transform: translate(-15px, 15px) rotate(-2deg); }
                    }

                    .login-container {
                        position: relative;
                        z-index: 2;
                        width: 100%;
                        max-width: 480px;
                        margin: 0 auto;
                    }

                    .login-hero-section {
                        text-align: center;
                        margin-bottom: var(--spacing-xl);
                        animation: slideInFromTop 0.6s ease-out;
                    }

                    @@keyframes slideInFromTop {
                        from {
                            opacity: 0;
                            transform: translateY(-30px);
                        }
                        to {
                            opacity: 1;
                            transform: translateY(0);
                        }
                    }

                    .login-logo {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        gap: var(--spacing-md);
                    }

                    .login-icon {
                        color: var(--primary-color);
                        background: var(--surface-white);
                        padding: var(--spacing-lg);
                        border-radius: 50%;
                        box-shadow: var(--shadow-soft);
                        animation: pulse 2s ease-in-out infinite;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        width: 80px;
                        height: 80px;
                    }

                    .login-icon svg {
                        width: 48px;
                        height: 48px;
                    }

                    @@keyframes pulse {
                        0%, 100% { transform: scale(1); box-shadow: var(--shadow-soft); }
                        50% { transform: scale(1.05); box-shadow: var(--shadow-hover); }
                    }

                    .login-title {
                        margin: 0;
                        font-size: var(--font-size-h1);
                        font-weight: 700;
                        color: var(--text-primary);
                        letter-spacing: -0.5px;
                    }

                    .login-subtitle {
                        margin: 0;
                        font-size: var(--font-size-body);
                        color: var(--text-secondary);
                        font-weight: 400;
                    }

                    .login-paper {
                        background: var(--surface-white);
                        border-radius: var(--border-radius);
                        box-shadow: var(--shadow-soft);
                        overflow: hidden;
                        animation: slideInFromBottom 0.6s ease-out 0.2s both;
                        backdrop-filter: blur(10px);
                        padding: var(--spacing-xl);
                    }

                    @@keyframes slideInFromBottom {
                        from {
                            opacity: 0;
                            transform: translateY(30px);
                        }
                        to {
                            opacity: 1;
                            transform: translateY(0);
                        }
                    }

                    .login-tabs {
                        margin-bottom: var(--spacing-lg);
                    }

                    .login-form-container {
                        display: flex;
                        flex-direction: column;
                        gap: var(--spacing-lg);
                        animation: fadeIn 0.4s ease-out 0.4s both;
                    }

                    @@keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }

                    .mud-input-field {
                        position: relative;
                        margin-bottom: var(--spacing-md);
                    }

                    .mud-input-label {
                        display: block;
                        margin-bottom: var(--spacing-sm);
                        font-size: var(--font-size-label);
                        font-weight: 600;
                        color: var(--text-secondary);
                        transition: color 0.3s ease;
                    }

                    .mud-input-control {
                        width: 100%;
                        height: 56px;
                        padding: var(--spacing-md) 20px;
                        border: 2px solid var(--border-color);
                        border-radius: var(--border-radius-sm);
                        font-size: var(--font-size-body);
                        font-family: "Roboto", "Helvetica", "Arial", sans-serif;
                        background: var(--surface-white);
                        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        box-sizing: border-box;
                        position: relative;
                    }

                    .mud-input-control:focus {
                        outline: none;
                        border-color: var(--primary-color);
                        box-shadow: 0 0 0 4px var(--primary-shadow);
                        transform: translateY(-2px);
                        background: var(--surface-white);
                    }

                    .mud-input-control:hover:not(:focus) {
                        border-color: var(--primary-hover);
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    }

                    .mud-input-control:focus + .mud-input-label,
                    .mud-input-control:not(:placeholder-shown) + .mud-input-label {
                        color: var(--primary-color);
                    }

                    .mud-input-control:invalid {
                        border-color: #d32f2f;
                        box-shadow: 0 0 0 4px rgba(211, 47, 47, 0.2);
                    }

                    .remember-me-container {
                        margin: var(--spacing-sm) 0;
                        display: flex;
                        align-items: center;
                    }

                    .remember-me-label {
                        display: flex;
                        align-items: center;
                        gap: var(--spacing-md);
                        font-size: var(--font-size-label);
                        cursor: pointer;
                        user-select: none;
                        padding: var(--spacing-sm) var(--spacing-md);
                        border-radius: var(--border-radius-sm);
                        transition: all 0.3s ease;
                        font-weight: 500;
                    }

                    .remember-me-label:hover {
                        background-color: var(--primary-light);
                        transform: translateX(4px);
                    }

                    .remember-me-checkbox {
                        width: 20px;
                        height: 20px;
                        accent-color: var(--primary-color);
                        cursor: pointer;
                        transition: transform 0.2s ease;
                    }

                    .remember-me-checkbox:hover {
                        transform: scale(1.1);
                    }

                    .remember-me-checkbox:focus {
                        outline: 2px solid var(--primary-color);
                        outline-offset: 2px;
                    }

                    .login-actions {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-top: var(--spacing-xl);
                        flex-wrap: wrap;
                        gap: var(--spacing-md);
                    }

                    .forgot-password-link {
                        color: var(--primary-color);
                        text-decoration: none;
                        font-size: var(--font-size-label);
                        font-weight: 600;
                        padding: var(--spacing-sm) var(--spacing-md);
                        border-radius: var(--border-radius-sm);
                        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        position: relative;
                        overflow: hidden;
                    }

                    .forgot-password-link::before {
                        content: '';
                        position: absolute;
                        top: 0;
                        left: -100%;
                        width: 100%;
                        height: 100%;
                        background: linear-gradient(90deg, transparent, var(--primary-light), transparent);
                        transition: left 0.5s ease;
                    }

                    .forgot-password-link:hover::before {
                        left: 100%;
                    }

                    .forgot-password-link:hover {
                        color: var(--primary-hover);
                        background-color: var(--primary-light);
                        transform: translateY(-2px);
                    }

                    .forgot-password-link:focus {
                        outline: 2px solid var(--primary-color);
                        outline-offset: 2px;
                    }

                    .login-submit-button {
                        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);
                        color: white;
                        border: none;
                        border-radius: var(--border-radius-sm);
                        padding: 16px var(--spacing-xl);
                        min-width: 120px;
                        font-size: var(--font-size-button);
                        font-weight: 700;
                        cursor: pointer;
                        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        box-shadow: 0 4px 15px var(--primary-shadow);
                        position: relative;
                        overflow: hidden;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }

                    .login-submit-button::before {
                        content: '';
                        position: absolute;
                        top: 0;
                        left: -100%;
                        width: 100%;
                        height: 100%;
                        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                        transition: left 0.5s ease;
                    }

                    .login-submit-button:hover:not(:disabled)::before {
                        left: 100%;
                    }

                    .login-submit-button:hover:not(:disabled) {
                        transform: translateY(-3px);
                        box-shadow: 0 8px 25px var(--primary-shadow);
                        background: linear-gradient(135deg, var(--primary-hover) 0%, var(--primary-focus) 100%);
                    }

                    .login-submit-button:focus:not(:disabled) {
                        outline: none;
                        box-shadow: 0 0 0 4px rgba(89, 74, 226, 0.3), 0 8px 25px var(--primary-shadow);
                    }

                    .login-submit-button:active:not(:disabled) {
                        transform: translateY(-1px);
                        box-shadow: 0 4px 15px var(--primary-shadow);
                    }

                    .login-submit-button:disabled {
                        background: var(--disabled-bg);
                        color: var(--disabled-text);
                        cursor: not-allowed;
                        box-shadow: none;
                        transform: none;
                    }

                    .login-submit-button:disabled::before {
                        display: none;
                    }

                    /* Responsive Design */
                    @@media (max-width: 480px) {
                        .login-page-wrapper {
                            padding: var(--spacing-sm);
                        }
                        
                        .login-paper {
                            padding: var(--spacing-lg);
                        }
                        
                        .login-actions {
                            flex-direction: column;
                            align-items: stretch;
                        }
                        
                        .login-submit-button {
                            width: 100%;
                            margin-top: var(--spacing-md);
                        }
                        
                        .forgot-password-link {
                            text-align: center;
                        }

                        .login-title {
                            font-size: 24px;
                        }

                        .login-hero-section {
                            margin-bottom: var(--spacing-lg);
                        }
                    }

                    @@media (max-width: 320px) {
                        .login-paper {
                            padding: var(--spacing-md);
                        }
                    }
                </style>
            </MudTabPanel>            <!-- ───────────────────────────  REGISTER  ──────────────────────────── -->
            <MudTabPanel Text="Register">
                @* Pure HTML form optimized for password managers *@
                <form id="register-form"
                      method="post"
                      action="/register"
                      @onsubmit="HandleRegisterSubmit"
                      @onsubmit:preventDefault="true"
                      autocomplete="on"
                      data-form-type="signup">

                    <div class="register-form-container">
                        <!-- Name Field -->
                        <div class="mud-input-field">
                            <label for="name" class="mud-input-label">Name</label>
                            <input type="text" 
                                   id="name"
                                   name="name" 
                                   autocomplete="name"
                                   @bind="_registerName"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Email Field -->
                        <div class="mud-input-field">
                            <label for="email" class="mud-input-label">Email</label>
                            <input type="email" 
                                   id="email"
                                   name="email" 
                                   autocomplete="username"
                                   @bind="_registerEmail"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Password Field -->
                        <div class="mud-input-field">
                            <label for="new-password" class="mud-input-label">Password</label>
                            <input type="password" 
                                   id="new-password"
                                   name="password" 
                                   autocomplete="new-password"
                                   @bind="_registerPassword"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Confirm Password Field -->
                        <div class="mud-input-field">
                            <label for="confirm-password" class="mud-input-label">Confirm Password</label>
                            <input type="password" 
                                   id="confirm-password"
                                   name="confirm-password" 
                                   autocomplete="new-password"
                                   @bind="_registerConfirmPassword"
                                   @bind:event="oninput"
                                   required
                                   class="mud-input-control"
                                   data-lpignore="false" />
                        </div>

                        <!-- Submit Button -->
                        <div class="register-actions">
                            <button type="submit"
                                    class="register-submit-button"
                                    disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span>Registering…</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                    </div>
                </form>

                <style>
                    .register-form-container {
                        display: flex;
                        flex-direction: column;
                        gap: var(--spacing-lg);
                        animation: fadeIn 0.4s ease-out 0.4s both;
                    }

                    .register-actions {
                        display: flex;
                        justify-content: flex-end;
                        margin-top: var(--spacing-xl);
                    }

                    .register-submit-button {
                        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);
                        color: white;
                        border: none;
                        border-radius: var(--border-radius-sm);
                        padding: 16px var(--spacing-xl);
                        min-width: 120px;
                        font-size: var(--font-size-button);
                        font-weight: 700;
                        cursor: pointer;
                        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        box-shadow: 0 4px 15px var(--primary-shadow);
                        position: relative;
                        overflow: hidden;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }

                    .register-submit-button::before {
                        content: '';
                        position: absolute;
                        top: 0;
                        left: -100%;
                        width: 100%;
                        height: 100%;
                        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                        transition: left 0.5s ease;
                    }

                    .register-submit-button:hover:not(:disabled)::before {
                        left: 100%;
                    }

                    .register-submit-button:hover:not(:disabled) {
                        transform: translateY(-3px);
                        box-shadow: 0 8px 25px var(--primary-shadow);
                        background: linear-gradient(135deg, var(--primary-hover) 0%, var(--primary-focus) 100%);
                    }

                    .register-submit-button:focus:not(:disabled) {
                        outline: none;
                        box-shadow: 0 0 0 4px rgba(89, 74, 226, 0.3), 0 8px 25px var(--primary-shadow);
                    }

                    .register-submit-button:active:not(:disabled) {
                        transform: translateY(-1px);
                        box-shadow: 0 4px 15px var(--primary-shadow);
                    }

                    .register-submit-button:disabled {
                        background: var(--disabled-bg);
                        color: var(--disabled-text);
                        cursor: not-allowed;
                        box-shadow: none;
                        transform: none;
                    }

                    .register-submit-button:disabled::before {
                        display: none;
                    }

                    /* Mobile responsiveness for register actions */
                    @@media (max-width: 480px) {
                        .register-actions {
                            justify-content: stretch;
                        }
                        
                        .register-submit-button {
                            width: 100%;
                        }
                    }
                </style>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
    </div>
</div>
}

@code {
    [CascadingParameter] private AuthProvider Auth { get; set; } = default!;

    private int _activeTabIndex;
    private string _loginEmail               = string.Empty;
    private string _loginPassword            = string.Empty;
    private bool   _rememberMe;
    private string _registerName             = string.Empty;
    private string _registerEmail            = string.Empty;
    private string _registerPassword         = string.Empty;
    private string _registerConfirmPassword  = string.Empty;
    private bool   _isLoading;
    private bool   _hasCheckedAuth = false;
    private bool   _useLogtoHostedLogin = false;

    protected override void OnInitialized()
    {
        // Check if we're using Logto with Authorization Code Flow
        var authProvider = Configuration["Authentication:Provider"];
        var useAuthCodeFlow = Configuration.GetValue<bool>("Authentication:Logto:UseAuthorizationCodeFlow", true);
        
        _useLogtoHostedLogin = authProvider?.Equals("Logto", StringComparison.OrdinalIgnoreCase) == true && useAuthCodeFlow;
        
        Console.WriteLine($"[Login] Auth Provider: {authProvider}, Use Logto Hosted Login: {_useLogtoHostedLogin}");
        
        // IMPORTANT: Check if we're coming back from a failed callback to prevent infinite loop
        var uri = new Uri(NavigationManager.Uri);
        var isFromFailedCallback = uri.Query.Contains("error=auth_failed");
        
        if (isFromFailedCallback)
        {
            Console.WriteLine("[Login] Detected failed callback - NOT redirecting to prevent loop");
            _useLogtoHostedLogin = false;
            Snackbar.Add("Authentication failed. Please try again.", Severity.Error);
            return;
        }
        
        // If using Logto, redirect immediately
        if (_useLogtoHostedLogin)
        {
            Console.WriteLine("[Login] Initiating immediate redirect to Logto...");
            RedirectToLogtoLoginSync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasCheckedAuth && !_useLogtoHostedLogin)
        {
            _hasCheckedAuth = true;
            
            // Give AuthProvider time to initialize
            await Task.Delay(50);
            
            if (Auth?.IsAuthenticated == true)
            {
                Console.WriteLine("[Login] User already authenticated, redirecting to dashboard");
                NavigationManager.NavigateTo("/dashboard", forceLoad: false);
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void RedirectToLogtoLoginSync()
    {
        try
        {
            Console.WriteLine("[Login] Starting Logto redirect process...");
            Console.WriteLine($"[Login] AuthService type: {AuthService?.GetType().FullName}");
            
            if (AuthService is null)
            {
                Console.Error.WriteLine("[Login] AuthService is NULL!");
                Snackbar.Add("Authentication service not available", Severity.Error);
                return;
            }
            
            // Get the underlying provider to access GetAuthorizationUrl
            if (AuthService is UserAuthenticationProviderAdapter adapter)
            {
                Console.WriteLine("[Login] AuthService is UserAuthenticationProviderAdapter");
                
                var adapterType = adapter.GetType();
                var providerField = adapterType.GetField("_provider", 
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                
                Console.WriteLine($"[Login] Provider field found: {providerField is not null}");
                
                if (providerField is not null)
                {
                    var provider = providerField.GetValue(adapter);
                    Console.WriteLine($"[Login] Provider value: {provider?.GetType().FullName}");
                    
                    if (provider is LogtoAuthorizationCodeProvider logtoProvider)
                    {
                        Console.WriteLine("[Login] Provider is LogtoAuthorizationCodeProvider");
                        
                        var redirectUri = $"{NavigationManager.BaseUri}callback";
                        Console.WriteLine($"[Login] Redirect URI: {redirectUri}");
                        
                        var authUrl = await logtoProvider.GetAuthorizationUrlAsync(redirectUri);
                        
                        Console.WriteLine($"[Login] Auth URL generated: {authUrl}");
                        Console.WriteLine($"[Login] Navigating to Logto NOW...");
                        
                        NavigationManager.NavigateTo(authUrl, forceLoad: true);
                    }
                    else
                    {
                        Console.Error.WriteLine($"[Login] Provider is not LogtoAuthorizationCodeProvider, it's: {provider?.GetType().FullName}");
                        Snackbar.Add($"Wrong provider type: {provider?.GetType().Name}", Severity.Error);
                    }
                }
                else
                {
                    Console.Error.WriteLine("[Login] Provider field not found via reflection");
                    Snackbar.Add("Cannot access authentication provider", Severity.Error);
                }
            }
            else
            {
                Console.Error.WriteLine($"[Login] AuthService is not UserAuthenticationProviderAdapter, it's: {AuthService?.GetType().FullName}");
                Snackbar.Add($"Wrong adapter type: {AuthService?.GetType().Name}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[Login] Error redirecting to Logto: {ex.Message}");
            Console.Error.WriteLine($"[Login] Stack trace: {ex.StackTrace}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task RedirectToLogtoLogin()
    {
        RedirectToLogtoLoginSync();
        await Task.CompletedTask;
    }

    /* ─────────────  LOGIN  ───────────── */
    private async Task HandleLoginSubmit() => await HandleLogin();

    private async Task HandleLogin()
    {
        // If using Logto hosted login, redirect instead of using form
        if (_useLogtoHostedLogin)
        {
            await RedirectToLogtoLogin();
            return;
        }

        if (string.IsNullOrWhiteSpace(_loginEmail) || string.IsNullOrWhiteSpace(_loginPassword))
        {
            Snackbar.Add("Please enter both email and password", Severity.Warning);
            return;
        }

        try
        {
            _isLoading = true;
            
            // Check if Auth is null
            if (Auth is null)
            {
                Console.Error.WriteLine("Error: Auth (AuthProvider) is null in Login component");
                Snackbar.Add("Authentication system is not available. Please refresh the page.", Severity.Error);
                return;
            }
            
            Console.WriteLine($"Attempting login for: {_loginEmail}");
            
            bool loginResult = await Auth.LoginAsync(_loginEmail, _loginPassword);
            
            if (loginResult)
            {
                Console.WriteLine("Login successful!");
                Snackbar.Add("Login successful!", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Login failed - invalid credentials");
                Snackbar.Add("Invalid email or password. Please try again.", Severity.Error);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.Error.WriteLine($"InvalidOperationException during login: {ex.Message}");
            Console.Error.WriteLine($"Stack trace: {ex.StackTrace}");
            Snackbar.Add($"Configuration error: {ex.Message}", Severity.Error);
        }
        catch (NullReferenceException ex)
        {
            Console.Error.WriteLine($"NullReferenceException during login: {ex.Message}");
            Console.Error.WriteLine($"Stack trace: {ex.StackTrace}");
            Snackbar.Add("A system error occurred. Check the configuration and try again.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception during login: {ex.GetType().Name}: {ex.Message}");
            Console.Error.WriteLine($"Stack trace: {ex.StackTrace}");
            if (ex.InnerException is not null)
            {
                Console.Error.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /* ────────────  REGISTER  ──────────── */
    private async Task HandleRegisterSubmit() => await HandleRegister();

    private async Task HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(_registerName))
        {
            Snackbar.Add("Please enter your name", Severity.Warning); return;
        }
        if (string.IsNullOrWhiteSpace(_registerEmail))
        {
            Snackbar.Add("Please enter your email", Severity.Warning); return;
        }
        if (string.IsNullOrWhiteSpace(_registerPassword))
        {
            Snackbar.Add("Please enter a password", Severity.Warning); return;
        }
        if (_registerPassword != _registerConfirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Warning); return;
        }

        try
        {
            _isLoading = true;

            bool loginSuccess = await Auth.LoginAsync(_registerEmail, _registerPassword);  // replace with real API

            if (loginSuccess)
            {
                Snackbar.Add("Registration successful! You're now logged in.", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add("Registration successful, but automatic login failed. Please log in manually.", Severity.Warning);
                _activeTabIndex = 0;
                _loginEmail     = _registerEmail;
                _loginPassword  = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Registration failed: {ex.Message}", Severity.Error);        }
        finally
        {
            _isLoading = false;
        }
    }
}
