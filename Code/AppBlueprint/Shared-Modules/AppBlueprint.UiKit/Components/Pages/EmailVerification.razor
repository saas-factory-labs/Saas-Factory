@page "/verify-email/{Token}/{UserId:int}"
@using AppBlueprint.Infrastructure.Services.Users
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Verify Email - AppBlueprint</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Email Verification</MudText>
        
        @if (_isLoading)
        {
            <div class="d-flex justify-center my-8">
                <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            </div>
            <MudText Align="Align.Center">Verifying your email, please wait...</MudText>
        }
        else if (_isVerified)
        {
            <div class="d-flex flex-column align-center my-4">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" Class="mb-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Email Verified Successfully!</MudText>
                <MudText Align="Align.Center" Class="mb-4">Thank you for verifying your email address. You can now access all features of your account.</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/login" Size="Size.Large">
                    Sign In
                </MudButton>
            </div>
        }
        else
        {
            <div class="d-flex flex-column align-center my-4">
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" Class="mb-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Verification Failed</MudText>
                <MudText Align="Align.Center" Class="mb-4">
                    @_errorMessage
                </MudText>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ResendVerificationEmail" Disabled="@_isResending">
                        @if (_isResending)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <span class="ms-2">Sending...</span>
                        }
                        else
                        {
                            <span>Resend Verification Email</span>
                        }
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/login">
                        Return to Login
                    </MudButton>
                </div>
            </div>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public string Token { get; set; }
    
    [Parameter]
    public int UserId { get; set; }
    
    private bool _isLoading = true;
    private bool _isVerified = false;
    private bool _isResending = false;
    private string _errorMessage = "The verification link is invalid or has expired. Please try again or request a new verification email.";
    
    protected override async Task OnInitializedAsync()
    {
        // Short delay to show loading state
        await Task.Delay(500);
        
        await VerifyEmail();
    }
    
    private async Task VerifyEmail()
    {
        try
        {
            var result = await UserService.VerifyEmailAsync(UserId.ToString(), Token, CancellationToken.None);
            _isVerified = result;
            
            if (!_isVerified)
            {
                _errorMessage = "The verification link is invalid or has expired. Please try again or request a new verification email.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            _isVerified = false;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task ResendVerificationEmail()
    {
        try
        {
            _isResending = true;
            
            // Generate a new verification token
            await UserService.GenerateEmailVerificationTokenAsync(UserId.ToString(), CancellationToken.None);
            
            Snackbar.Add("A new verification email has been sent to your email address.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to resend verification email: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isResending = false;
        }
    }
}