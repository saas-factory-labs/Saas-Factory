@page "/reset-password/{Token}"
@using AppBlueprint.Domain.Baseline.Users
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Reset Password - AppBlueprint</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Reset Password</MudText>
        
        @if (_isSuccess)
        {
            <div class="d-flex flex-column align-center my-4">
                <MudIcon Icon="@Icons.Material.Filled.LockReset" Color="Color.Success" Size="Size.Large" Class="mb-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Password Reset Successfully!</MudText>
                <MudText Align="Align.Center" Class="mb-4">
                    Your password has been reset. You can now log in with your new password.
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/login" Size="Size.Large">
                    Sign In
                </MudButton>
            </div>
        }
        else if (_isExpired)
        {
            <div class="d-flex flex-column align-center my-4">
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" Class="mb-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Link Expired</MudText>
                <MudText Align="Align.Center" Class="mb-4">
                    The password reset link has expired or is invalid. Please request a new password reset link.
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/forgot-password">
                    Request New Link
                </MudButton>
            </div>
        }
        else
        {
            <MudForm @ref="_form" Class="mt-4">
                <MudTextField @bind-Value="_email" Label="Email" Required="true" RequiredError="Email is required"
                           InputType="InputType.Email" Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email format" })" />
                           
                <MudTextField @bind-Value="_newPassword" Label="New Password" Required="true" RequiredError="New password is required"
                           InputType="InputType.Password" />
                           
                <MudTextField @bind-Value="_confirmPassword" Label="Confirm Password" Required="true" 
                           RequiredError="Please confirm your password"
                           InputType="InputType.Password" 
                           Validation="@(new Func<string, string>(PasswordMatch))" />
                
                <div class="d-flex justify-end mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                           OnClick="HandleResetPassword" Disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <span class="ms-2">Resetting...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </MudButton>
                </div>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public string Token { get; set; }
    
    private string _email = string.Empty;
    private string _newPassword = string.Empty;
    private string _confirmPassword = string.Empty;
    private bool _isLoading;
    private bool _isSuccess;
    private bool _isExpired;
    private MudForm _form;
    
    private string PasswordMatch(string arg)
    {
        if (arg != _newPassword)
            return "Passwords do not match";
        return null;
    }
    
    private async Task HandleResetPassword()
    {
        await _form.Validate();
        
        if (!_form.IsValid)
        {
            return;
        }

        if (string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_newPassword))
        {
            Snackbar.Add("Please fill out all fields", Severity.Warning);
            return;
        }

        if (_newPassword != _confirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Warning);
            return;
        }

        try
        {
            _isLoading = true;
            
            // Complete the password reset
            bool result = await UserService.CompletePasswordResetAsync(_email, Token, _newPassword, CancellationToken.None);
            
            if (result)
            {
                _isSuccess = true;
            }
            else
            {
                _isExpired = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}