@* all injections need to be at the top of the file or it wont work! *@
@inject IDialogService DialogService
@using AppBlueprint.Infrastructure.Authorization
@using AppBlueprint.UiKit.Components.Authentication
@inject IUserAuthenticationProvider AuthenticationProvider
@inject NavigationManager NavigationManager

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
    <MudSpacer/>

    @* <!-- Search Button --> *@
    <MudButton Class="mr-2" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Search" OnClick="OpenDialogAsync"
               Variant="Variant.Filled"></MudButton>

    <!-- Notifications Menu -->
    <MudMenu Class="mr-2" StartIcon="@Icons.Material.Filled.Notifications" Color="Color.Default"
             Variant="Variant.Filled" IconColor="Color.Primary">
        <MudMenuItem>Notification 1</MudMenuItem>
        <MudMenuItem>Notification 2</MudMenuItem>
        <MudMenuItem>Notification 3</MudMenuItem>
    </MudMenu>

    <!-- Info Menu -->
    <MudMenu Class="mr-2" StartIcon="@Icons.Material.Filled.Info" Color="Color.Default" Variant="Variant.Filled"
             IconColor="Color.Default">
        <MudMenuItem>Documentation</MudMenuItem>
        <MudMenuItem>Support Site</MudMenuItem>
        <MudMenuItem>Contact Us</MudMenuItem>
    </MudMenu>

    <!-- Theme Toggle Button -->
    <MudButton StartIcon="@(_isDarkMode ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.Nightlight)"
               OnClick="ChangeTheme" Color="Color.Inherit" Variant="Variant.Text">
    </MudButton>

    @if (IsAuthenticated)
    {
        <MudMenu StartIcon="@Icons.Material.Filled.Person" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Account"
                Color="Color.Primary" Variant="Variant.Filled" IconColor="Color.Default">
            <MudMenuItem>
                <MudNavLink Href="/account-settings" Icon="@Icons.Material.Filled.Settings">Account Settings
                </MudNavLink>
            </MudMenuItem>
            <MudMenuItem OnClick="HandleLogoutDirectly">
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-2" />
                    Sign Out
                </div>
            </MudMenuItem>
        </MudMenu>
    }
    else
    {
        <MudButton Href="/login" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
    }

    @ChildContent

</MudAppBar>

@code{
    [Parameter] public EventCallback OnToggleDrawer { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    
    [CascadingParameter]
    public required AuthProvider Auth { get; set; }

    private bool _isDarkMode = true; // Default to dark mode
    
    private bool IsAuthenticated => Auth?.IsAuthenticated ?? AuthenticationProvider.IsAuthenticated();

    private void ToggleDrawer()
    {
        if (OnToggleDrawer.HasDelegate)
        {
            // Invoke the parent's method to toggle the Sidebar
            OnToggleDrawer.InvokeAsync();
        }
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        return DialogService.ShowAsync<AppbarSearchDialog>("Search Dialog", options);
    }

    private MudTheme _theme = new();

    private void ChangeTheme()
    {
        _isDarkMode = !_isDarkMode; // Toggle the dark mode state
        Console.WriteLine($"Theme toggled. IsDarkMode: {_isDarkMode}");
    }

    // Handle logout action - DIRECT VERSION - SIMPLIFIED
    private async Task HandleLogoutDirectly()
    {
        Console.WriteLine("========================================");
        Console.WriteLine("[Appbar] LOGOUT BUTTON CLICKED!");
        Console.WriteLine("========================================");
        
        try
        {
            Console.WriteLine("[Appbar] Step 1: Calling AuthenticationProvider.LogoutAsync()...");
            await AuthenticationProvider.LogoutAsync();
            Console.WriteLine("[Appbar] Step 2: LogoutAsync completed - local tokens cleared");
            
            Console.WriteLine("[Appbar] Step 3: Getting Logto logout URL...");
            // Use base URI without trailing slash - this is more commonly accepted
            var postLogoutRedirectUri = NavigationManager.BaseUri.TrimEnd('/');
            Console.WriteLine($"[Appbar] Using post-logout redirect URI: {postLogoutRedirectUri}");
            var logoutUrl = AuthenticationProvider.GetLogoutUrl(postLogoutRedirectUri);
            
            if (!string.IsNullOrEmpty(logoutUrl))
            {
                Console.WriteLine($"[Appbar] Step 4: Redirecting to Logto logout URL: {logoutUrl}");
                NavigationManager.NavigateTo(logoutUrl, forceLoad: true);
            }
            else
            {
                Console.WriteLine("[Appbar] Step 4: No logout URL - redirecting to /login directly");
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
            
            Console.WriteLine("[Appbar] Step 5: Navigation initiated");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[Appbar] ERROR during logout: {ex.Message}");
            Console.Error.WriteLine($"[Appbar] Stack: {ex.StackTrace}");
            
            // Fallback - just navigate to login
            Console.WriteLine("[Appbar] Attempting fallback navigation...");
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        
        Console.WriteLine("[Appbar] HandleLogoutDirectly END");
        Console.WriteLine("========================================");
    }

    // Handle logout action
    private async Task HandleLogoutWithDelay()
    {
        Console.WriteLine("========================================");
        Console.WriteLine("[Appbar] HandleLogoutWithDelay - LOGOUT BUTTON CLICKED");
        Console.WriteLine("[Appbar] Giving menu time to close before logout...");
        Console.WriteLine("========================================");
        
        // Small delay to let the menu close properly
        await Task.Delay(100);
        
        await HandleLogoutDirectly();
    }
    
    private async Task HandleLogout()
    {
        Console.WriteLine("========================================");
        Console.WriteLine("[Appbar] HandleLogout - STARTING LOGOUT PROCESS");
        Console.WriteLine("========================================");
        
        await HandleLogoutDirectly();
        
        Console.WriteLine("[Appbar] HandleLogout - END");
        Console.WriteLine("========================================");
    }
}
