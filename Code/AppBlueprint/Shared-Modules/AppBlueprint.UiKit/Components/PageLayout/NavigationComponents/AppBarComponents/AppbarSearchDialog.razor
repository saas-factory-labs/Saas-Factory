<MudDialog>
    <TitleContent>
        <MudAutocomplete T="string" Label="Search for anything .."
                         SearchFunc="@SearchWithoutDropdown"
                         Immediate="true"
                         ResetValueOnEmptyText="true"
                         CoerceText="false"
                         CoerceValue="@_coerceValue"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         AdornmentColor="Color.Primary"/>
    </TitleContent>
    <DialogContent>
        <MudList T="string">
            <MudListItem T="string">
                <MudCard>
                    <MudCardContent>
                        <MudText>Search result</MudText>
                    </MudCardContent>
                </MudCard>
            </MudListItem>
        </MudList>
    </DialogContent>
    <DialogActions>
        @* <MudButton OnClick="Cancel">Cancel</MudButton> *@
        @* <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton> *@
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialog MudDialog { get; set; }

    private string _search = string.Empty;
    private MudListItem<string>? _selectedItem;
    object _selectedValue = 1;

    private string StringValue { get; set; } = string.Empty;

    public SelectionMode SelectionMode = SelectionMode.MultiSelection;
    private bool _coerceText = false;
    private readonly bool _coerceValue = false;
    // private bool resetValueOnEmptyText = false;

    private async Task<IEnumerable<string>> SearchWithoutDropdown(string searchTerm, CancellationToken token)
    {
        // if (searchTerm == "" || searchTerm is null)
        // {
        //     await InvokeAsync(() =>
        //     {
        //         JiraIssueSearchResults.Clear();
        //         TrelloCardSearchResults.Clear();    
        //         SpotifySongSearchResults.Clear();
        //         YoutubeVideoSearchResults.Clear();
        //         MicrosoftTodoTaskResults.Clear();
        //         
        //         StateHasChanged();
        //     });
        // }
        //
        // if (string.IsNullOrEmpty(searchTerm))
        // {
        //     return new string[0];
        // }        
        //
        // var jiraTask = _algoliaSearchService.FullTextSearchJiraIssues(searchTerm);
        // var trelloTask = _algoliaSearchService.FullTextSearchTrelloCards(searchTerm);
        // var microsoftTodoTask = _algoliaSearchService.FullTextSearchMicrosoftTodoTasks(searchTerm);
        // var spotifyTask = _algoliaSearchService.FullTextSearchSpotifySongs(searchTerm);
        // var youtubeTask = _algoliaSearchService.FullTextSearchYoutubeVideos(searchTerm);
        //
        // try
        // {
        //     await Task.WhenAll(jiraTask, trelloTask, microsoftTodoTask, spotifyTask, youtubeTask);
        //
        //     await InvokeAsync(() =>
        //     {
        //         JiraIssueSearchResults = jiraTask.Result;
        //         TrelloCardSearchResults = trelloTask.Result;
        //         SpotifySongSearchResults = spotifyTask.Result;
        //         YoutubeVideoSearchResults = youtubeTask.Result;
        //         MicrosoftTodoTaskResults = microsoftTodoTask.Result;
        //
        //         StateHasChanged();
        //     });
        // }
        // catch (OperationCanceledException)
        // {
        //     Console.WriteLine("Search operation was canceled.");
        // }
        // catch (Exception ex)
        // {
        //     Console.Error.WriteLine($"Error during search tasks: {ex.Message}");
        // }
        // return no dropdown items so it is a free text search bar instead of a dropdown search bar
        return new string[0];
    }

    private void Submit()
    {
        MudDialog.CloseAsync(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.CloseAsync();
    }

}