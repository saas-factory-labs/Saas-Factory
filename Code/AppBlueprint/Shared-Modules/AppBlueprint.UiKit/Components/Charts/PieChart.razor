<MudPaper Class="pa-4">
    <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels"
              Width="300px" Height="300px"/>
</MudPaper>
<MudPaper Class="pa-4 mt-2 d-flex justify-center">
    <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton @onclick="RandomizeData" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
    <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>
</MudPaper>
<MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    double[] data = { 77 };

    string[] labels =
    {
        "Uranium", "Plutonium", "Thorium", "Caesium", "Technetium", "Promethium",
        "Polonium", "Astatine", "Radon", "Francium", "Radium", "Actinium", "Protactinium",
        "Neptunium", "Americium", "Curium", "Berkelium", "Californium", "Einsteinium", "Mudblaznium"
    };

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (var i = 0; i < new_data.Length; i++)
#pragma warning disable CA5394 // Random.Shared is cryptographically secure and appropriate for demo chart data
            new_data[i] = Random.Shared.NextDouble() * 100;
#pragma warning restore CA5394
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }

    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }

}