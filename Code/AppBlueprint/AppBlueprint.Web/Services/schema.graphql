schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Accounts {
    accountId: Int! # was Int4! which does not work
    additionalMetadata: Varchar!
    createdAt: Timestamptz!
    email: Varchar!
    isActive: Bool!
    passwordHash: Varchar!
    role: Varchar!
    updatedAt: Timestamptz!
}

type AccountsAggExp {
    _count: Int!
    accountId: IntAggExp!
    additionalMetadata: VarcharAggExp!
    createdAt: TimestamptzAggExp!
    email: VarcharAggExp!
    isActive: BoolAggExp!
    passwordHash: VarcharAggExp!
    role: VarcharAggExp!
    updatedAt: TimestamptzAggExp!
}

input AccountsBoolExp {
    _and: [AccountsBoolExp!]
    _not: AccountsBoolExp
    _or: [AccountsBoolExp!]
    accountId: IntBoolExp
    additionalMetadata: VarcharBoolExp
    createdAt: TimestamptzBoolExp
    email: VarcharBoolExp
    isActive: BoolBoolExp
    passwordHash: VarcharBoolExp
    role: VarcharBoolExp
    updatedAt: TimestamptzBoolExp
}

input AccountsFilterInput {
    limit: Int
    offset: Int
    order_by: [AccountsOrderBy!]
    where: AccountsBoolExp
}

input AccountsOrderBy {
    accountId: OrderBy
    additionalMetadata: OrderBy
    createdAt: OrderBy
    email: OrderBy
    isActive: OrderBy
    passwordHash: OrderBy
    role: OrderBy
    updatedAt: OrderBy
}

type Addresses {
    cityEntity: CityEntity
    cityId: Int!
    contactPerson: ContactPersons
    contactPersonEntityId: Int
    countryEntity: CountryEntity
    countryId: Int!
    customer: Customers
    customerId: Int
    floor: Varchar!
    id: Int!
    isPrimary: Bool!
    latitude: Varchar
    longtitude: Varchar
    postalCode: Varchar!
    state: Varchar!
    streetEntity: StreetEntity
    streetId: Int!
    streetNumber: Varchar!
    tenant: Tenants
    tenantId: Int
    unitNumber: Varchar!
    user: Users
    userEntityId: Int
}

type AddressesAggExp {
    _count: Int!
    cityId: IntAggExp!
    contactPersonEntityId: IntAggExp!
    countryId: IntAggExp!
    customerId: IntAggExp!
    floor: VarcharAggExp!
    id: IntAggExp!
    isPrimary: BoolAggExp!
    latitude: VarcharAggExp!
    longtitude: VarcharAggExp!
    postalCode: VarcharAggExp!
    state: VarcharAggExp!
    streetId: IntAggExp!
    streetNumber: VarcharAggExp!
    tenantId: IntAggExp!
    unitNumber: VarcharAggExp!
    userEntityId: IntAggExp!
}

input AddressesBoolExp {
    _and: [AddressesBoolExp!]
    _not: AddressesBoolExp
    _or: [AddressesBoolExp!]
    cityEntity: CityEntityBoolExp
    cityId: IntBoolExp
    contactPerson: ContactPersonsBoolExp
    contactPersonEntityId: IntBoolExp
    countryEntity: CountryEntityBoolExp
    countryId: IntBoolExp
    customer: CustomersBoolExp
    customerId: IntBoolExp
    floor: VarcharBoolExp
    id: IntBoolExp
    isPrimary: BoolBoolExp
    latitude: VarcharBoolExp
    longtitude: VarcharBoolExp
    postalCode: VarcharBoolExp
    state: VarcharBoolExp
    streetEntity: StreetEntityBoolExp
    streetId: IntBoolExp
    streetNumber: VarcharBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
    unitNumber: VarcharBoolExp
    user: UsersBoolExp
    userEntityId: IntBoolExp
}

input AddressesFilterInput {
    limit: Int
    offset: Int
    order_by: [AddressesOrderBy!]
    where: AddressesBoolExp
}

input AddressesOrderBy {
    cityEntity: CityEntityOrderBy
    cityId: OrderBy
    contactPerson: ContactPersonsOrderBy
    contactPersonEntityId: OrderBy
    countryEntity: CountryEntityOrderBy
    countryId: OrderBy
    customer: CustomersOrderBy
    customerId: OrderBy
    floor: OrderBy
    id: OrderBy
    isPrimary: OrderBy
    latitude: OrderBy
    longtitude: OrderBy
    postalCode: OrderBy
    state: OrderBy
    streetEntity: StreetEntityOrderBy
    streetId: OrderBy
    streetNumber: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
    unitNumber: OrderBy
    user: UsersOrderBy
    userEntityId: OrderBy
}

type AuditLogs {
    action: Varchar!
    category: Varchar!
    id: Int!
    modifiedAt: Timestamptz!
    modifiedBy: Varchar!
    newValue: Varchar!
    oldValue: Varchar!
    tenant: Tenants
    tenantId: Int!
    user: Users
    userId: Int!
}

type AuditLogsAggExp {
    _count: Int!
    action: VarcharAggExp!
    category: VarcharAggExp!
    id: IntAggExp!
    modifiedAt: TimestamptzAggExp!
    modifiedBy: VarcharAggExp!
    newValue: VarcharAggExp!
    oldValue: VarcharAggExp!
    tenantId: IntAggExp!
    userId: IntAggExp!
}

input AuditLogsBoolExp {
    _and: [AuditLogsBoolExp!]
    _not: AuditLogsBoolExp
    _or: [AuditLogsBoolExp!]
    action: VarcharBoolExp
    category: VarcharBoolExp
    id: IntBoolExp
    modifiedAt: TimestamptzBoolExp
    modifiedBy: VarcharBoolExp
    newValue: VarcharBoolExp
    oldValue: VarcharBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input AuditLogsFilterInput {
    limit: Int
    offset: Int
    order_by: [AuditLogsOrderBy!]
    where: AuditLogsBoolExp
}

input AuditLogsOrderBy {
    action: OrderBy
    category: OrderBy
    id: OrderBy
    modifiedAt: OrderBy
    modifiedBy: OrderBy
    newValue: OrderBy
    oldValue: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

scalar AuthAalLevel

type AuthAalLevelAggExp {
    _count: Int!
    _count_distinct: Int!
    max: AuthAalLevel
    min: AuthAalLevel
}

input AuthAalLevelBoolExp {
    _eq: AuthAalLevel
    _gt: AuthAalLevel
    _gte: AuthAalLevel
    _in: [AuthAalLevel!]
    _is_null: Boolean
    _lt: AuthAalLevel
    _lte: AuthAalLevel
    _neq: AuthAalLevel
}

"Auth: Audit trail for user actions."
type AuthAuditLogEntries {
    createdAt: Timestamptz
    id: Uuid!
    instanceId: Uuid
    ipAddress: Varchar!
    payload: Json
}

type AuthAuditLogEntriesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    id: UuidAggExp!
    instanceId: UuidAggExp!
    ipAddress: VarcharAggExp!
    payload: JsonAggExp!
}

input AuthAuditLogEntriesBoolExp {
    _and: [AuthAuditLogEntriesBoolExp!]
    _not: AuthAuditLogEntriesBoolExp
    _or: [AuthAuditLogEntriesBoolExp!]
    createdAt: TimestamptzBoolExp
    id: UuidBoolExp
    instanceId: UuidBoolExp
    ipAddress: VarcharBoolExp
    payload: JsonBoolExp
}

input AuthAuditLogEntriesFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthAuditLogEntriesOrderBy!]
    where: AuthAuditLogEntriesBoolExp
}

input AuthAuditLogEntriesOrderBy {
    createdAt: OrderBy
    id: OrderBy
    instanceId: OrderBy
    ipAddress: OrderBy
    payload: OrderBy
}

scalar AuthCodeChallengeMethod

type AuthCodeChallengeMethodAggExp {
    _count: Int!
    _count_distinct: Int!
    max: AuthCodeChallengeMethod
    min: AuthCodeChallengeMethod
}

input AuthCodeChallengeMethodBoolExp {
    _eq: AuthCodeChallengeMethod
    _gt: AuthCodeChallengeMethod
    _gte: AuthCodeChallengeMethod
    _in: [AuthCodeChallengeMethod!]
    _is_null: Boolean
    _lt: AuthCodeChallengeMethod
    _lte: AuthCodeChallengeMethod
    _neq: AuthCodeChallengeMethod
}

scalar AuthFactorStatus

type AuthFactorStatusAggExp {
    _count: Int!
    _count_distinct: Int!
    max: AuthFactorStatus
    min: AuthFactorStatus
}

input AuthFactorStatusBoolExp {
    _eq: AuthFactorStatus
    _gt: AuthFactorStatus
    _gte: AuthFactorStatus
    _in: [AuthFactorStatus!]
    _is_null: Boolean
    _lt: AuthFactorStatus
    _lte: AuthFactorStatus
    _neq: AuthFactorStatus
}

scalar AuthFactorType

type AuthFactorTypeAggExp {
    _count: Int!
    _count_distinct: Int!
    max: AuthFactorType
    min: AuthFactorType
}

input AuthFactorTypeBoolExp {
    _eq: AuthFactorType
    _gt: AuthFactorType
    _gte: AuthFactorType
    _in: [AuthFactorType!]
    _is_null: Boolean
    _lt: AuthFactorType
    _lte: AuthFactorType
    _neq: AuthFactorType
}

"stores metadata for pkce logins"
type AuthFlowState {
    authCode: Text!
    authCodeIssuedAt: Timestamptz
    authSamlRelayStates(limit: Int offset: Int order_by: [AuthSamlRelayStatesOrderBy!] where: AuthSamlRelayStatesBoolExp): [AuthSamlRelayStates!]
    authSamlRelayStatesAggregate(filter_input: AuthSamlRelayStatesFilterInput): AuthSamlRelayStatesAggExp!
    authenticationMethod: Text!
    codeChallenge: Text!
    codeChallengeMethod: AuthCodeChallengeMethod!
    createdAt: Timestamptz
    id: Uuid!
    providerAccessToken: Text
    providerRefreshToken: Text
    providerType: Text!
    updatedAt: Timestamptz
    userId: Uuid
}

type AuthFlowStateAggExp {
    _count: Int!
    authCode: TextAggExp!
    authCodeIssuedAt: TimestamptzAggExp!
    authenticationMethod: TextAggExp!
    codeChallenge: TextAggExp!
    codeChallengeMethod: AuthCodeChallengeMethodAggExp!
    createdAt: TimestamptzAggExp!
    id: UuidAggExp!
    providerAccessToken: TextAggExp!
    providerRefreshToken: TextAggExp!
    providerType: TextAggExp!
    updatedAt: TimestamptzAggExp!
    userId: UuidAggExp!
}

input AuthFlowStateBoolExp {
    _and: [AuthFlowStateBoolExp!]
    _not: AuthFlowStateBoolExp
    _or: [AuthFlowStateBoolExp!]
    authCode: TextBoolExp
    authCodeIssuedAt: TimestamptzBoolExp
    authSamlRelayStates: AuthSamlRelayStatesBoolExp
    authenticationMethod: TextBoolExp
    codeChallenge: TextBoolExp
    codeChallengeMethod: AuthCodeChallengeMethodBoolExp
    createdAt: TimestamptzBoolExp
    id: UuidBoolExp
    providerAccessToken: TextBoolExp
    providerRefreshToken: TextBoolExp
    providerType: TextBoolExp
    updatedAt: TimestamptzBoolExp
    userId: UuidBoolExp
}

input AuthFlowStateFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthFlowStateOrderBy!]
    where: AuthFlowStateBoolExp
}

input AuthFlowStateOrderBy {
    authCode: OrderBy
    authCodeIssuedAt: OrderBy
    authenticationMethod: OrderBy
    codeChallenge: OrderBy
    codeChallengeMethod: OrderBy
    createdAt: OrderBy
    id: OrderBy
    providerAccessToken: OrderBy
    providerRefreshToken: OrderBy
    providerType: OrderBy
    updatedAt: OrderBy
    userId: OrderBy
}

"Auth: Stores identities associated to a user."
type AuthIdentities {
    authUser: AuthUsers
    createdAt: Timestamptz
    "Auth: Email is a generated column that references the optional email property in the identity_data"
    email: Text
    id: Uuid!
    identityData: Jsonb!
    lastSignInAt: Timestamptz
    provider: Text!
    providerId: Text!
    updatedAt: Timestamptz
    userId: Uuid!
}

type AuthIdentitiesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    email: TextAggExp!
    id: UuidAggExp!
    identityData: JsonbAggExp!
    lastSignInAt: TimestamptzAggExp!
    provider: TextAggExp!
    providerId: TextAggExp!
    updatedAt: TimestamptzAggExp!
    userId: UuidAggExp!
}

input AuthIdentitiesBoolExp {
    _and: [AuthIdentitiesBoolExp!]
    _not: AuthIdentitiesBoolExp
    _or: [AuthIdentitiesBoolExp!]
    authUser: AuthUsersBoolExp
    createdAt: TimestamptzBoolExp
    email: TextBoolExp
    id: UuidBoolExp
    identityData: JsonbBoolExp
    lastSignInAt: TimestamptzBoolExp
    provider: TextBoolExp
    providerId: TextBoolExp
    updatedAt: TimestamptzBoolExp
    userId: UuidBoolExp
}

input AuthIdentitiesFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthIdentitiesOrderBy!]
    where: AuthIdentitiesBoolExp
}

input AuthIdentitiesOrderBy {
    authUser: AuthUsersOrderBy
    createdAt: OrderBy
    email: OrderBy
    id: OrderBy
    identityData: OrderBy
    lastSignInAt: OrderBy
    provider: OrderBy
    providerId: OrderBy
    updatedAt: OrderBy
    userId: OrderBy
}

"Auth: Manages users across multiple sites."
type AuthInstances {
    createdAt: Timestamptz
    id: Uuid!
    rawBaseConfig: Text
    updatedAt: Timestamptz
    uuid: Uuid
}

type AuthInstancesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    id: UuidAggExp!
    rawBaseConfig: TextAggExp!
    updatedAt: TimestamptzAggExp!
    uuid: UuidAggExp!
}

input AuthInstancesBoolExp {
    _and: [AuthInstancesBoolExp!]
    _not: AuthInstancesBoolExp
    _or: [AuthInstancesBoolExp!]
    createdAt: TimestamptzBoolExp
    id: UuidBoolExp
    rawBaseConfig: TextBoolExp
    updatedAt: TimestamptzBoolExp
    uuid: UuidBoolExp
}

input AuthInstancesFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthInstancesOrderBy!]
    where: AuthInstancesBoolExp
}

input AuthInstancesOrderBy {
    createdAt: OrderBy
    id: OrderBy
    rawBaseConfig: OrderBy
    updatedAt: OrderBy
    uuid: OrderBy
}

"auth: stores authenticator method reference claims for multi factor authentication"
type AuthMfaAmrClaims {
    authSession: AuthSessions
    authenticationMethod: Text!
    createdAt: Timestamptz!
    id: Uuid!
    sessionId: Uuid!
    updatedAt: Timestamptz!
}

type AuthMfaAmrClaimsAggExp {
    _count: Int!
    authenticationMethod: TextAggExp!
    createdAt: TimestamptzAggExp!
    id: UuidAggExp!
    sessionId: UuidAggExp!
    updatedAt: TimestamptzAggExp!
}

input AuthMfaAmrClaimsBoolExp {
    _and: [AuthMfaAmrClaimsBoolExp!]
    _not: AuthMfaAmrClaimsBoolExp
    _or: [AuthMfaAmrClaimsBoolExp!]
    authSession: AuthSessionsBoolExp
    authenticationMethod: TextBoolExp
    createdAt: TimestamptzBoolExp
    id: UuidBoolExp
    sessionId: UuidBoolExp
    updatedAt: TimestamptzBoolExp
}

input AuthMfaAmrClaimsFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthMfaAmrClaimsOrderBy!]
    where: AuthMfaAmrClaimsBoolExp
}

input AuthMfaAmrClaimsOrderBy {
    authSession: AuthSessionsOrderBy
    authenticationMethod: OrderBy
    createdAt: OrderBy
    id: OrderBy
    sessionId: OrderBy
    updatedAt: OrderBy
}

"auth: stores metadata about challenge requests made"
type AuthMfaChallenges {
    authMfaFactor: AuthMfaFactors
    createdAt: Timestamptz!
    factorId: Uuid!
    id: Uuid!
    ipAddress: Inet!
    otpCode: Text
    verifiedAt: Timestamptz
    webAuthnSessionData: Jsonb
}

type AuthMfaChallengesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    factorId: UuidAggExp!
    id: UuidAggExp!
    ipAddress: InetAggExp!
    otpCode: TextAggExp!
    verifiedAt: TimestamptzAggExp!
    webAuthnSessionData: JsonbAggExp!
}

input AuthMfaChallengesBoolExp {
    _and: [AuthMfaChallengesBoolExp!]
    _not: AuthMfaChallengesBoolExp
    _or: [AuthMfaChallengesBoolExp!]
    authMfaFactor: AuthMfaFactorsBoolExp
    createdAt: TimestamptzBoolExp
    factorId: UuidBoolExp
    id: UuidBoolExp
    ipAddress: InetBoolExp
    otpCode: TextBoolExp
    verifiedAt: TimestamptzBoolExp
    webAuthnSessionData: JsonbBoolExp
}

input AuthMfaChallengesFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthMfaChallengesOrderBy!]
    where: AuthMfaChallengesBoolExp
}

input AuthMfaChallengesOrderBy {
    authMfaFactor: AuthMfaFactorsOrderBy
    createdAt: OrderBy
    factorId: OrderBy
    id: OrderBy
    ipAddress: OrderBy
    otpCode: OrderBy
    verifiedAt: OrderBy
    webAuthnSessionData: OrderBy
}

"auth: stores metadata about factors"
type AuthMfaFactors {
    authMfaChallenges(limit: Int offset: Int order_by: [AuthMfaChallengesOrderBy!] where: AuthMfaChallengesBoolExp): [AuthMfaChallenges!]
    authMfaChallengesAggregate(filter_input: AuthMfaChallengesFilterInput): AuthMfaChallengesAggExp!
    authUser: AuthUsers
    createdAt: Timestamptz!
    factorType: AuthFactorType!
    friendlyName: Text
    id: Uuid!
    lastChallengedAt: Timestamptz
    phone: Text
    secret: Text
    status: AuthFactorStatus!
    updatedAt: Timestamptz!
    userId: Uuid!
    webAuthnAaguid: Uuid
    webAuthnCredential: Jsonb
}

type AuthMfaFactorsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    factorType: AuthFactorTypeAggExp!
    friendlyName: TextAggExp!
    id: UuidAggExp!
    lastChallengedAt: TimestamptzAggExp!
    phone: TextAggExp!
    secret: TextAggExp!
    status: AuthFactorStatusAggExp!
    updatedAt: TimestamptzAggExp!
    userId: UuidAggExp!
    webAuthnAaguid: UuidAggExp!
    webAuthnCredential: JsonbAggExp!
}

input AuthMfaFactorsBoolExp {
    _and: [AuthMfaFactorsBoolExp!]
    _not: AuthMfaFactorsBoolExp
    _or: [AuthMfaFactorsBoolExp!]
    authMfaChallenges: AuthMfaChallengesBoolExp
    authUser: AuthUsersBoolExp
    createdAt: TimestamptzBoolExp
    factorType: AuthFactorTypeBoolExp
    friendlyName: TextBoolExp
    id: UuidBoolExp
    lastChallengedAt: TimestamptzBoolExp
    phone: TextBoolExp
    secret: TextBoolExp
    status: AuthFactorStatusBoolExp
    updatedAt: TimestamptzBoolExp
    userId: UuidBoolExp
    webAuthnAaguid: UuidBoolExp
    webAuthnCredential: JsonbBoolExp
}

input AuthMfaFactorsFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthMfaFactorsOrderBy!]
    where: AuthMfaFactorsBoolExp
}

input AuthMfaFactorsOrderBy {
    authUser: AuthUsersOrderBy
    createdAt: OrderBy
    factorType: OrderBy
    friendlyName: OrderBy
    id: OrderBy
    lastChallengedAt: OrderBy
    phone: OrderBy
    secret: OrderBy
    status: OrderBy
    updatedAt: OrderBy
    userId: OrderBy
    webAuthnAaguid: OrderBy
    webAuthnCredential: OrderBy
}

scalar AuthOneTimeTokenType

type AuthOneTimeTokenTypeAggExp {
    _count: Int!
    _count_distinct: Int!
    max: AuthOneTimeTokenType
    min: AuthOneTimeTokenType
}

input AuthOneTimeTokenTypeBoolExp {
    _eq: AuthOneTimeTokenType
    _gt: AuthOneTimeTokenType
    _gte: AuthOneTimeTokenType
    _in: [AuthOneTimeTokenType!]
    _is_null: Boolean
    _lt: AuthOneTimeTokenType
    _lte: AuthOneTimeTokenType
    _neq: AuthOneTimeTokenType
}

type AuthOneTimeTokens {
    authUser: AuthUsers
    createdAt: Timestamp!
    id: Uuid!
    relatesTo: Text!
    tokenHash: Text!
    tokenType: AuthOneTimeTokenType!
    updatedAt: Timestamp!
    userId: Uuid!
}

type AuthOneTimeTokensAggExp {
    _count: Int!
    createdAt: TimestampAggExp!
    id: UuidAggExp!
    relatesTo: TextAggExp!
    tokenHash: TextAggExp!
    tokenType: AuthOneTimeTokenTypeAggExp!
    updatedAt: TimestampAggExp!
    userId: UuidAggExp!
}

input AuthOneTimeTokensBoolExp {
    _and: [AuthOneTimeTokensBoolExp!]
    _not: AuthOneTimeTokensBoolExp
    _or: [AuthOneTimeTokensBoolExp!]
    authUser: AuthUsersBoolExp
    createdAt: TimestampBoolExp
    id: UuidBoolExp
    relatesTo: TextBoolExp
    tokenHash: TextBoolExp
    tokenType: AuthOneTimeTokenTypeBoolExp
    updatedAt: TimestampBoolExp
    userId: UuidBoolExp
}

input AuthOneTimeTokensFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthOneTimeTokensOrderBy!]
    where: AuthOneTimeTokensBoolExp
}

input AuthOneTimeTokensOrderBy {
    authUser: AuthUsersOrderBy
    createdAt: OrderBy
    id: OrderBy
    relatesTo: OrderBy
    tokenHash: OrderBy
    tokenType: OrderBy
    updatedAt: OrderBy
    userId: OrderBy
}

"Auth: Store of tokens used to refresh JWT tokens once they expire."
type AuthRefreshTokens {
    authSession: AuthSessions
    createdAt: Timestamptz
    id: Int8!
    instanceId: Uuid
    parent: Varchar
    revoked: Bool
    sessionId: Uuid
    token: Varchar
    updatedAt: Timestamptz
    userId: Varchar
}

type AuthRefreshTokensAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    id: Int8AggExp!
    instanceId: UuidAggExp!
    parent: VarcharAggExp!
    revoked: BoolAggExp!
    sessionId: UuidAggExp!
    token: VarcharAggExp!
    updatedAt: TimestamptzAggExp!
    userId: VarcharAggExp!
}

input AuthRefreshTokensBoolExp {
    _and: [AuthRefreshTokensBoolExp!]
    _not: AuthRefreshTokensBoolExp
    _or: [AuthRefreshTokensBoolExp!]
    authSession: AuthSessionsBoolExp
    createdAt: TimestamptzBoolExp
    id: Int8BoolExp
    instanceId: UuidBoolExp
    parent: VarcharBoolExp
    revoked: BoolBoolExp
    sessionId: UuidBoolExp
    token: VarcharBoolExp
    updatedAt: TimestamptzBoolExp
    userId: VarcharBoolExp
}

input AuthRefreshTokensFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthRefreshTokensOrderBy!]
    where: AuthRefreshTokensBoolExp
}

input AuthRefreshTokensOrderBy {
    authSession: AuthSessionsOrderBy
    createdAt: OrderBy
    id: OrderBy
    instanceId: OrderBy
    parent: OrderBy
    revoked: OrderBy
    sessionId: OrderBy
    token: OrderBy
    updatedAt: OrderBy
    userId: OrderBy
}

"Auth: Manages SAML Identity Provider connections."
type AuthSamlProviders {
    attributeMapping: Jsonb
    authSsoProvider: AuthSsoProviders
    createdAt: Timestamptz
    entityId: Text!
    id: Uuid!
    metadataUrl: Text
    metadataXml: Text!
    nameIdFormat: Text
    ssoProviderId: Uuid!
    updatedAt: Timestamptz
}

type AuthSamlProvidersAggExp {
    _count: Int!
    attributeMapping: JsonbAggExp!
    createdAt: TimestamptzAggExp!
    entityId: TextAggExp!
    id: UuidAggExp!
    metadataUrl: TextAggExp!
    metadataXml: TextAggExp!
    nameIdFormat: TextAggExp!
    ssoProviderId: UuidAggExp!
    updatedAt: TimestamptzAggExp!
}

input AuthSamlProvidersBoolExp {
    _and: [AuthSamlProvidersBoolExp!]
    _not: AuthSamlProvidersBoolExp
    _or: [AuthSamlProvidersBoolExp!]
    attributeMapping: JsonbBoolExp
    authSsoProvider: AuthSsoProvidersBoolExp
    createdAt: TimestamptzBoolExp
    entityId: TextBoolExp
    id: UuidBoolExp
    metadataUrl: TextBoolExp
    metadataXml: TextBoolExp
    nameIdFormat: TextBoolExp
    ssoProviderId: UuidBoolExp
    updatedAt: TimestamptzBoolExp
}

input AuthSamlProvidersFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthSamlProvidersOrderBy!]
    where: AuthSamlProvidersBoolExp
}

input AuthSamlProvidersOrderBy {
    attributeMapping: OrderBy
    authSsoProvider: AuthSsoProvidersOrderBy
    createdAt: OrderBy
    entityId: OrderBy
    id: OrderBy
    metadataUrl: OrderBy
    metadataXml: OrderBy
    nameIdFormat: OrderBy
    ssoProviderId: OrderBy
    updatedAt: OrderBy
}

"Auth: Contains SAML Relay State information for each Service Provider initiated login."
type AuthSamlRelayStates {
    authFlowState: AuthFlowState
    authSsoProvider: AuthSsoProviders
    createdAt: Timestamptz
    flowStateId: Uuid
    forEmail: Text
    id: Uuid!
    redirectTo: Text
    requestId: Text!
    ssoProviderId: Uuid!
    updatedAt: Timestamptz
}

type AuthSamlRelayStatesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    flowStateId: UuidAggExp!
    forEmail: TextAggExp!
    id: UuidAggExp!
    redirectTo: TextAggExp!
    requestId: TextAggExp!
    ssoProviderId: UuidAggExp!
    updatedAt: TimestamptzAggExp!
}

input AuthSamlRelayStatesBoolExp {
    _and: [AuthSamlRelayStatesBoolExp!]
    _not: AuthSamlRelayStatesBoolExp
    _or: [AuthSamlRelayStatesBoolExp!]
    authFlowState: AuthFlowStateBoolExp
    authSsoProvider: AuthSsoProvidersBoolExp
    createdAt: TimestamptzBoolExp
    flowStateId: UuidBoolExp
    forEmail: TextBoolExp
    id: UuidBoolExp
    redirectTo: TextBoolExp
    requestId: TextBoolExp
    ssoProviderId: UuidBoolExp
    updatedAt: TimestamptzBoolExp
}

input AuthSamlRelayStatesFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthSamlRelayStatesOrderBy!]
    where: AuthSamlRelayStatesBoolExp
}

input AuthSamlRelayStatesOrderBy {
    authFlowState: AuthFlowStateOrderBy
    authSsoProvider: AuthSsoProvidersOrderBy
    createdAt: OrderBy
    flowStateId: OrderBy
    forEmail: OrderBy
    id: OrderBy
    redirectTo: OrderBy
    requestId: OrderBy
    ssoProviderId: OrderBy
    updatedAt: OrderBy
}

"Auth: Manages updates to the auth system."
type AuthSchemaMigrations {
    version: Varchar!
}

type AuthSchemaMigrationsAggExp {
    _count: Int!
    version: VarcharAggExp!
}

input AuthSchemaMigrationsBoolExp {
    _and: [AuthSchemaMigrationsBoolExp!]
    _not: AuthSchemaMigrationsBoolExp
    _or: [AuthSchemaMigrationsBoolExp!]
    version: VarcharBoolExp
}

input AuthSchemaMigrationsFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthSchemaMigrationsOrderBy!]
    where: AuthSchemaMigrationsBoolExp
}

input AuthSchemaMigrationsOrderBy {
    version: OrderBy
}

"Auth: Stores session data associated to a user."
type AuthSessions {
    aal: AuthAalLevel
    authMfaAmrClaims(limit: Int offset: Int order_by: [AuthMfaAmrClaimsOrderBy!] where: AuthMfaAmrClaimsBoolExp): [AuthMfaAmrClaims!]
    authMfaAmrClaimsAggregate(filter_input: AuthMfaAmrClaimsFilterInput): AuthMfaAmrClaimsAggExp!
    authRefreshTokens(limit: Int offset: Int order_by: [AuthRefreshTokensOrderBy!] where: AuthRefreshTokensBoolExp): [AuthRefreshTokens!]
    authRefreshTokensAggregate(filter_input: AuthRefreshTokensFilterInput): AuthRefreshTokensAggExp!
    authUser: AuthUsers
    createdAt: Timestamptz
    factorId: Uuid
    id: Uuid!
    ip: Inet
    "Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired."
    notAfter: Timestamptz
    refreshedAt: Timestamp
    tag: Text
    updatedAt: Timestamptz
    userAgent: Text
    userId: Uuid!
}

type AuthSessionsAggExp {
    _count: Int!
    aal: AuthAalLevelAggExp!
    createdAt: TimestamptzAggExp!
    factorId: UuidAggExp!
    id: UuidAggExp!
    ip: InetAggExp!
    notAfter: TimestamptzAggExp!
    refreshedAt: TimestampAggExp!
    tag: TextAggExp!
    updatedAt: TimestamptzAggExp!
    userAgent: TextAggExp!
    userId: UuidAggExp!
}

input AuthSessionsBoolExp {
    _and: [AuthSessionsBoolExp!]
    _not: AuthSessionsBoolExp
    _or: [AuthSessionsBoolExp!]
    aal: AuthAalLevelBoolExp
    authMfaAmrClaims: AuthMfaAmrClaimsBoolExp
    authRefreshTokens: AuthRefreshTokensBoolExp
    authUser: AuthUsersBoolExp
    createdAt: TimestamptzBoolExp
    factorId: UuidBoolExp
    id: UuidBoolExp
    ip: InetBoolExp
    notAfter: TimestamptzBoolExp
    refreshedAt: TimestampBoolExp
    tag: TextBoolExp
    updatedAt: TimestamptzBoolExp
    userAgent: TextBoolExp
    userId: UuidBoolExp
}

input AuthSessionsFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthSessionsOrderBy!]
    where: AuthSessionsBoolExp
}

input AuthSessionsOrderBy {
    aal: OrderBy
    authUser: AuthUsersOrderBy
    createdAt: OrderBy
    factorId: OrderBy
    id: OrderBy
    ip: OrderBy
    notAfter: OrderBy
    refreshedAt: OrderBy
    tag: OrderBy
    updatedAt: OrderBy
    userAgent: OrderBy
    userId: OrderBy
}

"Auth: Manages SSO email address domain mapping to an SSO Identity Provider."
type AuthSsoDomains {
    authSsoProvider: AuthSsoProviders
    createdAt: Timestamptz
    domain: Text!
    id: Uuid!
    ssoProviderId: Uuid!
    updatedAt: Timestamptz
}

type AuthSsoDomainsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    domain: TextAggExp!
    id: UuidAggExp!
    ssoProviderId: UuidAggExp!
    updatedAt: TimestamptzAggExp!
}

input AuthSsoDomainsBoolExp {
    _and: [AuthSsoDomainsBoolExp!]
    _not: AuthSsoDomainsBoolExp
    _or: [AuthSsoDomainsBoolExp!]
    authSsoProvider: AuthSsoProvidersBoolExp
    createdAt: TimestamptzBoolExp
    domain: TextBoolExp
    id: UuidBoolExp
    ssoProviderId: UuidBoolExp
    updatedAt: TimestamptzBoolExp
}

input AuthSsoDomainsFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthSsoDomainsOrderBy!]
    where: AuthSsoDomainsBoolExp
}

input AuthSsoDomainsOrderBy {
    authSsoProvider: AuthSsoProvidersOrderBy
    createdAt: OrderBy
    domain: OrderBy
    id: OrderBy
    ssoProviderId: OrderBy
    updatedAt: OrderBy
}

"Auth: Manages SSO identity provider information; see saml_providers for SAML."
type AuthSsoProviders {
    authSamlProviders(limit: Int offset: Int order_by: [AuthSamlProvidersOrderBy!] where: AuthSamlProvidersBoolExp): [AuthSamlProviders!]
    authSamlProvidersAggregate(filter_input: AuthSamlProvidersFilterInput): AuthSamlProvidersAggExp!
    authSamlRelayStates(limit: Int offset: Int order_by: [AuthSamlRelayStatesOrderBy!] where: AuthSamlRelayStatesBoolExp): [AuthSamlRelayStates!]
    authSamlRelayStatesAggregate(filter_input: AuthSamlRelayStatesFilterInput): AuthSamlRelayStatesAggExp!
    authSsoDomains(limit: Int offset: Int order_by: [AuthSsoDomainsOrderBy!] where: AuthSsoDomainsBoolExp): [AuthSsoDomains!]
    authSsoDomainsAggregate(filter_input: AuthSsoDomainsFilterInput): AuthSsoDomainsAggExp!
    createdAt: Timestamptz
    id: Uuid!
    "Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code."
    resourceId: Text
    updatedAt: Timestamptz
}

type AuthSsoProvidersAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    id: UuidAggExp!
    resourceId: TextAggExp!
    updatedAt: TimestamptzAggExp!
}

input AuthSsoProvidersBoolExp {
    _and: [AuthSsoProvidersBoolExp!]
    _not: AuthSsoProvidersBoolExp
    _or: [AuthSsoProvidersBoolExp!]
    authSamlProviders: AuthSamlProvidersBoolExp
    authSamlRelayStates: AuthSamlRelayStatesBoolExp
    authSsoDomains: AuthSsoDomainsBoolExp
    createdAt: TimestamptzBoolExp
    id: UuidBoolExp
    resourceId: TextBoolExp
    updatedAt: TimestamptzBoolExp
}

input AuthSsoProvidersFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthSsoProvidersOrderBy!]
    where: AuthSsoProvidersBoolExp
}

input AuthSsoProvidersOrderBy {
    createdAt: OrderBy
    id: OrderBy
    resourceId: OrderBy
    updatedAt: OrderBy
}

"Auth: Stores user login data within a secure schema."
type AuthUsers {
    aud: Varchar
    authIdentities(limit: Int offset: Int order_by: [AuthIdentitiesOrderBy!] where: AuthIdentitiesBoolExp): [AuthIdentities!]
    authIdentitiesAggregate(filter_input: AuthIdentitiesFilterInput): AuthIdentitiesAggExp!
    authMfaFactors(limit: Int offset: Int order_by: [AuthMfaFactorsOrderBy!] where: AuthMfaFactorsBoolExp): [AuthMfaFactors!]
    authMfaFactorsAggregate(filter_input: AuthMfaFactorsFilterInput): AuthMfaFactorsAggExp!
    authOneTimeTokens(limit: Int offset: Int order_by: [AuthOneTimeTokensOrderBy!] where: AuthOneTimeTokensBoolExp): [AuthOneTimeTokens!]
    authOneTimeTokensAggregate(filter_input: AuthOneTimeTokensFilterInput): AuthOneTimeTokensAggExp!
    authSessions(limit: Int offset: Int order_by: [AuthSessionsOrderBy!] where: AuthSessionsBoolExp): [AuthSessions!]
    authSessionsAggregate(filter_input: AuthSessionsFilterInput): AuthSessionsAggExp!
    bannedUntil: Timestamptz
    confirmationSentAt: Timestamptz
    confirmationToken: Varchar
    confirmedAt: Timestamptz
    createdAt: Timestamptz
    deletedAt: Timestamptz
    email: Varchar
    emailChange: Varchar
    emailChangeConfirmStatus: Int2
    emailChangeSentAt: Timestamptz
    emailChangeTokenCurrent: Varchar
    emailChangeTokenNew: Varchar
    emailConfirmedAt: Timestamptz
    encryptedPassword: Varchar
    id: Uuid!
    instanceId: Uuid
    invitedAt: Timestamptz
    isAnonymous: Bool!
    "Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails."
    isSsoUser: Bool!
    isSuperAdmin: Bool
    lastSignInAt: Timestamptz
    phone: Text
    phoneChange: Text
    phoneChangeSentAt: Timestamptz
    phoneChangeToken: Varchar
    phoneConfirmedAt: Timestamptz
    rawAppMetaData: Jsonb
    rawUserMetaData: Jsonb
    reauthenticationSentAt: Timestamptz
    reauthenticationToken: Varchar
    recoverySentAt: Timestamptz
    recoveryToken: Varchar
    role: Varchar
    updatedAt: Timestamptz
}

type AuthUsersAggExp {
    _count: Int!
    aud: VarcharAggExp!
    bannedUntil: TimestamptzAggExp!
    confirmationSentAt: TimestamptzAggExp!
    confirmationToken: VarcharAggExp!
    confirmedAt: TimestamptzAggExp!
    createdAt: TimestamptzAggExp!
    deletedAt: TimestamptzAggExp!
    email: VarcharAggExp!
    emailChange: VarcharAggExp!
    emailChangeConfirmStatus: Int2AggExp!
    emailChangeSentAt: TimestamptzAggExp!
    emailChangeTokenCurrent: VarcharAggExp!
    emailChangeTokenNew: VarcharAggExp!
    emailConfirmedAt: TimestamptzAggExp!
    encryptedPassword: VarcharAggExp!
    id: UuidAggExp!
    instanceId: UuidAggExp!
    invitedAt: TimestamptzAggExp!
    isAnonymous: BoolAggExp!
    isSsoUser: BoolAggExp!
    isSuperAdmin: BoolAggExp!
    lastSignInAt: TimestamptzAggExp!
    phone: TextAggExp!
    phoneChange: TextAggExp!
    phoneChangeSentAt: TimestamptzAggExp!
    phoneChangeToken: VarcharAggExp!
    phoneConfirmedAt: TimestamptzAggExp!
    rawAppMetaData: JsonbAggExp!
    rawUserMetaData: JsonbAggExp!
    reauthenticationSentAt: TimestamptzAggExp!
    reauthenticationToken: VarcharAggExp!
    recoverySentAt: TimestamptzAggExp!
    recoveryToken: VarcharAggExp!
    role: VarcharAggExp!
    updatedAt: TimestamptzAggExp!
}

input AuthUsersBoolExp {
    _and: [AuthUsersBoolExp!]
    _not: AuthUsersBoolExp
    _or: [AuthUsersBoolExp!]
    aud: VarcharBoolExp
    authIdentities: AuthIdentitiesBoolExp
    authMfaFactors: AuthMfaFactorsBoolExp
    authOneTimeTokens: AuthOneTimeTokensBoolExp
    authSessions: AuthSessionsBoolExp
    bannedUntil: TimestamptzBoolExp
    confirmationSentAt: TimestamptzBoolExp
    confirmationToken: VarcharBoolExp
    confirmedAt: TimestamptzBoolExp
    createdAt: TimestamptzBoolExp
    deletedAt: TimestamptzBoolExp
    email: VarcharBoolExp
    emailChange: VarcharBoolExp
    emailChangeConfirmStatus: Int2BoolExp
    emailChangeSentAt: TimestamptzBoolExp
    emailChangeTokenCurrent: VarcharBoolExp
    emailChangeTokenNew: VarcharBoolExp
    emailConfirmedAt: TimestamptzBoolExp
    encryptedPassword: VarcharBoolExp
    id: UuidBoolExp
    instanceId: UuidBoolExp
    invitedAt: TimestamptzBoolExp
    isAnonymous: BoolBoolExp
    isSsoUser: BoolBoolExp
    isSuperAdmin: BoolBoolExp
    lastSignInAt: TimestamptzBoolExp
    phone: TextBoolExp
    phoneChange: TextBoolExp
    phoneChangeSentAt: TimestamptzBoolExp
    phoneChangeToken: VarcharBoolExp
    phoneConfirmedAt: TimestamptzBoolExp
    rawAppMetaData: JsonbBoolExp
    rawUserMetaData: JsonbBoolExp
    reauthenticationSentAt: TimestamptzBoolExp
    reauthenticationToken: VarcharBoolExp
    recoverySentAt: TimestamptzBoolExp
    recoveryToken: VarcharBoolExp
    role: VarcharBoolExp
    updatedAt: TimestamptzBoolExp
}

input AuthUsersFilterInput {
    limit: Int
    offset: Int
    order_by: [AuthUsersOrderBy!]
    where: AuthUsersBoolExp
}

input AuthUsersOrderBy {
    aud: OrderBy
    bannedUntil: OrderBy
    confirmationSentAt: OrderBy
    confirmationToken: OrderBy
    confirmedAt: OrderBy
    createdAt: OrderBy
    deletedAt: OrderBy
    email: OrderBy
    emailChange: OrderBy
    emailChangeConfirmStatus: OrderBy
    emailChangeSentAt: OrderBy
    emailChangeTokenCurrent: OrderBy
    emailChangeTokenNew: OrderBy
    emailConfirmedAt: OrderBy
    encryptedPassword: OrderBy
    id: OrderBy
    instanceId: OrderBy
    invitedAt: OrderBy
    isAnonymous: OrderBy
    isSsoUser: OrderBy
    isSuperAdmin: OrderBy
    lastSignInAt: OrderBy
    phone: OrderBy
    phoneChange: OrderBy
    phoneChangeSentAt: OrderBy
    phoneChangeToken: OrderBy
    phoneConfirmedAt: OrderBy
    rawAppMetaData: OrderBy
    rawUserMetaData: OrderBy
    reauthenticationSentAt: OrderBy
    reauthenticationToken: OrderBy
    recoverySentAt: OrderBy
    recoveryToken: OrderBy
    role: OrderBy
    updatedAt: OrderBy
}

scalar Bool

type BoolAggExp {
    _count: Int!
    _count_distinct: Int!
    bool_and: Bool
    bool_or: Bool
    every: Bool
}

input BoolBoolExp {
    _eq: Bool
    _gt: Bool
    _gte: Bool
    _in: [Bool!]
    _is_null: Boolean
    _lt: Bool
    _lte: Bool
    _neq: Bool
}

scalar Bytea

type ByteaAggExp {
    _count: Int!
    _count_distinct: Int!
}

input ByteaBoolExp {
    _eq: Bytea
    _gt: Bytea
    _gte: Bytea
    _in: [Bytea!]
    _is_null: Boolean
    _like: Bytea
    _lt: Bytea
    _lte: Bytea
    _neq: Bytea
    _nlike: Bytea
}

type CityEntity {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    countryEntity: CountryEntity
    countryId: Int!
    id: Int!
    name: Varchar!
    postalCode: Varchar!
    stateEntity: StateEntity
    stateId: Int!
    streetEntities(limit: Int offset: Int order_by: [StreetEntityOrderBy!] where: StreetEntityBoolExp): [StreetEntity!]
    streetEntitiesAggregate(filter_input: StreetEntityFilterInput): StreetEntityAggExp!
    streetEntitiesByCountryId(limit: Int offset: Int order_by: [StreetEntityOrderBy!] where: StreetEntityBoolExp): [StreetEntity!]
    streetEntitiesByCountryIdAggregate(filter_input: StreetEntityFilterInput): StreetEntityAggExp!
}

type CityEntityAggExp {
    _count: Int!
    countryId: IntAggExp!
    id: IntAggExp!
    name: VarcharAggExp!
    postalCode: VarcharAggExp!
    stateId: IntAggExp!
}

input CityEntityBoolExp {
    _and: [CityEntityBoolExp!]
    _not: CityEntityBoolExp
    _or: [CityEntityBoolExp!]
    addresses: AddressesBoolExp
    countryEntity: CountryEntityBoolExp
    countryId: IntBoolExp
    id: IntBoolExp
    name: VarcharBoolExp
    postalCode: VarcharBoolExp
    stateEntity: StateEntityBoolExp
    stateId: IntBoolExp
    streetEntities: StreetEntityBoolExp
    streetEntitiesByCountryId: StreetEntityBoolExp
}

input CityEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [CityEntityOrderBy!]
    where: CityEntityBoolExp
}

input CityEntityOrderBy {
    countryEntity: CountryEntityOrderBy
    countryId: OrderBy
    id: OrderBy
    name: OrderBy
    postalCode: OrderBy
    stateEntity: StateEntityOrderBy
    stateId: OrderBy
}

type ContactPersons {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    customer: Customers
    customerId: Int!
    emailAddressEntities(limit: Int offset: Int order_by: [EmailAddressEntityOrderBy!] where: EmailAddressEntityBoolExp): [EmailAddressEntity!]
    emailAddressEntitiesAggregate(filter_input: EmailAddressEntityFilterInput): EmailAddressEntityAggExp!
    firstName: Varchar!
    id: Int!
    isActive: Bool!
    isPrimary: Bool!
    lastName: Varchar!
    phoneNumbers(limit: Int offset: Int order_by: [PhoneNumbersOrderBy!] where: PhoneNumbersBoolExp): [PhoneNumbers!]
    phoneNumbersAggregate(filter_input: PhoneNumbersFilterInput): PhoneNumbersAggExp!
    tenant: Tenants
    tenantId: Int!
}

type ContactPersonsAggExp {
    _count: Int!
    customerId: IntAggExp!
    firstName: VarcharAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    isPrimary: BoolAggExp!
    lastName: VarcharAggExp!
    tenantId: IntAggExp!
}

input ContactPersonsBoolExp {
    _and: [ContactPersonsBoolExp!]
    _not: ContactPersonsBoolExp
    _or: [ContactPersonsBoolExp!]
    addresses: AddressesBoolExp
    customer: CustomersBoolExp
    customerId: IntBoolExp
    emailAddressEntities: EmailAddressEntityBoolExp
    firstName: VarcharBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    isPrimary: BoolBoolExp
    lastName: VarcharBoolExp
    phoneNumbers: PhoneNumbersBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
}

input ContactPersonsFilterInput {
    limit: Int
    offset: Int
    order_by: [ContactPersonsOrderBy!]
    where: ContactPersonsBoolExp
}

input ContactPersonsOrderBy {
    customer: CustomersOrderBy
    customerId: OrderBy
    firstName: OrderBy
    id: OrderBy
    isActive: OrderBy
    isPrimary: OrderBy
    lastName: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
}

type CountryEntity {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    cityEntities(limit: Int offset: Int order_by: [CityEntityOrderBy!] where: CityEntityBoolExp): [CityEntity!]
    cityEntitiesAggregate(filter_input: CityEntityFilterInput): CityEntityAggExp!
    cityId: Varchar!
    globalRegionEntity: GlobalRegionEntity
    globalRegionId: Int!
    id: Int!
    isoCode: Int!
    name: Varchar!
    stateEntities(limit: Int offset: Int order_by: [StateEntityOrderBy!] where: StateEntityBoolExp): [StateEntity!]
    stateEntitiesAggregate(filter_input: StateEntityFilterInput): StateEntityAggExp!
}

type CountryEntityAggExp {
    _count: Int!
    cityId: VarcharAggExp!
    globalRegionId: IntAggExp!
    id: IntAggExp!
    isoCode: IntAggExp!
    name: VarcharAggExp!
}

input CountryEntityBoolExp {
    _and: [CountryEntityBoolExp!]
    _not: CountryEntityBoolExp
    _or: [CountryEntityBoolExp!]
    addresses: AddressesBoolExp
    cityEntities: CityEntityBoolExp
    cityId: VarcharBoolExp
    globalRegionEntity: GlobalRegionEntityBoolExp
    globalRegionId: IntBoolExp
    id: IntBoolExp
    isoCode: IntBoolExp
    name: VarcharBoolExp
    stateEntities: StateEntityBoolExp
}

input CountryEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [CountryEntityOrderBy!]
    where: CountryEntityBoolExp
}

input CountryEntityOrderBy {
    cityId: OrderBy
    globalRegionEntity: GlobalRegionEntityOrderBy
    globalRegionId: OrderBy
    id: OrderBy
    isoCode: OrderBy
    name: OrderBy
}

type Customers {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    contactPersons(limit: Int offset: Int order_by: [ContactPersonsOrderBy!] where: ContactPersonsBoolExp): [ContactPersons!]
    contactPersonsAggregate(filter_input: ContactPersonsFilterInput): ContactPersonsAggExp!
    country: Varchar!
    currentlyAtOnboardingFlowStep: Int!
    customerType: Int!
    emailAddressEntities(limit: Int offset: Int order_by: [EmailAddressEntityOrderBy!] where: EmailAddressEntityBoolExp): [EmailAddressEntity!]
    emailAddressEntitiesAggregate(filter_input: EmailAddressEntityFilterInput): EmailAddressEntityAggExp!
    id: Int!
    phoneNumbers(limit: Int offset: Int order_by: [PhoneNumbersOrderBy!] where: PhoneNumbersBoolExp): [PhoneNumbers!]
    phoneNumbersAggregate(filter_input: PhoneNumbersFilterInput): PhoneNumbersAggExp!
    stripeCustomerId: Varchar!
    stripeSubscriptionId: Varchar!
    tenants(limit: Int offset: Int order_by: [TenantsOrderBy!] where: TenantsBoolExp): [Tenants!]
    tenantsAggregate(filter_input: TenantsFilterInput): TenantsAggExp!
    type: Varchar!
    vatId: Varchar!
    vatNumber: Varchar!
}

type CustomersAggExp {
    _count: Int!
    country: VarcharAggExp!
    currentlyAtOnboardingFlowStep: IntAggExp!
    customerType: IntAggExp!
    id: IntAggExp!
    stripeCustomerId: VarcharAggExp!
    stripeSubscriptionId: VarcharAggExp!
    type: VarcharAggExp!
    vatId: VarcharAggExp!
    vatNumber: VarcharAggExp!
}

input CustomersBoolExp {
    _and: [CustomersBoolExp!]
    _not: CustomersBoolExp
    _or: [CustomersBoolExp!]
    addresses: AddressesBoolExp
    contactPersons: ContactPersonsBoolExp
    country: VarcharBoolExp
    currentlyAtOnboardingFlowStep: IntBoolExp
    customerType: IntBoolExp
    emailAddressEntities: EmailAddressEntityBoolExp
    id: IntBoolExp
    phoneNumbers: PhoneNumbersBoolExp
    stripeCustomerId: VarcharBoolExp
    stripeSubscriptionId: VarcharBoolExp
    tenants: TenantsBoolExp
    type: VarcharBoolExp
    vatId: VarcharBoolExp
    vatNumber: VarcharBoolExp
}

input CustomersFilterInput {
    limit: Int
    offset: Int
    order_by: [CustomersOrderBy!]
    where: CustomersBoolExp
}

input CustomersOrderBy {
    country: OrderBy
    currentlyAtOnboardingFlowStep: OrderBy
    customerType: OrderBy
    id: OrderBy
    stripeCustomerId: OrderBy
    stripeSubscriptionId: OrderBy
    type: OrderBy
    vatId: OrderBy
    vatNumber: OrderBy
}

"Responses from the 'delete_Accounts_by_AccountId' procedure"
type DeleteAccountsByAccountIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Accounts!]!
}

"Responses from the 'delete_Addresses_by_Id' procedure"
type DeleteAddressesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Addresses!]!
}

"Responses from the 'delete_AuditLogs_by_Id' procedure"
type DeleteAuditLogsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuditLogs!]!
}

"Responses from the 'delete_auth_audit_log_entries_by_id' procedure"
type DeleteAuthAuditLogEntriesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthAuditLogEntries!]!
}

"Responses from the 'delete_auth_flow_state_by_id' procedure"
type DeleteAuthFlowStateByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthFlowState!]!
}

"Responses from the 'delete_auth_identities_by_id' procedure"
type DeleteAuthIdentitiesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthIdentities!]!
}

"Responses from the 'delete_auth_identities_by_provider_and_provider_id' procedure"
type DeleteAuthIdentitiesByProviderAndProviderIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthIdentities!]!
}

"Responses from the 'delete_auth_instances_by_id' procedure"
type DeleteAuthInstancesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthInstances!]!
}

"Responses from the 'delete_auth_mfa_amr_claims_by_authentication_method_and_session_id' procedure"
type DeleteAuthMfaAmrClaimsByAuthenticationMethodAndSessionIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaAmrClaims!]!
}

"Responses from the 'delete_auth_mfa_amr_claims_by_id' procedure"
type DeleteAuthMfaAmrClaimsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaAmrClaims!]!
}

"Responses from the 'delete_auth_mfa_challenges_by_id' procedure"
type DeleteAuthMfaChallengesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaChallenges!]!
}

"Responses from the 'delete_auth_mfa_factors_by_id' procedure"
type DeleteAuthMfaFactorsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaFactors!]!
}

"Responses from the 'delete_auth_mfa_factors_by_last_challenged_at' procedure"
type DeleteAuthMfaFactorsByLastChallengedAtResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaFactors!]!
}

"Responses from the 'delete_auth_one_time_tokens_by_id' procedure"
type DeleteAuthOneTimeTokensByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthOneTimeTokens!]!
}

"Responses from the 'delete_auth_refresh_tokens_by_id' procedure"
type DeleteAuthRefreshTokensByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthRefreshTokens!]!
}

"Responses from the 'delete_auth_refresh_tokens_by_token' procedure"
type DeleteAuthRefreshTokensByTokenResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthRefreshTokens!]!
}

"Responses from the 'delete_auth_saml_providers_by_entity_id' procedure"
type DeleteAuthSamlProvidersByEntityIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlProviders!]!
}

"Responses from the 'delete_auth_saml_providers_by_id' procedure"
type DeleteAuthSamlProvidersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlProviders!]!
}

"Responses from the 'delete_auth_saml_relay_states_by_id' procedure"
type DeleteAuthSamlRelayStatesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlRelayStates!]!
}

"Responses from the 'delete_auth_schema_migrations_by_version' procedure"
type DeleteAuthSchemaMigrationsByVersionResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSchemaMigrations!]!
}

"Responses from the 'delete_auth_sessions_by_id' procedure"
type DeleteAuthSessionsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSessions!]!
}

"Responses from the 'delete_auth_sso_domains_by_id' procedure"
type DeleteAuthSsoDomainsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSsoDomains!]!
}

"Responses from the 'delete_auth_sso_providers_by_id' procedure"
type DeleteAuthSsoProvidersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSsoProviders!]!
}

"Responses from the 'delete_auth_users_by_id' procedure"
type DeleteAuthUsersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthUsers!]!
}

"Responses from the 'delete_auth_users_by_phone' procedure"
type DeleteAuthUsersByPhoneResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthUsers!]!
}

"Responses from the 'delete_CityEntity_by_Id' procedure"
type DeleteCityEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [CityEntity!]!
}

"Responses from the 'delete_ContactPersons_by_Id' procedure"
type DeleteContactPersonsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ContactPersons!]!
}

"Responses from the 'delete_CountryEntity_by_Id' procedure"
type DeleteCountryEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [CountryEntity!]!
}

"Responses from the 'delete_Customers_by_Id' procedure"
type DeleteCustomersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Customers!]!
}

"Responses from the 'delete___EFMigrationsHistory_by_MigrationId' procedure"
type DeleteEfMigrationsHistoryByMigrationIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EfMigrationsHistory!]!
}

"Responses from the 'delete_EmailAddressEntity_by_Id' procedure"
type DeleteEmailAddressEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailAddressEntity!]!
}

"Responses from the 'delete_EmailInviteEntity_by_Id' procedure"
type DeleteEmailInviteEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailInviteEntity!]!
}

"Responses from the 'delete_EmailVerificationEntity_by_Id' procedure"
type DeleteEmailVerificationEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailVerificationEntity!]!
}

"Responses from the 'delete_GlobalRegionEntity_by_Id' procedure"
type DeleteGlobalRegionEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [GlobalRegionEntity!]!
}

"Responses from the 'delete_Integrations_by_Id' procedure"
type DeleteIntegrationsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Integrations!]!
}

"Responses from the 'delete_Languages_by_Id' procedure"
type DeleteLanguagesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Languages!]!
}

"Responses from the 'delete_Notifications_by_Id' procedure"
type DeleteNotificationsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Notifications!]!
}

"Responses from the 'delete_Permissions_by_Id' procedure"
type DeletePermissionsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Permissions!]!
}

"Responses from the 'delete_pgmq_meta_by_queue_name' procedure"
type DeletePgmqMetaByQueueNameResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgmqMeta!]!
}

"Responses from the 'delete_pgsodium_key_by_id' procedure"
type DeletePgsodiumKeyByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumKey!]!
}

"Responses from the 'delete_pgsodium_key_by_name' procedure"
type DeletePgsodiumKeyByNameResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumKey!]!
}

"Responses from the 'delete_PhoneNumbers_by_Id' procedure"
type DeletePhoneNumbersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PhoneNumbers!]!
}

"Responses from the 'delete_ProfileEntity_by_Id' procedure"
type DeleteProfileEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ProfileEntity!]!
}

"Responses from the 'delete_realtime_messages_by_id_and_inserted_at' procedure"
type DeleteRealtimeMessagesByIdAndInsertedAtResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [RealtimeMessages!]!
}

"Responses from the 'delete_realtime_schema_migrations_by_version' procedure"
type DeleteRealtimeSchemaMigrationsByVersionResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [RealtimeSchemaMigrations!]!
}

"Responses from the 'delete_Roles_by_Id' procedure"
type DeleteRolesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Roles!]!
}

"Responses from the 'delete_StateEntity_by_Id' procedure"
type DeleteStateEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StateEntity!]!
}

"Responses from the 'delete_storage_buckets_by_id' procedure"
type DeleteStorageBucketsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageBuckets!]!
}

"Responses from the 'delete_storage_migrations_by_id' procedure"
type DeleteStorageMigrationsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageMigrations!]!
}

"Responses from the 'delete_storage_migrations_by_name' procedure"
type DeleteStorageMigrationsByNameResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageMigrations!]!
}

"Responses from the 'delete_storage_objects_by_id' procedure"
type DeleteStorageObjectsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageObjects!]!
}

"Responses from the 'delete_storage_s3_multipart_uploads_by_id' procedure"
type DeleteStorageS3MultipartUploadsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageS3MultipartUploads!]!
}

"Responses from the 'delete_storage_s3_multipart_uploads_parts_by_id' procedure"
type DeleteStorageS3MultipartUploadsPartsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageS3MultipartUploadsParts!]!
}

"Responses from the 'delete_StreetEntity_by_Id' procedure"
type DeleteStreetEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StreetEntity!]!
}

"Responses from the 'delete_TeamInvites_by_Id' procedure"
type DeleteTeamInvitesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [TeamInvites!]!
}

"Responses from the 'delete_TeamMembers_by_Id' procedure"
type DeleteTeamMembersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [TeamMembers!]!
}

"Responses from the 'delete_Teams_by_Id' procedure"
type DeleteTeamsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Teams!]!
}

"Responses from the 'delete_Tenants_by_Id' procedure"
type DeleteTenantsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Tenants!]!
}

"Responses from the 'delete_UserRoles_by_Id' procedure"
type DeleteUserRolesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [UserRoles!]!
}

"Responses from the 'delete_Users_by_Id' procedure"
type DeleteUsersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Users!]!
}

"Responses from the 'delete_vault_secrets_by_id' procedure"
type DeleteVaultSecretsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [VaultSecrets!]!
}

type EfMigrationsHistory {
    migrationId: Varchar!
    productVersion: Varchar!
}

type EfMigrationsHistoryAggExp {
    _count: Int!
    migrationId: VarcharAggExp!
    productVersion: VarcharAggExp!
}

input EfMigrationsHistoryBoolExp {
    _and: [EfMigrationsHistoryBoolExp!]
    _not: EfMigrationsHistoryBoolExp
    _or: [EfMigrationsHistoryBoolExp!]
    migrationId: VarcharBoolExp
    productVersion: VarcharBoolExp
}

input EfMigrationsHistoryFilterInput {
    limit: Int
    offset: Int
    order_by: [EfMigrationsHistoryOrderBy!]
    where: EfMigrationsHistoryBoolExp
}

input EfMigrationsHistoryOrderBy {
    migrationId: OrderBy
    productVersion: OrderBy
}

type EmailAddressEntity {
    address: Varchar!
    contactPerson: ContactPersons
    contactPersonId: Int!
    customer: Customers
    customerId: Int
    id: Int!
    tenant: Tenants
    tenantId: Int
    user: Users
    userId: Int!
}

type EmailAddressEntityAggExp {
    _count: Int!
    address: VarcharAggExp!
    contactPersonId: IntAggExp!
    customerId: IntAggExp!
    id: IntAggExp!
    tenantId: IntAggExp!
    userId: IntAggExp!
}

input EmailAddressEntityBoolExp {
    _and: [EmailAddressEntityBoolExp!]
    _not: EmailAddressEntityBoolExp
    _or: [EmailAddressEntityBoolExp!]
    address: VarcharBoolExp
    contactPerson: ContactPersonsBoolExp
    contactPersonId: IntBoolExp
    customer: CustomersBoolExp
    customerId: IntBoolExp
    id: IntBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input EmailAddressEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [EmailAddressEntityOrderBy!]
    where: EmailAddressEntityBoolExp
}

input EmailAddressEntityOrderBy {
    address: OrderBy
    contactPerson: ContactPersonsOrderBy
    contactPersonId: OrderBy
    customer: CustomersOrderBy
    customerId: OrderBy
    id: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

type EmailInviteEntity {
    createdAt: Timestamptz!
    expireAt: Timestamptz!
    id: Int!
    inviteIsUsed: Bool!
    lastUpdatedAt: Timestamptz
    referredEmailAddress: Varchar!
    token: Varchar!
    user: Users
    userEntityId: Int
}

type EmailInviteEntityAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    expireAt: TimestamptzAggExp!
    id: IntAggExp!
    inviteIsUsed: BoolAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    referredEmailAddress: VarcharAggExp!
    token: VarcharAggExp!
    userEntityId: IntAggExp!
}

input EmailInviteEntityBoolExp {
    _and: [EmailInviteEntityBoolExp!]
    _not: EmailInviteEntityBoolExp
    _or: [EmailInviteEntityBoolExp!]
    createdAt: TimestamptzBoolExp
    expireAt: TimestamptzBoolExp
    id: IntBoolExp
    inviteIsUsed: BoolBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    referredEmailAddress: VarcharBoolExp
    token: VarcharBoolExp
    user: UsersBoolExp
    userEntityId: IntBoolExp
}

input EmailInviteEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [EmailInviteEntityOrderBy!]
    where: EmailInviteEntityBoolExp
}

input EmailInviteEntityOrderBy {
    createdAt: OrderBy
    expireAt: OrderBy
    id: OrderBy
    inviteIsUsed: OrderBy
    lastUpdatedAt: OrderBy
    referredEmailAddress: OrderBy
    token: OrderBy
    user: UsersOrderBy
    userEntityId: OrderBy
}

type EmailVerificationEntity {
    createdAt: Timestamptz!
    expireAt: Timestamptz!
    hasBeenOpened: Bool!
    hasBeenVerified: Bool!
    id: Int!
    lastUpdatedAt: Timestamptz
    token: Varchar!
    user: Users
    userEntityId: Int
}

type EmailVerificationEntityAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    expireAt: TimestamptzAggExp!
    hasBeenOpened: BoolAggExp!
    hasBeenVerified: BoolAggExp!
    id: IntAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    token: VarcharAggExp!
    userEntityId: IntAggExp!
}

input EmailVerificationEntityBoolExp {
    _and: [EmailVerificationEntityBoolExp!]
    _not: EmailVerificationEntityBoolExp
    _or: [EmailVerificationEntityBoolExp!]
    createdAt: TimestamptzBoolExp
    expireAt: TimestamptzBoolExp
    hasBeenOpened: BoolBoolExp
    hasBeenVerified: BoolBoolExp
    id: IntBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    token: VarcharBoolExp
    user: UsersBoolExp
    userEntityId: IntBoolExp
}

input EmailVerificationEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [EmailVerificationEntityOrderBy!]
    where: EmailVerificationEntityBoolExp
}

input EmailVerificationEntityOrderBy {
    createdAt: OrderBy
    expireAt: OrderBy
    hasBeenOpened: OrderBy
    hasBeenVerified: OrderBy
    id: OrderBy
    lastUpdatedAt: OrderBy
    token: OrderBy
    user: UsersOrderBy
    userEntityId: OrderBy
}

type ExtensionsPgStatStatementsInfo {
    dealloc: Int8
    statsReset: Timestamptz
}

type ExtensionsPgStatStatementsInfoAggExp {
    _count: Int!
    dealloc: Int8AggExp!
    statsReset: TimestamptzAggExp!
}

input ExtensionsPgStatStatementsInfoBoolExp {
    _and: [ExtensionsPgStatStatementsInfoBoolExp!]
    _not: ExtensionsPgStatStatementsInfoBoolExp
    _or: [ExtensionsPgStatStatementsInfoBoolExp!]
    dealloc: Int8BoolExp
    statsReset: TimestamptzBoolExp
}

input ExtensionsPgStatStatementsInfoFilterInput {
    limit: Int
    offset: Int
    order_by: [ExtensionsPgStatStatementsInfoOrderBy!]
    where: ExtensionsPgStatStatementsInfoBoolExp
}

input ExtensionsPgStatStatementsInfoOrderBy {
    dealloc: OrderBy
    statsReset: OrderBy
}

type GlobalRegionEntity {
    countryEntities(limit: Int offset: Int order_by: [CountryEntityOrderBy!] where: CountryEntityBoolExp): [CountryEntity!]
    countryEntitiesAggregate(filter_input: CountryEntityFilterInput): CountryEntityAggExp!
    id: Int!
    name: Varchar!
}

type GlobalRegionEntityAggExp {
    _count: Int!
    id: IntAggExp!
    name: VarcharAggExp!
}

input GlobalRegionEntityBoolExp {
    _and: [GlobalRegionEntityBoolExp!]
    _not: GlobalRegionEntityBoolExp
    _or: [GlobalRegionEntityBoolExp!]
    countryEntities: CountryEntityBoolExp
    id: IntBoolExp
    name: VarcharBoolExp
}

input GlobalRegionEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [GlobalRegionEntityOrderBy!]
    where: GlobalRegionEntityBoolExp
}

input GlobalRegionEntityOrderBy {
    id: OrderBy
    name: OrderBy
}

scalar Inet

type InetAggExp {
    _count: Int!
    _count_distinct: Int!
    max: Inet
    min: Inet
}

input InetBoolExp {
    _eq: Inet
    _gt: Inet
    _gte: Inet
    _in: [Inet!]
    _is_null: Boolean
    _lt: Inet
    _lte: Inet
    _neq: Inet
    inet_same_family: Inet
    network_overlap: Inet
    network_sub: Inet
    network_subeq: Inet
    network_sup: Inet
    network_supeq: Inet
}

input InsertAccountsObjectInput {
    accountId: Int!
    additionalMetadata: Varchar!
    createdAt: Timestamptz!
    email: Varchar!
    isActive: Bool!
    passwordHash: Varchar!
    role: Varchar!
    updatedAt: Timestamptz!
}

"Responses from the 'insert_Accounts' procedure"
type InsertAccountsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Accounts!]!
}

input InsertAddressesObjectInput {
    cityId: Int!
    contactPersonEntityId: Int
    countryId: Int!
    customerId: Int
    floor: Varchar!
    id: Int!
    isPrimary: Bool!
    latitude: Varchar
    longtitude: Varchar
    postalCode: Varchar!
    state: Varchar!
    streetId: Int!
    streetNumber: Varchar!
    tenantId: Int
    unitNumber: Varchar!
    userEntityId: Int
}

"Responses from the 'insert_Addresses' procedure"
type InsertAddressesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Addresses!]!
}

input InsertAuditLogsObjectInput {
    action: Varchar!
    category: Varchar!
    id: Int!
    modifiedAt: Timestamptz!
    modifiedBy: Varchar!
    newValue: Varchar!
    oldValue: Varchar!
    tenantId: Int!
    userId: Int!
}

"Responses from the 'insert_AuditLogs' procedure"
type InsertAuditLogsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuditLogs!]!
}

input InsertAuthAuditLogEntriesObjectInput {
    createdAt: Timestamptz
    id: Uuid!
    instanceId: Uuid
    ipAddress: Varchar
    payload: Json
}

"Responses from the 'insert_auth_audit_log_entries' procedure"
type InsertAuthAuditLogEntriesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthAuditLogEntries!]!
}

input InsertAuthFlowStateObjectInput {
    authCode: Text!
    authCodeIssuedAt: Timestamptz
    authenticationMethod: Text!
    codeChallenge: Text!
    codeChallengeMethod: AuthCodeChallengeMethod!
    createdAt: Timestamptz
    id: Uuid!
    providerAccessToken: Text
    providerRefreshToken: Text
    providerType: Text!
    updatedAt: Timestamptz
    userId: Uuid
}

"Responses from the 'insert_auth_flow_state' procedure"
type InsertAuthFlowStateResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthFlowState!]!
}

input InsertAuthIdentitiesObjectInput {
    createdAt: Timestamptz
    id: Uuid
    identityData: Jsonb!
    lastSignInAt: Timestamptz
    provider: Text!
    providerId: Text!
    updatedAt: Timestamptz
    userId: Uuid!
}

"Responses from the 'insert_auth_identities' procedure"
type InsertAuthIdentitiesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthIdentities!]!
}

input InsertAuthInstancesObjectInput {
    createdAt: Timestamptz
    id: Uuid!
    rawBaseConfig: Text
    updatedAt: Timestamptz
    uuid: Uuid
}

"Responses from the 'insert_auth_instances' procedure"
type InsertAuthInstancesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthInstances!]!
}

input InsertAuthMfaAmrClaimsObjectInput {
    authenticationMethod: Text!
    createdAt: Timestamptz!
    id: Uuid!
    sessionId: Uuid!
    updatedAt: Timestamptz!
}

"Responses from the 'insert_auth_mfa_amr_claims' procedure"
type InsertAuthMfaAmrClaimsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaAmrClaims!]!
}

input InsertAuthMfaChallengesObjectInput {
    createdAt: Timestamptz!
    factorId: Uuid!
    id: Uuid!
    ipAddress: Inet!
    otpCode: Text
    verifiedAt: Timestamptz
    webAuthnSessionData: Jsonb
}

"Responses from the 'insert_auth_mfa_challenges' procedure"
type InsertAuthMfaChallengesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaChallenges!]!
}

input InsertAuthMfaFactorsObjectInput {
    createdAt: Timestamptz!
    factorType: AuthFactorType!
    friendlyName: Text
    id: Uuid!
    lastChallengedAt: Timestamptz
    phone: Text
    secret: Text
    status: AuthFactorStatus!
    updatedAt: Timestamptz!
    userId: Uuid!
    webAuthnAaguid: Uuid
    webAuthnCredential: Jsonb
}

"Responses from the 'insert_auth_mfa_factors' procedure"
type InsertAuthMfaFactorsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaFactors!]!
}

input InsertAuthOneTimeTokensObjectInput {
    createdAt: Timestamp
    id: Uuid!
    relatesTo: Text!
    tokenHash: Text!
    tokenType: AuthOneTimeTokenType!
    updatedAt: Timestamp
    userId: Uuid!
}

"Responses from the 'insert_auth_one_time_tokens' procedure"
type InsertAuthOneTimeTokensResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthOneTimeTokens!]!
}

input InsertAuthRefreshTokensObjectInput {
    createdAt: Timestamptz
    id: Int8
    instanceId: Uuid
    parent: Varchar
    revoked: Bool
    sessionId: Uuid
    token: Varchar
    updatedAt: Timestamptz
    userId: Varchar
}

"Responses from the 'insert_auth_refresh_tokens' procedure"
type InsertAuthRefreshTokensResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthRefreshTokens!]!
}

input InsertAuthSamlProvidersObjectInput {
    attributeMapping: Jsonb
    createdAt: Timestamptz
    entityId: Text!
    id: Uuid!
    metadataUrl: Text
    metadataXml: Text!
    nameIdFormat: Text
    ssoProviderId: Uuid!
    updatedAt: Timestamptz
}

"Responses from the 'insert_auth_saml_providers' procedure"
type InsertAuthSamlProvidersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlProviders!]!
}

input InsertAuthSamlRelayStatesObjectInput {
    createdAt: Timestamptz
    flowStateId: Uuid
    forEmail: Text
    id: Uuid!
    redirectTo: Text
    requestId: Text!
    ssoProviderId: Uuid!
    updatedAt: Timestamptz
}

"Responses from the 'insert_auth_saml_relay_states' procedure"
type InsertAuthSamlRelayStatesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlRelayStates!]!
}

input InsertAuthSchemaMigrationsObjectInput {
    version: Varchar!
}

"Responses from the 'insert_auth_schema_migrations' procedure"
type InsertAuthSchemaMigrationsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSchemaMigrations!]!
}

input InsertAuthSessionsObjectInput {
    aal: AuthAalLevel
    createdAt: Timestamptz
    factorId: Uuid
    id: Uuid!
    ip: Inet
    "Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired."
    notAfter: Timestamptz
    refreshedAt: Timestamp
    tag: Text
    updatedAt: Timestamptz
    userAgent: Text
    userId: Uuid!
}

"Responses from the 'insert_auth_sessions' procedure"
type InsertAuthSessionsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSessions!]!
}

input InsertAuthSsoDomainsObjectInput {
    createdAt: Timestamptz
    domain: Text!
    id: Uuid!
    ssoProviderId: Uuid!
    updatedAt: Timestamptz
}

"Responses from the 'insert_auth_sso_domains' procedure"
type InsertAuthSsoDomainsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSsoDomains!]!
}

input InsertAuthSsoProvidersObjectInput {
    createdAt: Timestamptz
    id: Uuid!
    "Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code."
    resourceId: Text
    updatedAt: Timestamptz
}

"Responses from the 'insert_auth_sso_providers' procedure"
type InsertAuthSsoProvidersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSsoProviders!]!
}

input InsertAuthUsersObjectInput {
    aud: Varchar
    bannedUntil: Timestamptz
    confirmationSentAt: Timestamptz
    confirmationToken: Varchar
    createdAt: Timestamptz
    deletedAt: Timestamptz
    email: Varchar
    emailChange: Varchar
    emailChangeConfirmStatus: Int2
    emailChangeSentAt: Timestamptz
    emailChangeTokenCurrent: Varchar
    emailChangeTokenNew: Varchar
    emailConfirmedAt: Timestamptz
    encryptedPassword: Varchar
    id: Uuid!
    instanceId: Uuid
    invitedAt: Timestamptz
    isAnonymous: Bool
    "Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails."
    isSsoUser: Bool
    isSuperAdmin: Bool
    lastSignInAt: Timestamptz
    phone: Text
    phoneChange: Text
    phoneChangeSentAt: Timestamptz
    phoneChangeToken: Varchar
    phoneConfirmedAt: Timestamptz
    rawAppMetaData: Jsonb
    rawUserMetaData: Jsonb
    reauthenticationSentAt: Timestamptz
    reauthenticationToken: Varchar
    recoverySentAt: Timestamptz
    recoveryToken: Varchar
    role: Varchar
    updatedAt: Timestamptz
}

"Responses from the 'insert_auth_users' procedure"
type InsertAuthUsersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthUsers!]!
}

input InsertCityEntityObjectInput {
    countryId: Int!
    id: Int!
    name: Varchar!
    postalCode: Varchar!
    stateId: Int!
}

"Responses from the 'insert_CityEntity' procedure"
type InsertCityEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [CityEntity!]!
}

input InsertContactPersonsObjectInput {
    customerId: Int!
    firstName: Varchar!
    id: Int!
    isActive: Bool!
    isPrimary: Bool!
    lastName: Varchar!
    tenantId: Int!
}

"Responses from the 'insert_ContactPersons' procedure"
type InsertContactPersonsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ContactPersons!]!
}

input InsertCountryEntityObjectInput {
    cityId: Varchar!
    globalRegionId: Int!
    id: Int!
    isoCode: Int!
    name: Varchar!
}

"Responses from the 'insert_CountryEntity' procedure"
type InsertCountryEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [CountryEntity!]!
}

input InsertCustomersObjectInput {
    country: Varchar!
    currentlyAtOnboardingFlowStep: Int!
    customerType: Int!
    id: Int!
    stripeCustomerId: Varchar!
    stripeSubscriptionId: Varchar!
    type: Varchar!
    vatId: Varchar!
    vatNumber: Varchar!
}

"Responses from the 'insert_Customers' procedure"
type InsertCustomersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Customers!]!
}

input InsertEfMigrationsHistoryObjectInput {
    migrationId: Varchar!
    productVersion: Varchar!
}

"Responses from the 'insert___EFMigrationsHistory' procedure"
type InsertEfMigrationsHistoryResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EfMigrationsHistory!]!
}

input InsertEmailAddressEntityObjectInput {
    address: Varchar!
    contactPersonId: Int!
    customerId: Int
    id: Int!
    tenantId: Int
    userId: Int!
}

"Responses from the 'insert_EmailAddressEntity' procedure"
type InsertEmailAddressEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailAddressEntity!]!
}

input InsertEmailInviteEntityObjectInput {
    createdAt: Timestamptz!
    expireAt: Timestamptz!
    id: Int!
    inviteIsUsed: Bool!
    lastUpdatedAt: Timestamptz
    referredEmailAddress: Varchar!
    token: Varchar!
    userEntityId: Int
}

"Responses from the 'insert_EmailInviteEntity' procedure"
type InsertEmailInviteEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailInviteEntity!]!
}

input InsertEmailVerificationEntityObjectInput {
    createdAt: Timestamptz!
    expireAt: Timestamptz!
    hasBeenOpened: Bool!
    hasBeenVerified: Bool!
    id: Int!
    lastUpdatedAt: Timestamptz
    token: Varchar!
    userEntityId: Int
}

"Responses from the 'insert_EmailVerificationEntity' procedure"
type InsertEmailVerificationEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailVerificationEntity!]!
}

input InsertExtensionsPgStatStatementsInfoObjectInput {
    dealloc: Int8
    statsReset: Timestamptz
}

"Responses from the 'insert_extensions_pg_stat_statements_info' procedure"
type InsertExtensionsPgStatStatementsInfoResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ExtensionsPgStatStatementsInfo!]!
}

input InsertGlobalRegionEntityObjectInput {
    id: Int!
    name: Varchar!
}

"Responses from the 'insert_GlobalRegionEntity' procedure"
type InsertGlobalRegionEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [GlobalRegionEntity!]!
}

input InsertIntegrationsObjectInput {
    apiKeySecretReference: Varchar!
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    serviceName: Varchar!
}

"Responses from the 'insert_Integrations' procedure"
type InsertIntegrationsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Integrations!]!
}

input InsertLanguagesObjectInput {
    code: Varchar!
    id: Int!
    name: Varchar!
}

"Responses from the 'insert_Languages' procedure"
type InsertLanguagesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Languages!]!
}

input InsertNotificationsObjectInput {
    createdAt: Timestamptz!
    id: Int!
    isRead: Bool!
    message: Varchar!
    title: Varchar!
    userId: Int!
}

"Responses from the 'insert_Notifications' procedure"
type InsertNotificationsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Notifications!]!
}

input InsertPermissionsObjectInput {
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    roleEntityId: Int
}

"Responses from the 'insert_Permissions' procedure"
type InsertPermissionsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Permissions!]!
}

input InsertPgmqMetaObjectInput {
    createdAt: Timestamptz
    isPartitioned: Bool!
    isUnlogged: Bool!
    queueName: Varchar!
}

"Responses from the 'insert_pgmq_meta' procedure"
type InsertPgmqMetaResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgmqMeta!]!
}

input InsertPgsodiumDecryptedKeyObjectInput {
    associatedData: Text
    comment: Text
    created: Timestamptz
    decryptedRawKey: Bytea
    expires: Timestamptz
    id: Uuid
    keyContext: Bytea
    keyId: Int8
    keyType: PgsodiumKeyType
    name: Text
    parentKey: Uuid
    rawKey: Bytea
    rawKeyNonce: Bytea
    status: PgsodiumKeyStatus
}

"Responses from the 'insert_pgsodium_decrypted_key' procedure"
type InsertPgsodiumDecryptedKeyResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumDecryptedKey!]!
}

input InsertPgsodiumKeyObjectInput {
    associatedData: Text
    comment: Text
    created: Timestamptz
    expires: Timestamptz
    id: Uuid
    keyContext: Bytea
    keyId: Int8
    keyType: PgsodiumKeyType
    name: Text
    parentKey: Uuid
    rawKey: Bytea
    rawKeyNonce: Bytea
    status: PgsodiumKeyStatus
    userData: Text
}

"Responses from the 'insert_pgsodium_key' procedure"
type InsertPgsodiumKeyResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumKey!]!
}

input InsertPgsodiumValidKeyObjectInput {
    associatedData: Text
    created: Timestamptz
    expires: Timestamptz
    id: Uuid
    keyContext: Bytea
    keyId: Int8
    keyType: PgsodiumKeyType
    name: Text
    status: PgsodiumKeyStatus
}

"Responses from the 'insert_pgsodium_valid_key' procedure"
type InsertPgsodiumValidKeyResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumValidKey!]!
}

input InsertPhoneNumbersObjectInput {
    contactPersonId: Int!
    countryCode: Varchar!
    createdAt: Timestamptz!
    customerId: Int
    id: Int!
    isPrimary: Bool!
    isVerified: Bool!
    lastUpdatedAt: Timestamptz
    number: Varchar!
    tenantId: Int
    userId: Int!
}

"Responses from the 'insert_PhoneNumbers' procedure"
type InsertPhoneNumbersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PhoneNumbers!]!
}

input InsertProfileEntityObjectInput {
    avatar: Varchar!
    createdAt: Timestamptz!
    dateOfBirth: Timestamptz!
    firstName: Varchar!
    gender: Int
    id: Int!
    isActive: Bool!
    language: Varchar!
    lastLogin: Timestamptz!
    lastName: Varchar!
    slug: Varchar!
    timezone: Timestamptz!
    userName: Varchar!
}

"Responses from the 'insert_ProfileEntity' procedure"
type InsertProfileEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ProfileEntity!]!
}

input InsertRealtimeMessagesObjectInput {
    event: Text
    extension: Text!
    id: Uuid
    insertedAt: Timestamp
    payload: Jsonb
    private: Bool
    topic: Text!
    updatedAt: Timestamp
}

"Responses from the 'insert_realtime_messages' procedure"
type InsertRealtimeMessagesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [RealtimeMessages!]!
}

input InsertRealtimeSchemaMigrationsObjectInput {
    insertedAt: Timestamp
    version: Int8!
}

"Responses from the 'insert_realtime_schema_migrations' procedure"
type InsertRealtimeSchemaMigrationsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [RealtimeSchemaMigrations!]!
}

input InsertRolesObjectInput {
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    lastUpdatedAt: Timestamptz
    name: Varchar!
}

"Responses from the 'insert_Roles' procedure"
type InsertRolesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Roles!]!
}

input InsertStateEntityObjectInput {
    countryId: Int!
    id: Int!
    isoCode: Varchar!
    name: Varchar!
}

"Responses from the 'insert_StateEntity' procedure"
type InsertStateEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StateEntity!]!
}

input InsertStorageBucketsObjectInput {
    allowedMimeTypes: [Text]
    avifAutodetection: Bool
    createdAt: Timestamptz
    fileSizeLimit: Int8
    id: Text!
    name: Text!
    "Field is deprecated, use owner_id instead"
    owner: Uuid
    ownerId: Text
    public: Bool
    updatedAt: Timestamptz
}

"Responses from the 'insert_storage_buckets' procedure"
type InsertStorageBucketsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageBuckets!]!
}

input InsertStorageMigrationsObjectInput {
    executedAt: Timestamp
    hash: Varchar!
    id: Int!
    name: Varchar!
}

"Responses from the 'insert_storage_migrations' procedure"
type InsertStorageMigrationsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageMigrations!]!
}

input InsertStorageObjectsObjectInput {
    bucketId: Text
    createdAt: Timestamptz
    id: Uuid
    lastAccessedAt: Timestamptz
    metadata: Jsonb
    name: Text
    "Field is deprecated, use owner_id instead"
    owner: Uuid
    ownerId: Text
    updatedAt: Timestamptz
    userMetadata: Jsonb
    version: Text
}

"Responses from the 'insert_storage_objects' procedure"
type InsertStorageObjectsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageObjects!]!
}

input InsertStorageS3MultipartUploadsObjectInput {
    bucketId: Text!
    createdAt: Timestamptz
    id: Text!
    inProgressSize: Int8
    key: Text!
    ownerId: Text
    uploadSignature: Text!
    userMetadata: Jsonb
    version: Text!
}

input InsertStorageS3MultipartUploadsPartsObjectInput {
    bucketId: Text!
    createdAt: Timestamptz
    etag: Text!
    id: Uuid
    key: Text!
    ownerId: Text
    partNumber: Int!
    size: Int8
    uploadId: Text!
    version: Text!
}

"Responses from the 'insert_storage_s3_multipart_uploads_parts' procedure"
type InsertStorageS3MultipartUploadsPartsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageS3MultipartUploadsParts!]!
}

"Responses from the 'insert_storage_s3_multipart_uploads' procedure"
type InsertStorageS3MultipartUploadsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageS3MultipartUploads!]!
}

input InsertStreetEntityObjectInput {
    cityId: Int!
    countryId: Int!
    id: Int!
    name: Varchar!
}

"Responses from the 'insert_StreetEntity' procedure"
type InsertStreetEntityResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StreetEntity!]!
}

input InsertTeamInvitesObjectInput {
    createdAt: Timestamptz!
    expireAt: Timestamptz!
    id: Int!
    isActive: Bool!
    teamId: Int!
    userId: Int!
}

"Responses from the 'insert_TeamInvites' procedure"
type InsertTeamInvitesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [TeamInvites!]!
}

input InsertTeamMembersObjectInput {
    alias: Varchar!
    id: Int!
    isActive: Bool!
    teamId: Int!
    userId: Int!
}

"Responses from the 'insert_TeamMembers' procedure"
type InsertTeamMembersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [TeamMembers!]!
}

input InsertTeamsObjectInput {
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    isActive: Bool!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    ownerId: Int!
    tenantId: Int!
}

"Responses from the 'insert_Teams' procedure"
type InsertTeamsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Teams!]!
}

input InsertTenantsObjectInput {
    country: Varchar!
    createdAt: Timestamptz!
    customerId: Int!
    description: Varchar!
    email: Varchar!
    id: Int!
    isActive: Bool!
    isPrimary: Bool!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    phone: Varchar!
    tenantId: Int!
    type: Varchar!
    vatNumber: Varchar!
}

"Responses from the 'insert_Tenants' procedure"
type InsertTenantsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Tenants!]!
}

input InsertUserRolesObjectInput {
    id: Int!
    roleId: Int!
    userId: Int!
}

"Responses from the 'insert_UserRoles' procedure"
type InsertUserRolesResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [UserRoles!]!
}

input InsertUsersObjectInput {
    createdAt: Timestamptz!
    id: Int!
    isActive: Bool!
    lastLogin: Timestamptz!
    profileId: Int!
    tenantId: Int!
    userName: Varchar!
}

"Responses from the 'insert_Users' procedure"
type InsertUsersResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Users!]!
}

input InsertVaultDecryptedSecretsObjectInput {
    createdAt: Timestamptz
    decryptedSecret: Text
    description: Text
    id: Uuid
    keyId: Uuid
    name: Text
    nonce: Bytea
    secret: Text
    updatedAt: Timestamptz
}

"Responses from the 'insert_vault_decrypted_secrets' procedure"
type InsertVaultDecryptedSecretsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [VaultDecryptedSecrets!]!
}

input InsertVaultSecretsObjectInput {
    createdAt: Timestamptz
    description: Text
    id: Uuid
    keyId: Uuid
    name: Text
    nonce: Bytea
    secret: Text!
    updatedAt: Timestamptz
}

"Responses from the 'insert_vault_secrets' procedure"
type InsertVaultSecretsResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [VaultSecrets!]!
}

scalar Int2

type Int2AggExp {
    _count: Int!
    _count_distinct: Int!
    avg: Numeric
    bit_and: Int2
    bit_or: Int2
    bit_xor: Int2
    max: Int2
    min: Int2
    stddev: Numeric
    stddev_pop: Numeric
    stddev_samp: Numeric
    sum: Int8
    var_pop: Numeric
    var_samp: Numeric
    variance: Numeric
}

input Int2BoolExp {
    _eq: Int2
    _gt: Int2
    _gte: Int2
    _in: [Int2!]
    _is_null: Boolean
    _lt: Int2
    _lte: Int2
    _neq: Int2
}

scalar Int

type IntAggExp {
    _count: Int!
    _count_distinct: Int!
    avg: Numeric
    bit_and: Int
    bit_or: Int
    bit_xor: Int
    max: Int
    min: Int
    stddev: Numeric
    stddev_pop: Numeric
    stddev_samp: Numeric
    sum: Int8
    var_pop: Numeric
    var_samp: Numeric
    variance: Numeric
}

input IntBoolExp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
}

scalar Int8

type Int8AggExp {
    _count: Int!
    _count_distinct: Int!
    avg: Numeric
    bit_and: Int8
    bit_or: Int8
    bit_xor: Int8
    max: Int8
    min: Int8
    stddev: Numeric
    stddev_pop: Numeric
    stddev_samp: Numeric
    sum: Numeric
    var_pop: Numeric
    var_samp: Numeric
    variance: Numeric
}

input Int8BoolExp {
    _eq: Int8
    _gt: Int8
    _gte: Int8
    _in: [Int8!]
    _is_null: Boolean
    _lt: Int8
    _lte: Int8
    _neq: Int8
}

type Integrations {
    apiKeySecretReference: Varchar!
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    serviceName: Varchar!
}

type IntegrationsAggExp {
    _count: Int!
    apiKeySecretReference: VarcharAggExp!
    createdAt: TimestamptzAggExp!
    description: VarcharAggExp!
    id: IntAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    name: VarcharAggExp!
    serviceName: VarcharAggExp!
}

input IntegrationsBoolExp {
    _and: [IntegrationsBoolExp!]
    _not: IntegrationsBoolExp
    _or: [IntegrationsBoolExp!]
    apiKeySecretReference: VarcharBoolExp
    createdAt: TimestamptzBoolExp
    description: VarcharBoolExp
    id: IntBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    name: VarcharBoolExp
    serviceName: VarcharBoolExp
}

input IntegrationsFilterInput {
    limit: Int
    offset: Int
    order_by: [IntegrationsOrderBy!]
    where: IntegrationsBoolExp
}

input IntegrationsOrderBy {
    apiKeySecretReference: OrderBy
    createdAt: OrderBy
    description: OrderBy
    id: OrderBy
    lastUpdatedAt: OrderBy
    name: OrderBy
    serviceName: OrderBy
}

scalar Json

type JsonAggExp {
    _count: Int!
    _count_distinct: Int!
}

input JsonBoolExp {
    _in: [Json!]
    _is_null: Boolean
}

scalar Jsonb

type JsonbAggExp {
    _count: Int!
    _count_distinct: Int!
}

input JsonbBoolExp {
    _eq: Jsonb
    _gt: Jsonb
    _gte: Jsonb
    _in: [Jsonb!]
    _is_null: Boolean
    _lt: Jsonb
    _lte: Jsonb
    _neq: Jsonb
    jsonb_contained: Jsonb
    jsonb_contains: Jsonb
    jsonb_exists: Text
}

type Languages {
    code: Varchar!
    id: Int!
    name: Varchar!
}

type LanguagesAggExp {
    _count: Int!
    code: VarcharAggExp!
    id: IntAggExp!
    name: VarcharAggExp!
}

input LanguagesBoolExp {
    _and: [LanguagesBoolExp!]
    _not: LanguagesBoolExp
    _or: [LanguagesBoolExp!]
    code: VarcharBoolExp
    id: IntBoolExp
    name: VarcharBoolExp
}

input LanguagesFilterInput {
    limit: Int
    offset: Int
    order_by: [LanguagesOrderBy!]
    where: LanguagesBoolExp
}

input LanguagesOrderBy {
    code: OrderBy
    id: OrderBy
    name: OrderBy
}

type Mutation {
    "Delete any row on the 'Accounts' collection using the 'AccountId' key"
    deleteAccountsByAccountId(keyAccountId: Int! "Delete permission predicate over the 'Accounts' collection" preCheck: AccountsBoolExp): DeleteAccountsByAccountIdResponse!
    "Delete any row on the 'Addresses' collection using the 'Id' key"
    deleteAddressesById(keyId: Int! "Delete permission predicate over the 'Addresses' collection" preCheck: AddressesBoolExp): DeleteAddressesByIdResponse!
    "Delete any row on the 'AuditLogs' collection using the 'Id' key"
    deleteAuditLogsById(keyId: Int! "Delete permission predicate over the 'AuditLogs' collection" preCheck: AuditLogsBoolExp): DeleteAuditLogsByIdResponse!
    "Delete any row on the 'auth_audit_log_entries' collection using the 'id' key"
    deleteAuthAuditLogEntriesById(keyId: Uuid! "Delete permission predicate over the 'auth_audit_log_entries' collection" preCheck: AuthAuditLogEntriesBoolExp): DeleteAuthAuditLogEntriesByIdResponse!
    "Delete any row on the 'auth_flow_state' collection using the 'id' key"
    deleteAuthFlowStateById(keyId: Uuid! "Delete permission predicate over the 'auth_flow_state' collection" preCheck: AuthFlowStateBoolExp): DeleteAuthFlowStateByIdResponse!
    "Delete any row on the 'auth_identities' collection using the 'id' key"
    deleteAuthIdentitiesById(keyId: Uuid! "Delete permission predicate over the 'auth_identities' collection" preCheck: AuthIdentitiesBoolExp): DeleteAuthIdentitiesByIdResponse!
    "Delete any row on the 'auth_identities' collection using the 'provider' and 'provider_id' keys"
    deleteAuthIdentitiesByProviderAndProviderId(keyProvider: Text! keyProviderId: Text! "Delete permission predicate over the 'auth_identities' collection" preCheck: AuthIdentitiesBoolExp): DeleteAuthIdentitiesByProviderAndProviderIdResponse!
    "Delete any row on the 'auth_instances' collection using the 'id' key"
    deleteAuthInstancesById(keyId: Uuid! "Delete permission predicate over the 'auth_instances' collection" preCheck: AuthInstancesBoolExp): DeleteAuthInstancesByIdResponse!
    "Delete any row on the 'auth_mfa_amr_claims' collection using the 'authentication_method' and 'session_id' keys"
    deleteAuthMfaAmrClaimsByAuthenticationMethodAndSessionId(keyAuthenticationMethod: Text! keySessionId: Uuid! "Delete permission predicate over the 'auth_mfa_amr_claims' collection" preCheck: AuthMfaAmrClaimsBoolExp): DeleteAuthMfaAmrClaimsByAuthenticationMethodAndSessionIdResponse!
    "Delete any row on the 'auth_mfa_amr_claims' collection using the 'id' key"
    deleteAuthMfaAmrClaimsById(keyId: Uuid! "Delete permission predicate over the 'auth_mfa_amr_claims' collection" preCheck: AuthMfaAmrClaimsBoolExp): DeleteAuthMfaAmrClaimsByIdResponse!
    "Delete any row on the 'auth_mfa_challenges' collection using the 'id' key"
    deleteAuthMfaChallengesById(keyId: Uuid! "Delete permission predicate over the 'auth_mfa_challenges' collection" preCheck: AuthMfaChallengesBoolExp): DeleteAuthMfaChallengesByIdResponse!
    "Delete any row on the 'auth_mfa_factors' collection using the 'id' key"
    deleteAuthMfaFactorsById(keyId: Uuid! "Delete permission predicate over the 'auth_mfa_factors' collection" preCheck: AuthMfaFactorsBoolExp): DeleteAuthMfaFactorsByIdResponse!
    "Delete any row on the 'auth_mfa_factors' collection using the 'last_challenged_at' key"
    deleteAuthMfaFactorsByLastChallengedAt(keyLastChallengedAt: Timestamptz "Delete permission predicate over the 'auth_mfa_factors' collection" preCheck: AuthMfaFactorsBoolExp): DeleteAuthMfaFactorsByLastChallengedAtResponse!
    "Delete any row on the 'auth_one_time_tokens' collection using the 'id' key"
    deleteAuthOneTimeTokensById(keyId: Uuid! "Delete permission predicate over the 'auth_one_time_tokens' collection" preCheck: AuthOneTimeTokensBoolExp): DeleteAuthOneTimeTokensByIdResponse!
    "Delete any row on the 'auth_refresh_tokens' collection using the 'id' key"
    deleteAuthRefreshTokensById(keyId: Int8! "Delete permission predicate over the 'auth_refresh_tokens' collection" preCheck: AuthRefreshTokensBoolExp): DeleteAuthRefreshTokensByIdResponse!
    "Delete any row on the 'auth_refresh_tokens' collection using the 'token' key"
    deleteAuthRefreshTokensByToken(keyToken: Varchar "Delete permission predicate over the 'auth_refresh_tokens' collection" preCheck: AuthRefreshTokensBoolExp): DeleteAuthRefreshTokensByTokenResponse!
    "Delete any row on the 'auth_saml_providers' collection using the 'entity_id' key"
    deleteAuthSamlProvidersByEntityId(keyEntityId: Text! "Delete permission predicate over the 'auth_saml_providers' collection" preCheck: AuthSamlProvidersBoolExp): DeleteAuthSamlProvidersByEntityIdResponse!
    "Delete any row on the 'auth_saml_providers' collection using the 'id' key"
    deleteAuthSamlProvidersById(keyId: Uuid! "Delete permission predicate over the 'auth_saml_providers' collection" preCheck: AuthSamlProvidersBoolExp): DeleteAuthSamlProvidersByIdResponse!
    "Delete any row on the 'auth_saml_relay_states' collection using the 'id' key"
    deleteAuthSamlRelayStatesById(keyId: Uuid! "Delete permission predicate over the 'auth_saml_relay_states' collection" preCheck: AuthSamlRelayStatesBoolExp): DeleteAuthSamlRelayStatesByIdResponse!
    "Delete any row on the 'auth_schema_migrations' collection using the 'version' key"
    deleteAuthSchemaMigrationsByVersion(keyVersion: Varchar! "Delete permission predicate over the 'auth_schema_migrations' collection" preCheck: AuthSchemaMigrationsBoolExp): DeleteAuthSchemaMigrationsByVersionResponse!
    "Delete any row on the 'auth_sessions' collection using the 'id' key"
    deleteAuthSessionsById(keyId: Uuid! "Delete permission predicate over the 'auth_sessions' collection" preCheck: AuthSessionsBoolExp): DeleteAuthSessionsByIdResponse!
    "Delete any row on the 'auth_sso_domains' collection using the 'id' key"
    deleteAuthSsoDomainsById(keyId: Uuid! "Delete permission predicate over the 'auth_sso_domains' collection" preCheck: AuthSsoDomainsBoolExp): DeleteAuthSsoDomainsByIdResponse!
    "Delete any row on the 'auth_sso_providers' collection using the 'id' key"
    deleteAuthSsoProvidersById(keyId: Uuid! "Delete permission predicate over the 'auth_sso_providers' collection" preCheck: AuthSsoProvidersBoolExp): DeleteAuthSsoProvidersByIdResponse!
    "Delete any row on the 'auth_users' collection using the 'id' key"
    deleteAuthUsersById(keyId: Uuid! "Delete permission predicate over the 'auth_users' collection" preCheck: AuthUsersBoolExp): DeleteAuthUsersByIdResponse!
    "Delete any row on the 'auth_users' collection using the 'phone' key"
    deleteAuthUsersByPhone(keyPhone: Text "Delete permission predicate over the 'auth_users' collection" preCheck: AuthUsersBoolExp): DeleteAuthUsersByPhoneResponse!
    "Delete any row on the 'CityEntity' collection using the 'Id' key"
    deleteCityEntityById(keyId: Int! "Delete permission predicate over the 'CityEntity' collection" preCheck: CityEntityBoolExp): DeleteCityEntityByIdResponse!
    "Delete any row on the 'ContactPersons' collection using the 'Id' key"
    deleteContactPersonsById(keyId: Int! "Delete permission predicate over the 'ContactPersons' collection" preCheck: ContactPersonsBoolExp): DeleteContactPersonsByIdResponse!
    "Delete any row on the 'CountryEntity' collection using the 'Id' key"
    deleteCountryEntityById(keyId: Int! "Delete permission predicate over the 'CountryEntity' collection" preCheck: CountryEntityBoolExp): DeleteCountryEntityByIdResponse!
    "Delete any row on the 'Customers' collection using the 'Id' key"
    deleteCustomersById(keyId: Int! "Delete permission predicate over the 'Customers' collection" preCheck: CustomersBoolExp): DeleteCustomersByIdResponse!
    "Delete any row on the '__EFMigrationsHistory' collection using the 'MigrationId' key"
    deleteEfMigrationsHistoryByMigrationId(keyMigrationId: Varchar! "Delete permission predicate over the '__EFMigrationsHistory' collection" preCheck: EfMigrationsHistoryBoolExp): DeleteEfMigrationsHistoryByMigrationIdResponse!
    "Delete any row on the 'EmailAddressEntity' collection using the 'Id' key"
    deleteEmailAddressEntityById(keyId: Int! "Delete permission predicate over the 'EmailAddressEntity' collection" preCheck: EmailAddressEntityBoolExp): DeleteEmailAddressEntityByIdResponse!
    "Delete any row on the 'EmailInviteEntity' collection using the 'Id' key"
    deleteEmailInviteEntityById(keyId: Int! "Delete permission predicate over the 'EmailInviteEntity' collection" preCheck: EmailInviteEntityBoolExp): DeleteEmailInviteEntityByIdResponse!
    "Delete any row on the 'EmailVerificationEntity' collection using the 'Id' key"
    deleteEmailVerificationEntityById(keyId: Int! "Delete permission predicate over the 'EmailVerificationEntity' collection" preCheck: EmailVerificationEntityBoolExp): DeleteEmailVerificationEntityByIdResponse!
    "Delete any row on the 'GlobalRegionEntity' collection using the 'Id' key"
    deleteGlobalRegionEntityById(keyId: Int! "Delete permission predicate over the 'GlobalRegionEntity' collection" preCheck: GlobalRegionEntityBoolExp): DeleteGlobalRegionEntityByIdResponse!
    "Delete any row on the 'Integrations' collection using the 'Id' key"
    deleteIntegrationsById(keyId: Int! "Delete permission predicate over the 'Integrations' collection" preCheck: IntegrationsBoolExp): DeleteIntegrationsByIdResponse!
    "Delete any row on the 'Languages' collection using the 'Id' key"
    deleteLanguagesById(keyId: Int! "Delete permission predicate over the 'Languages' collection" preCheck: LanguagesBoolExp): DeleteLanguagesByIdResponse!
    "Delete any row on the 'Notifications' collection using the 'Id' key"
    deleteNotificationsById(keyId: Int! "Delete permission predicate over the 'Notifications' collection" preCheck: NotificationsBoolExp): DeleteNotificationsByIdResponse!
    "Delete any row on the 'Permissions' collection using the 'Id' key"
    deletePermissionsById(keyId: Int! "Delete permission predicate over the 'Permissions' collection" preCheck: PermissionsBoolExp): DeletePermissionsByIdResponse!
    "Delete any row on the 'pgmq_meta' collection using the 'queue_name' key"
    deletePgmqMetaByQueueName(keyQueueName: Varchar! "Delete permission predicate over the 'pgmq_meta' collection" preCheck: PgmqMetaBoolExp): DeletePgmqMetaByQueueNameResponse!
    "Delete any row on the 'pgsodium_key' collection using the 'id' key"
    deletePgsodiumKeyById(keyId: Uuid! "Delete permission predicate over the 'pgsodium_key' collection" preCheck: PgsodiumKeyBoolExp): DeletePgsodiumKeyByIdResponse!
    "Delete any row on the 'pgsodium_key' collection using the 'name' key"
    deletePgsodiumKeyByName(keyName: Text "Delete permission predicate over the 'pgsodium_key' collection" preCheck: PgsodiumKeyBoolExp): DeletePgsodiumKeyByNameResponse!
    "Delete any row on the 'PhoneNumbers' collection using the 'Id' key"
    deletePhoneNumbersById(keyId: Int! "Delete permission predicate over the 'PhoneNumbers' collection" preCheck: PhoneNumbersBoolExp): DeletePhoneNumbersByIdResponse!
    "Delete any row on the 'ProfileEntity' collection using the 'Id' key"
    deleteProfileEntityById(keyId: Int! "Delete permission predicate over the 'ProfileEntity' collection" preCheck: ProfileEntityBoolExp): DeleteProfileEntityByIdResponse!
    "Delete any row on the 'realtime_messages' collection using the 'id' and 'inserted_at' keys"
    deleteRealtimeMessagesByIdAndInsertedAt(keyId: Uuid! keyInsertedAt: Timestamp! "Delete permission predicate over the 'realtime_messages' collection" preCheck: RealtimeMessagesBoolExp): DeleteRealtimeMessagesByIdAndInsertedAtResponse!
    "Delete any row on the 'realtime_schema_migrations' collection using the 'version' key"
    deleteRealtimeSchemaMigrationsByVersion(keyVersion: Int8! "Delete permission predicate over the 'realtime_schema_migrations' collection" preCheck: RealtimeSchemaMigrationsBoolExp): DeleteRealtimeSchemaMigrationsByVersionResponse!
    "Delete any row on the 'Roles' collection using the 'Id' key"
    deleteRolesById(keyId: Int! "Delete permission predicate over the 'Roles' collection" preCheck: RolesBoolExp): DeleteRolesByIdResponse!
    "Delete any row on the 'StateEntity' collection using the 'Id' key"
    deleteStateEntityById(keyId: Int! "Delete permission predicate over the 'StateEntity' collection" preCheck: StateEntityBoolExp): DeleteStateEntityByIdResponse!
    "Delete any row on the 'storage_buckets' collection using the 'id' key"
    deleteStorageBucketsById(keyId: Text! "Delete permission predicate over the 'storage_buckets' collection" preCheck: StorageBucketsBoolExp): DeleteStorageBucketsByIdResponse!
    "Delete any row on the 'storage_migrations' collection using the 'id' key"
    deleteStorageMigrationsById(keyId: Int! "Delete permission predicate over the 'storage_migrations' collection" preCheck: StorageMigrationsBoolExp): DeleteStorageMigrationsByIdResponse!
    "Delete any row on the 'storage_migrations' collection using the 'name' key"
    deleteStorageMigrationsByName(keyName: Varchar! "Delete permission predicate over the 'storage_migrations' collection" preCheck: StorageMigrationsBoolExp): DeleteStorageMigrationsByNameResponse!
    "Delete any row on the 'storage_objects' collection using the 'id' key"
    deleteStorageObjectsById(keyId: Uuid! "Delete permission predicate over the 'storage_objects' collection" preCheck: StorageObjectsBoolExp): DeleteStorageObjectsByIdResponse!
    "Delete any row on the 'storage_s3_multipart_uploads' collection using the 'id' key"
    deleteStorageS3MultipartUploadsById(keyId: Text! "Delete permission predicate over the 'storage_s3_multipart_uploads' collection" preCheck: StorageS3MultipartUploadsBoolExp): DeleteStorageS3MultipartUploadsByIdResponse!
    "Delete any row on the 'storage_s3_multipart_uploads_parts' collection using the 'id' key"
    deleteStorageS3MultipartUploadsPartsById(keyId: Uuid! "Delete permission predicate over the 'storage_s3_multipart_uploads_parts' collection" preCheck: StorageS3MultipartUploadsPartsBoolExp): DeleteStorageS3MultipartUploadsPartsByIdResponse!
    "Delete any row on the 'StreetEntity' collection using the 'Id' key"
    deleteStreetEntityById(keyId: Int! "Delete permission predicate over the 'StreetEntity' collection" preCheck: StreetEntityBoolExp): DeleteStreetEntityByIdResponse!
    "Delete any row on the 'TeamInvites' collection using the 'Id' key"
    deleteTeamInvitesById(keyId: Int! "Delete permission predicate over the 'TeamInvites' collection" preCheck: TeamInvitesBoolExp): DeleteTeamInvitesByIdResponse!
    "Delete any row on the 'TeamMembers' collection using the 'Id' key"
    deleteTeamMembersById(keyId: Int! "Delete permission predicate over the 'TeamMembers' collection" preCheck: TeamMembersBoolExp): DeleteTeamMembersByIdResponse!
    "Delete any row on the 'Teams' collection using the 'Id' key"
    deleteTeamsById(keyId: Int! "Delete permission predicate over the 'Teams' collection" preCheck: TeamsBoolExp): DeleteTeamsByIdResponse!
    "Delete any row on the 'Tenants' collection using the 'Id' key"
    deleteTenantsById(keyId: Int! "Delete permission predicate over the 'Tenants' collection" preCheck: TenantsBoolExp): DeleteTenantsByIdResponse!
    "Delete any row on the 'UserRoles' collection using the 'Id' key"
    deleteUserRolesById(keyId: Int! "Delete permission predicate over the 'UserRoles' collection" preCheck: UserRolesBoolExp): DeleteUserRolesByIdResponse!
    "Delete any row on the 'Users' collection using the 'Id' key"
    deleteUsersById(keyId: Int! "Delete permission predicate over the 'Users' collection" preCheck: UsersBoolExp): DeleteUsersByIdResponse!
    "Delete any row on the 'vault_secrets' collection using the 'id' key"
    deleteVaultSecretsById(keyId: Uuid! "Delete permission predicate over the 'vault_secrets' collection" preCheck: VaultSecretsBoolExp): DeleteVaultSecretsByIdResponse!
    "Insert into the Accounts table"
    insertAccounts(objects: [InsertAccountsObjectInput!]! "Insert permission predicate over the 'Accounts' collection" postCheck: AccountsBoolExp): InsertAccountsResponse!
    "Insert into the Addresses table"
    insertAddresses(objects: [InsertAddressesObjectInput!]! "Insert permission predicate over the 'Addresses' collection" postCheck: AddressesBoolExp): InsertAddressesResponse!
    "Insert into the AuditLogs table"
    insertAuditLogs(objects: [InsertAuditLogsObjectInput!]! "Insert permission predicate over the 'AuditLogs' collection" postCheck: AuditLogsBoolExp): InsertAuditLogsResponse!
    "Insert into the auth_audit_log_entries table"
    insertAuthAuditLogEntries(objects: [InsertAuthAuditLogEntriesObjectInput!]! "Insert permission predicate over the 'auth_audit_log_entries' collection" postCheck: AuthAuditLogEntriesBoolExp): InsertAuthAuditLogEntriesResponse!
    "Insert into the auth_flow_state table"
    insertAuthFlowState(objects: [InsertAuthFlowStateObjectInput!]! "Insert permission predicate over the 'auth_flow_state' collection" postCheck: AuthFlowStateBoolExp): InsertAuthFlowStateResponse!
    "Insert into the auth_identities table"
    insertAuthIdentities(objects: [InsertAuthIdentitiesObjectInput!]! "Insert permission predicate over the 'auth_identities' collection" postCheck: AuthIdentitiesBoolExp): InsertAuthIdentitiesResponse!
    "Insert into the auth_instances table"
    insertAuthInstances(objects: [InsertAuthInstancesObjectInput!]! "Insert permission predicate over the 'auth_instances' collection" postCheck: AuthInstancesBoolExp): InsertAuthInstancesResponse!
    "Insert into the auth_mfa_amr_claims table"
    insertAuthMfaAmrClaims(objects: [InsertAuthMfaAmrClaimsObjectInput!]! "Insert permission predicate over the 'auth_mfa_amr_claims' collection" postCheck: AuthMfaAmrClaimsBoolExp): InsertAuthMfaAmrClaimsResponse!
    "Insert into the auth_mfa_challenges table"
    insertAuthMfaChallenges(objects: [InsertAuthMfaChallengesObjectInput!]! "Insert permission predicate over the 'auth_mfa_challenges' collection" postCheck: AuthMfaChallengesBoolExp): InsertAuthMfaChallengesResponse!
    "Insert into the auth_mfa_factors table"
    insertAuthMfaFactors(objects: [InsertAuthMfaFactorsObjectInput!]! "Insert permission predicate over the 'auth_mfa_factors' collection" postCheck: AuthMfaFactorsBoolExp): InsertAuthMfaFactorsResponse!
    "Insert into the auth_one_time_tokens table"
    insertAuthOneTimeTokens(objects: [InsertAuthOneTimeTokensObjectInput!]! "Insert permission predicate over the 'auth_one_time_tokens' collection" postCheck: AuthOneTimeTokensBoolExp): InsertAuthOneTimeTokensResponse!
    "Insert into the auth_refresh_tokens table"
    insertAuthRefreshTokens(objects: [InsertAuthRefreshTokensObjectInput!]! "Insert permission predicate over the 'auth_refresh_tokens' collection" postCheck: AuthRefreshTokensBoolExp): InsertAuthRefreshTokensResponse!
    "Insert into the auth_saml_providers table"
    insertAuthSamlProviders(objects: [InsertAuthSamlProvidersObjectInput!]! "Insert permission predicate over the 'auth_saml_providers' collection" postCheck: AuthSamlProvidersBoolExp): InsertAuthSamlProvidersResponse!
    "Insert into the auth_saml_relay_states table"
    insertAuthSamlRelayStates(objects: [InsertAuthSamlRelayStatesObjectInput!]! "Insert permission predicate over the 'auth_saml_relay_states' collection" postCheck: AuthSamlRelayStatesBoolExp): InsertAuthSamlRelayStatesResponse!
    "Insert into the auth_schema_migrations table"
    insertAuthSchemaMigrations(objects: [InsertAuthSchemaMigrationsObjectInput!]! "Insert permission predicate over the 'auth_schema_migrations' collection" postCheck: AuthSchemaMigrationsBoolExp): InsertAuthSchemaMigrationsResponse!
    "Insert into the auth_sessions table"
    insertAuthSessions(objects: [InsertAuthSessionsObjectInput!]! "Insert permission predicate over the 'auth_sessions' collection" postCheck: AuthSessionsBoolExp): InsertAuthSessionsResponse!
    "Insert into the auth_sso_domains table"
    insertAuthSsoDomains(objects: [InsertAuthSsoDomainsObjectInput!]! "Insert permission predicate over the 'auth_sso_domains' collection" postCheck: AuthSsoDomainsBoolExp): InsertAuthSsoDomainsResponse!
    "Insert into the auth_sso_providers table"
    insertAuthSsoProviders(objects: [InsertAuthSsoProvidersObjectInput!]! "Insert permission predicate over the 'auth_sso_providers' collection" postCheck: AuthSsoProvidersBoolExp): InsertAuthSsoProvidersResponse!
    "Insert into the auth_users table"
    insertAuthUsers(objects: [InsertAuthUsersObjectInput!]! "Insert permission predicate over the 'auth_users' collection" postCheck: AuthUsersBoolExp): InsertAuthUsersResponse!
    "Insert into the CityEntity table"
    insertCityEntity(objects: [InsertCityEntityObjectInput!]! "Insert permission predicate over the 'CityEntity' collection" postCheck: CityEntityBoolExp): InsertCityEntityResponse!
    "Insert into the ContactPersons table"
    insertContactPersons(objects: [InsertContactPersonsObjectInput!]! "Insert permission predicate over the 'ContactPersons' collection" postCheck: ContactPersonsBoolExp): InsertContactPersonsResponse!
    "Insert into the CountryEntity table"
    insertCountryEntity(objects: [InsertCountryEntityObjectInput!]! "Insert permission predicate over the 'CountryEntity' collection" postCheck: CountryEntityBoolExp): InsertCountryEntityResponse!
    "Insert into the Customers table"
    insertCustomers(objects: [InsertCustomersObjectInput!]! "Insert permission predicate over the 'Customers' collection" postCheck: CustomersBoolExp): InsertCustomersResponse!
    "Insert into the __EFMigrationsHistory table"
    insertEfMigrationsHistory(objects: [InsertEfMigrationsHistoryObjectInput!]! "Insert permission predicate over the '__EFMigrationsHistory' collection" postCheck: EfMigrationsHistoryBoolExp): InsertEfMigrationsHistoryResponse!
    "Insert into the EmailAddressEntity table"
    insertEmailAddressEntity(objects: [InsertEmailAddressEntityObjectInput!]! "Insert permission predicate over the 'EmailAddressEntity' collection" postCheck: EmailAddressEntityBoolExp): InsertEmailAddressEntityResponse!
    "Insert into the EmailInviteEntity table"
    insertEmailInviteEntity(objects: [InsertEmailInviteEntityObjectInput!]! "Insert permission predicate over the 'EmailInviteEntity' collection" postCheck: EmailInviteEntityBoolExp): InsertEmailInviteEntityResponse!
    "Insert into the EmailVerificationEntity table"
    insertEmailVerificationEntity(objects: [InsertEmailVerificationEntityObjectInput!]! "Insert permission predicate over the 'EmailVerificationEntity' collection" postCheck: EmailVerificationEntityBoolExp): InsertEmailVerificationEntityResponse!
    "Insert into the extensions_pg_stat_statements_info table"
    insertExtensionsPgStatStatementsInfo(objects: [InsertExtensionsPgStatStatementsInfoObjectInput!]! "Insert permission predicate over the 'extensions_pg_stat_statements_info' collection" postCheck: ExtensionsPgStatStatementsInfoBoolExp): InsertExtensionsPgStatStatementsInfoResponse!
    "Insert into the GlobalRegionEntity table"
    insertGlobalRegionEntity(objects: [InsertGlobalRegionEntityObjectInput!]! "Insert permission predicate over the 'GlobalRegionEntity' collection" postCheck: GlobalRegionEntityBoolExp): InsertGlobalRegionEntityResponse!
    "Insert into the Integrations table"
    insertIntegrations(objects: [InsertIntegrationsObjectInput!]! "Insert permission predicate over the 'Integrations' collection" postCheck: IntegrationsBoolExp): InsertIntegrationsResponse!
    "Insert into the Languages table"
    insertLanguages(objects: [InsertLanguagesObjectInput!]! "Insert permission predicate over the 'Languages' collection" postCheck: LanguagesBoolExp): InsertLanguagesResponse!
    "Insert into the Notifications table"
    insertNotifications(objects: [InsertNotificationsObjectInput!]! "Insert permission predicate over the 'Notifications' collection" postCheck: NotificationsBoolExp): InsertNotificationsResponse!
    "Insert into the Permissions table"
    insertPermissions(objects: [InsertPermissionsObjectInput!]! "Insert permission predicate over the 'Permissions' collection" postCheck: PermissionsBoolExp): InsertPermissionsResponse!
    "Insert into the pgmq_meta table"
    insertPgmqMeta(objects: [InsertPgmqMetaObjectInput!]! "Insert permission predicate over the 'pgmq_meta' collection" postCheck: PgmqMetaBoolExp): InsertPgmqMetaResponse!
    "Insert into the pgsodium_decrypted_key table"
    insertPgsodiumDecryptedKey(objects: [InsertPgsodiumDecryptedKeyObjectInput!]! "Insert permission predicate over the 'pgsodium_decrypted_key' collection" postCheck: PgsodiumDecryptedKeyBoolExp): InsertPgsodiumDecryptedKeyResponse!
    "Insert into the pgsodium_key table"
    insertPgsodiumKey(objects: [InsertPgsodiumKeyObjectInput!]! "Insert permission predicate over the 'pgsodium_key' collection" postCheck: PgsodiumKeyBoolExp): InsertPgsodiumKeyResponse!
    "Insert into the pgsodium_valid_key table"
    insertPgsodiumValidKey(objects: [InsertPgsodiumValidKeyObjectInput!]! "Insert permission predicate over the 'pgsodium_valid_key' collection" postCheck: PgsodiumValidKeyBoolExp): InsertPgsodiumValidKeyResponse!
    "Insert into the PhoneNumbers table"
    insertPhoneNumbers(objects: [InsertPhoneNumbersObjectInput!]! "Insert permission predicate over the 'PhoneNumbers' collection" postCheck: PhoneNumbersBoolExp): InsertPhoneNumbersResponse!
    "Insert into the ProfileEntity table"
    insertProfileEntity(objects: [InsertProfileEntityObjectInput!]! "Insert permission predicate over the 'ProfileEntity' collection" postCheck: ProfileEntityBoolExp): InsertProfileEntityResponse!
    "Insert into the realtime_messages table"
    insertRealtimeMessages(objects: [InsertRealtimeMessagesObjectInput!]! "Insert permission predicate over the 'realtime_messages' collection" postCheck: RealtimeMessagesBoolExp): InsertRealtimeMessagesResponse!
    "Insert into the realtime_schema_migrations table"
    insertRealtimeSchemaMigrations(objects: [InsertRealtimeSchemaMigrationsObjectInput!]! "Insert permission predicate over the 'realtime_schema_migrations' collection" postCheck: RealtimeSchemaMigrationsBoolExp): InsertRealtimeSchemaMigrationsResponse!
    "Insert into the Roles table"
    insertRoles(objects: [InsertRolesObjectInput!]! "Insert permission predicate over the 'Roles' collection" postCheck: RolesBoolExp): InsertRolesResponse!
    "Insert into the StateEntity table"
    insertStateEntity(objects: [InsertStateEntityObjectInput!]! "Insert permission predicate over the 'StateEntity' collection" postCheck: StateEntityBoolExp): InsertStateEntityResponse!
    "Insert into the storage_buckets table"
    insertStorageBuckets(objects: [InsertStorageBucketsObjectInput!]! "Insert permission predicate over the 'storage_buckets' collection" postCheck: StorageBucketsBoolExp): InsertStorageBucketsResponse!
    "Insert into the storage_migrations table"
    insertStorageMigrations(objects: [InsertStorageMigrationsObjectInput!]! "Insert permission predicate over the 'storage_migrations' collection" postCheck: StorageMigrationsBoolExp): InsertStorageMigrationsResponse!
    "Insert into the storage_objects table"
    insertStorageObjects(objects: [InsertStorageObjectsObjectInput!]! "Insert permission predicate over the 'storage_objects' collection" postCheck: StorageObjectsBoolExp): InsertStorageObjectsResponse!
    "Insert into the storage_s3_multipart_uploads table"
    insertStorageS3MultipartUploads(objects: [InsertStorageS3MultipartUploadsObjectInput!]! "Insert permission predicate over the 'storage_s3_multipart_uploads' collection" postCheck: StorageS3MultipartUploadsBoolExp): InsertStorageS3MultipartUploadsResponse!
    "Insert into the storage_s3_multipart_uploads_parts table"
    insertStorageS3MultipartUploadsParts(objects: [InsertStorageS3MultipartUploadsPartsObjectInput!]! "Insert permission predicate over the 'storage_s3_multipart_uploads_parts' collection" postCheck: StorageS3MultipartUploadsPartsBoolExp): InsertStorageS3MultipartUploadsPartsResponse!
    "Insert into the StreetEntity table"
    insertStreetEntity(objects: [InsertStreetEntityObjectInput!]! "Insert permission predicate over the 'StreetEntity' collection" postCheck: StreetEntityBoolExp): InsertStreetEntityResponse!
    "Insert into the TeamInvites table"
    insertTeamInvites(objects: [InsertTeamInvitesObjectInput!]! "Insert permission predicate over the 'TeamInvites' collection" postCheck: TeamInvitesBoolExp): InsertTeamInvitesResponse!
    "Insert into the TeamMembers table"
    insertTeamMembers(objects: [InsertTeamMembersObjectInput!]! "Insert permission predicate over the 'TeamMembers' collection" postCheck: TeamMembersBoolExp): InsertTeamMembersResponse!
    "Insert into the Teams table"
    insertTeams(objects: [InsertTeamsObjectInput!]! "Insert permission predicate over the 'Teams' collection" postCheck: TeamsBoolExp): InsertTeamsResponse!
    "Insert into the Tenants table"
    insertTenants(objects: [InsertTenantsObjectInput!]! "Insert permission predicate over the 'Tenants' collection" postCheck: TenantsBoolExp): InsertTenantsResponse!
    "Insert into the UserRoles table"
    insertUserRoles(objects: [InsertUserRolesObjectInput!]! "Insert permission predicate over the 'UserRoles' collection" postCheck: UserRolesBoolExp): InsertUserRolesResponse!
    "Insert into the Users table"
    insertUsers(objects: [InsertUsersObjectInput!]! "Insert permission predicate over the 'Users' collection" postCheck: UsersBoolExp): InsertUsersResponse!
    "Insert into the vault_decrypted_secrets table"
    insertVaultDecryptedSecrets(objects: [InsertVaultDecryptedSecretsObjectInput!]! "Insert permission predicate over the 'vault_decrypted_secrets' collection" postCheck: VaultDecryptedSecretsBoolExp): InsertVaultDecryptedSecretsResponse!
    "Insert into the vault_secrets table"
    insertVaultSecrets(objects: [InsertVaultSecretsObjectInput!]! "Insert permission predicate over the 'vault_secrets' collection" postCheck: VaultSecretsBoolExp): InsertVaultSecretsResponse!
    "Update any row on the 'Accounts' collection using the 'AccountId' key"
    updateAccountsByAccountId(keyAccountId: Int! "Update permission post-condition predicate over the 'Accounts' collection" postCheck: AccountsBoolExp "Update permission pre-condition predicate over the 'Accounts' collection" preCheck: AccountsBoolExp updateColumns: UpdateAccountsByAccountIdUpdateColumnsInput!): UpdateAccountsByAccountIdResponse!
    "Update any row on the 'Addresses' collection using the 'Id' key"
    updateAddressesById(keyId: Int! "Update permission post-condition predicate over the 'Addresses' collection" postCheck: AddressesBoolExp "Update permission pre-condition predicate over the 'Addresses' collection" preCheck: AddressesBoolExp updateColumns: UpdateAddressesByIdUpdateColumnsInput!): UpdateAddressesByIdResponse!
    "Update any row on the 'AuditLogs' collection using the 'Id' key"
    updateAuditLogsById(keyId: Int! "Update permission post-condition predicate over the 'AuditLogs' collection" postCheck: AuditLogsBoolExp "Update permission pre-condition predicate over the 'AuditLogs' collection" preCheck: AuditLogsBoolExp updateColumns: UpdateAuditLogsByIdUpdateColumnsInput!): UpdateAuditLogsByIdResponse!
    "Update any row on the 'auth_audit_log_entries' collection using the 'id' key"
    updateAuthAuditLogEntriesById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_audit_log_entries' collection" postCheck: AuthAuditLogEntriesBoolExp "Update permission pre-condition predicate over the 'auth_audit_log_entries' collection" preCheck: AuthAuditLogEntriesBoolExp updateColumns: UpdateAuthAuditLogEntriesByIdUpdateColumnsInput!): UpdateAuthAuditLogEntriesByIdResponse!
    "Update any row on the 'auth_flow_state' collection using the 'id' key"
    updateAuthFlowStateById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_flow_state' collection" postCheck: AuthFlowStateBoolExp "Update permission pre-condition predicate over the 'auth_flow_state' collection" preCheck: AuthFlowStateBoolExp updateColumns: UpdateAuthFlowStateByIdUpdateColumnsInput!): UpdateAuthFlowStateByIdResponse!
    "Update any row on the 'auth_identities' collection using the 'id' key"
    updateAuthIdentitiesById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_identities' collection" postCheck: AuthIdentitiesBoolExp "Update permission pre-condition predicate over the 'auth_identities' collection" preCheck: AuthIdentitiesBoolExp updateColumns: UpdateAuthIdentitiesByIdUpdateColumnsInput!): UpdateAuthIdentitiesByIdResponse!
    "Update any row on the 'auth_identities' collection using the 'provider' and 'provider_id' keys"
    updateAuthIdentitiesByProviderAndProviderId(keyProvider: Text! keyProviderId: Text! "Update permission post-condition predicate over the 'auth_identities' collection" postCheck: AuthIdentitiesBoolExp "Update permission pre-condition predicate over the 'auth_identities' collection" preCheck: AuthIdentitiesBoolExp updateColumns: UpdateAuthIdentitiesByProviderAndProviderIdUpdateColumnsInput!): UpdateAuthIdentitiesByProviderAndProviderIdResponse!
    "Update any row on the 'auth_instances' collection using the 'id' key"
    updateAuthInstancesById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_instances' collection" postCheck: AuthInstancesBoolExp "Update permission pre-condition predicate over the 'auth_instances' collection" preCheck: AuthInstancesBoolExp updateColumns: UpdateAuthInstancesByIdUpdateColumnsInput!): UpdateAuthInstancesByIdResponse!
    "Update any row on the 'auth_mfa_amr_claims' collection using the 'authentication_method' and 'session_id' keys"
    updateAuthMfaAmrClaimsByAuthenticationMethodAndSessionId(keyAuthenticationMethod: Text! keySessionId: Uuid! "Update permission post-condition predicate over the 'auth_mfa_amr_claims' collection" postCheck: AuthMfaAmrClaimsBoolExp "Update permission pre-condition predicate over the 'auth_mfa_amr_claims' collection" preCheck: AuthMfaAmrClaimsBoolExp updateColumns: UpdateAuthMfaAmrClaimsByAuthenticationMethodAndSessionIdUpdateColumnsInput!): UpdateAuthMfaAmrClaimsByAuthenticationMethodAndSessionIdResponse!
    "Update any row on the 'auth_mfa_amr_claims' collection using the 'id' key"
    updateAuthMfaAmrClaimsById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_mfa_amr_claims' collection" postCheck: AuthMfaAmrClaimsBoolExp "Update permission pre-condition predicate over the 'auth_mfa_amr_claims' collection" preCheck: AuthMfaAmrClaimsBoolExp updateColumns: UpdateAuthMfaAmrClaimsByIdUpdateColumnsInput!): UpdateAuthMfaAmrClaimsByIdResponse!
    "Update any row on the 'auth_mfa_challenges' collection using the 'id' key"
    updateAuthMfaChallengesById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_mfa_challenges' collection" postCheck: AuthMfaChallengesBoolExp "Update permission pre-condition predicate over the 'auth_mfa_challenges' collection" preCheck: AuthMfaChallengesBoolExp updateColumns: UpdateAuthMfaChallengesByIdUpdateColumnsInput!): UpdateAuthMfaChallengesByIdResponse!
    "Update any row on the 'auth_mfa_factors' collection using the 'id' key"
    updateAuthMfaFactorsById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_mfa_factors' collection" postCheck: AuthMfaFactorsBoolExp "Update permission pre-condition predicate over the 'auth_mfa_factors' collection" preCheck: AuthMfaFactorsBoolExp updateColumns: UpdateAuthMfaFactorsByIdUpdateColumnsInput!): UpdateAuthMfaFactorsByIdResponse!
    "Update any row on the 'auth_mfa_factors' collection using the 'last_challenged_at' key"
    updateAuthMfaFactorsByLastChallengedAt(keyLastChallengedAt: Timestamptz "Update permission post-condition predicate over the 'auth_mfa_factors' collection" postCheck: AuthMfaFactorsBoolExp "Update permission pre-condition predicate over the 'auth_mfa_factors' collection" preCheck: AuthMfaFactorsBoolExp updateColumns: UpdateAuthMfaFactorsByLastChallengedAtUpdateColumnsInput!): UpdateAuthMfaFactorsByLastChallengedAtResponse!
    "Update any row on the 'auth_one_time_tokens' collection using the 'id' key"
    updateAuthOneTimeTokensById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_one_time_tokens' collection" postCheck: AuthOneTimeTokensBoolExp "Update permission pre-condition predicate over the 'auth_one_time_tokens' collection" preCheck: AuthOneTimeTokensBoolExp updateColumns: UpdateAuthOneTimeTokensByIdUpdateColumnsInput!): UpdateAuthOneTimeTokensByIdResponse!
    "Update any row on the 'auth_refresh_tokens' collection using the 'id' key"
    updateAuthRefreshTokensById(keyId: Int8! "Update permission post-condition predicate over the 'auth_refresh_tokens' collection" postCheck: AuthRefreshTokensBoolExp "Update permission pre-condition predicate over the 'auth_refresh_tokens' collection" preCheck: AuthRefreshTokensBoolExp updateColumns: UpdateAuthRefreshTokensByIdUpdateColumnsInput!): UpdateAuthRefreshTokensByIdResponse!
    "Update any row on the 'auth_refresh_tokens' collection using the 'token' key"
    updateAuthRefreshTokensByToken(keyToken: Varchar "Update permission post-condition predicate over the 'auth_refresh_tokens' collection" postCheck: AuthRefreshTokensBoolExp "Update permission pre-condition predicate over the 'auth_refresh_tokens' collection" preCheck: AuthRefreshTokensBoolExp updateColumns: UpdateAuthRefreshTokensByTokenUpdateColumnsInput!): UpdateAuthRefreshTokensByTokenResponse!
    "Update any row on the 'auth_saml_providers' collection using the 'entity_id' key"
    updateAuthSamlProvidersByEntityId(keyEntityId: Text! "Update permission post-condition predicate over the 'auth_saml_providers' collection" postCheck: AuthSamlProvidersBoolExp "Update permission pre-condition predicate over the 'auth_saml_providers' collection" preCheck: AuthSamlProvidersBoolExp updateColumns: UpdateAuthSamlProvidersByEntityIdUpdateColumnsInput!): UpdateAuthSamlProvidersByEntityIdResponse!
    "Update any row on the 'auth_saml_providers' collection using the 'id' key"
    updateAuthSamlProvidersById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_saml_providers' collection" postCheck: AuthSamlProvidersBoolExp "Update permission pre-condition predicate over the 'auth_saml_providers' collection" preCheck: AuthSamlProvidersBoolExp updateColumns: UpdateAuthSamlProvidersByIdUpdateColumnsInput!): UpdateAuthSamlProvidersByIdResponse!
    "Update any row on the 'auth_saml_relay_states' collection using the 'id' key"
    updateAuthSamlRelayStatesById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_saml_relay_states' collection" postCheck: AuthSamlRelayStatesBoolExp "Update permission pre-condition predicate over the 'auth_saml_relay_states' collection" preCheck: AuthSamlRelayStatesBoolExp updateColumns: UpdateAuthSamlRelayStatesByIdUpdateColumnsInput!): UpdateAuthSamlRelayStatesByIdResponse!
    "Update any row on the 'auth_schema_migrations' collection using the 'version' key"
    updateAuthSchemaMigrationsByVersion(keyVersion: Varchar! "Update permission post-condition predicate over the 'auth_schema_migrations' collection" postCheck: AuthSchemaMigrationsBoolExp "Update permission pre-condition predicate over the 'auth_schema_migrations' collection" preCheck: AuthSchemaMigrationsBoolExp updateColumns: UpdateAuthSchemaMigrationsByVersionUpdateColumnsInput!): UpdateAuthSchemaMigrationsByVersionResponse!
    "Update any row on the 'auth_sessions' collection using the 'id' key"
    updateAuthSessionsById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_sessions' collection" postCheck: AuthSessionsBoolExp "Update permission pre-condition predicate over the 'auth_sessions' collection" preCheck: AuthSessionsBoolExp updateColumns: UpdateAuthSessionsByIdUpdateColumnsInput!): UpdateAuthSessionsByIdResponse!
    "Update any row on the 'auth_sso_domains' collection using the 'id' key"
    updateAuthSsoDomainsById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_sso_domains' collection" postCheck: AuthSsoDomainsBoolExp "Update permission pre-condition predicate over the 'auth_sso_domains' collection" preCheck: AuthSsoDomainsBoolExp updateColumns: UpdateAuthSsoDomainsByIdUpdateColumnsInput!): UpdateAuthSsoDomainsByIdResponse!
    "Update any row on the 'auth_sso_providers' collection using the 'id' key"
    updateAuthSsoProvidersById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_sso_providers' collection" postCheck: AuthSsoProvidersBoolExp "Update permission pre-condition predicate over the 'auth_sso_providers' collection" preCheck: AuthSsoProvidersBoolExp updateColumns: UpdateAuthSsoProvidersByIdUpdateColumnsInput!): UpdateAuthSsoProvidersByIdResponse!
    "Update any row on the 'auth_users' collection using the 'id' key"
    updateAuthUsersById(keyId: Uuid! "Update permission post-condition predicate over the 'auth_users' collection" postCheck: AuthUsersBoolExp "Update permission pre-condition predicate over the 'auth_users' collection" preCheck: AuthUsersBoolExp updateColumns: UpdateAuthUsersByIdUpdateColumnsInput!): UpdateAuthUsersByIdResponse!
    "Update any row on the 'auth_users' collection using the 'phone' key"
    updateAuthUsersByPhone(keyPhone: Text "Update permission post-condition predicate over the 'auth_users' collection" postCheck: AuthUsersBoolExp "Update permission pre-condition predicate over the 'auth_users' collection" preCheck: AuthUsersBoolExp updateColumns: UpdateAuthUsersByPhoneUpdateColumnsInput!): UpdateAuthUsersByPhoneResponse!
    "Update any row on the 'CityEntity' collection using the 'Id' key"
    updateCityEntityById(keyId: Int! "Update permission post-condition predicate over the 'CityEntity' collection" postCheck: CityEntityBoolExp "Update permission pre-condition predicate over the 'CityEntity' collection" preCheck: CityEntityBoolExp updateColumns: UpdateCityEntityByIdUpdateColumnsInput!): UpdateCityEntityByIdResponse!
    "Update any row on the 'ContactPersons' collection using the 'Id' key"
    updateContactPersonsById(keyId: Int! "Update permission post-condition predicate over the 'ContactPersons' collection" postCheck: ContactPersonsBoolExp "Update permission pre-condition predicate over the 'ContactPersons' collection" preCheck: ContactPersonsBoolExp updateColumns: UpdateContactPersonsByIdUpdateColumnsInput!): UpdateContactPersonsByIdResponse!
    "Update any row on the 'CountryEntity' collection using the 'Id' key"
    updateCountryEntityById(keyId: Int! "Update permission post-condition predicate over the 'CountryEntity' collection" postCheck: CountryEntityBoolExp "Update permission pre-condition predicate over the 'CountryEntity' collection" preCheck: CountryEntityBoolExp updateColumns: UpdateCountryEntityByIdUpdateColumnsInput!): UpdateCountryEntityByIdResponse!
    "Update any row on the 'Customers' collection using the 'Id' key"
    updateCustomersById(keyId: Int! "Update permission post-condition predicate over the 'Customers' collection" postCheck: CustomersBoolExp "Update permission pre-condition predicate over the 'Customers' collection" preCheck: CustomersBoolExp updateColumns: UpdateCustomersByIdUpdateColumnsInput!): UpdateCustomersByIdResponse!
    "Update any row on the '__EFMigrationsHistory' collection using the 'MigrationId' key"
    updateEfMigrationsHistoryByMigrationId(keyMigrationId: Varchar! "Update permission post-condition predicate over the '__EFMigrationsHistory' collection" postCheck: EfMigrationsHistoryBoolExp "Update permission pre-condition predicate over the '__EFMigrationsHistory' collection" preCheck: EfMigrationsHistoryBoolExp updateColumns: UpdateEfMigrationsHistoryByMigrationIdUpdateColumnsInput!): UpdateEfMigrationsHistoryByMigrationIdResponse!
    "Update any row on the 'EmailAddressEntity' collection using the 'Id' key"
    updateEmailAddressEntityById(keyId: Int! "Update permission post-condition predicate over the 'EmailAddressEntity' collection" postCheck: EmailAddressEntityBoolExp "Update permission pre-condition predicate over the 'EmailAddressEntity' collection" preCheck: EmailAddressEntityBoolExp updateColumns: UpdateEmailAddressEntityByIdUpdateColumnsInput!): UpdateEmailAddressEntityByIdResponse!
    "Update any row on the 'EmailInviteEntity' collection using the 'Id' key"
    updateEmailInviteEntityById(keyId: Int! "Update permission post-condition predicate over the 'EmailInviteEntity' collection" postCheck: EmailInviteEntityBoolExp "Update permission pre-condition predicate over the 'EmailInviteEntity' collection" preCheck: EmailInviteEntityBoolExp updateColumns: UpdateEmailInviteEntityByIdUpdateColumnsInput!): UpdateEmailInviteEntityByIdResponse!
    "Update any row on the 'EmailVerificationEntity' collection using the 'Id' key"
    updateEmailVerificationEntityById(keyId: Int! "Update permission post-condition predicate over the 'EmailVerificationEntity' collection" postCheck: EmailVerificationEntityBoolExp "Update permission pre-condition predicate over the 'EmailVerificationEntity' collection" preCheck: EmailVerificationEntityBoolExp updateColumns: UpdateEmailVerificationEntityByIdUpdateColumnsInput!): UpdateEmailVerificationEntityByIdResponse!
    "Update any row on the 'GlobalRegionEntity' collection using the 'Id' key"
    updateGlobalRegionEntityById(keyId: Int! "Update permission post-condition predicate over the 'GlobalRegionEntity' collection" postCheck: GlobalRegionEntityBoolExp "Update permission pre-condition predicate over the 'GlobalRegionEntity' collection" preCheck: GlobalRegionEntityBoolExp updateColumns: UpdateGlobalRegionEntityByIdUpdateColumnsInput!): UpdateGlobalRegionEntityByIdResponse!
    "Update any row on the 'Integrations' collection using the 'Id' key"
    updateIntegrationsById(keyId: Int! "Update permission post-condition predicate over the 'Integrations' collection" postCheck: IntegrationsBoolExp "Update permission pre-condition predicate over the 'Integrations' collection" preCheck: IntegrationsBoolExp updateColumns: UpdateIntegrationsByIdUpdateColumnsInput!): UpdateIntegrationsByIdResponse!
    "Update any row on the 'Languages' collection using the 'Id' key"
    updateLanguagesById(keyId: Int! "Update permission post-condition predicate over the 'Languages' collection" postCheck: LanguagesBoolExp "Update permission pre-condition predicate over the 'Languages' collection" preCheck: LanguagesBoolExp updateColumns: UpdateLanguagesByIdUpdateColumnsInput!): UpdateLanguagesByIdResponse!
    "Update any row on the 'Notifications' collection using the 'Id' key"
    updateNotificationsById(keyId: Int! "Update permission post-condition predicate over the 'Notifications' collection" postCheck: NotificationsBoolExp "Update permission pre-condition predicate over the 'Notifications' collection" preCheck: NotificationsBoolExp updateColumns: UpdateNotificationsByIdUpdateColumnsInput!): UpdateNotificationsByIdResponse!
    "Update any row on the 'Permissions' collection using the 'Id' key"
    updatePermissionsById(keyId: Int! "Update permission post-condition predicate over the 'Permissions' collection" postCheck: PermissionsBoolExp "Update permission pre-condition predicate over the 'Permissions' collection" preCheck: PermissionsBoolExp updateColumns: UpdatePermissionsByIdUpdateColumnsInput!): UpdatePermissionsByIdResponse!
    "Update any row on the 'pgmq_meta' collection using the 'queue_name' key"
    updatePgmqMetaByQueueName(keyQueueName: Varchar! "Update permission post-condition predicate over the 'pgmq_meta' collection" postCheck: PgmqMetaBoolExp "Update permission pre-condition predicate over the 'pgmq_meta' collection" preCheck: PgmqMetaBoolExp updateColumns: UpdatePgmqMetaByQueueNameUpdateColumnsInput!): UpdatePgmqMetaByQueueNameResponse!
    "Update any row on the 'pgsodium_key' collection using the 'id' key"
    updatePgsodiumKeyById(keyId: Uuid! "Update permission post-condition predicate over the 'pgsodium_key' collection" postCheck: PgsodiumKeyBoolExp "Update permission pre-condition predicate over the 'pgsodium_key' collection" preCheck: PgsodiumKeyBoolExp updateColumns: UpdatePgsodiumKeyByIdUpdateColumnsInput!): UpdatePgsodiumKeyByIdResponse!
    "Update any row on the 'pgsodium_key' collection using the 'name' key"
    updatePgsodiumKeyByName(keyName: Text "Update permission post-condition predicate over the 'pgsodium_key' collection" postCheck: PgsodiumKeyBoolExp "Update permission pre-condition predicate over the 'pgsodium_key' collection" preCheck: PgsodiumKeyBoolExp updateColumns: UpdatePgsodiumKeyByNameUpdateColumnsInput!): UpdatePgsodiumKeyByNameResponse!
    "Update any row on the 'PhoneNumbers' collection using the 'Id' key"
    updatePhoneNumbersById(keyId: Int! "Update permission post-condition predicate over the 'PhoneNumbers' collection" postCheck: PhoneNumbersBoolExp "Update permission pre-condition predicate over the 'PhoneNumbers' collection" preCheck: PhoneNumbersBoolExp updateColumns: UpdatePhoneNumbersByIdUpdateColumnsInput!): UpdatePhoneNumbersByIdResponse!
    "Update any row on the 'ProfileEntity' collection using the 'Id' key"
    updateProfileEntityById(keyId: Int! "Update permission post-condition predicate over the 'ProfileEntity' collection" postCheck: ProfileEntityBoolExp "Update permission pre-condition predicate over the 'ProfileEntity' collection" preCheck: ProfileEntityBoolExp updateColumns: UpdateProfileEntityByIdUpdateColumnsInput!): UpdateProfileEntityByIdResponse!
    "Update any row on the 'realtime_messages' collection using the 'id' and 'inserted_at' keys"
    updateRealtimeMessagesByIdAndInsertedAt(keyId: Uuid! keyInsertedAt: Timestamp! "Update permission post-condition predicate over the 'realtime_messages' collection" postCheck: RealtimeMessagesBoolExp "Update permission pre-condition predicate over the 'realtime_messages' collection" preCheck: RealtimeMessagesBoolExp updateColumns: UpdateRealtimeMessagesByIdAndInsertedAtUpdateColumnsInput!): UpdateRealtimeMessagesByIdAndInsertedAtResponse!
    "Update any row on the 'realtime_schema_migrations' collection using the 'version' key"
    updateRealtimeSchemaMigrationsByVersion(keyVersion: Int8! "Update permission post-condition predicate over the 'realtime_schema_migrations' collection" postCheck: RealtimeSchemaMigrationsBoolExp "Update permission pre-condition predicate over the 'realtime_schema_migrations' collection" preCheck: RealtimeSchemaMigrationsBoolExp updateColumns: UpdateRealtimeSchemaMigrationsByVersionUpdateColumnsInput!): UpdateRealtimeSchemaMigrationsByVersionResponse!
    "Update any row on the 'Roles' collection using the 'Id' key"
    updateRolesById(keyId: Int! "Update permission post-condition predicate over the 'Roles' collection" postCheck: RolesBoolExp "Update permission pre-condition predicate over the 'Roles' collection" preCheck: RolesBoolExp updateColumns: UpdateRolesByIdUpdateColumnsInput!): UpdateRolesByIdResponse!
    "Update any row on the 'StateEntity' collection using the 'Id' key"
    updateStateEntityById(keyId: Int! "Update permission post-condition predicate over the 'StateEntity' collection" postCheck: StateEntityBoolExp "Update permission pre-condition predicate over the 'StateEntity' collection" preCheck: StateEntityBoolExp updateColumns: UpdateStateEntityByIdUpdateColumnsInput!): UpdateStateEntityByIdResponse!
    "Update any row on the 'storage_buckets' collection using the 'id' key"
    updateStorageBucketsById(keyId: Text! "Update permission post-condition predicate over the 'storage_buckets' collection" postCheck: StorageBucketsBoolExp "Update permission pre-condition predicate over the 'storage_buckets' collection" preCheck: StorageBucketsBoolExp updateColumns: UpdateStorageBucketsByIdUpdateColumnsInput!): UpdateStorageBucketsByIdResponse!
    "Update any row on the 'storage_migrations' collection using the 'id' key"
    updateStorageMigrationsById(keyId: Int! "Update permission post-condition predicate over the 'storage_migrations' collection" postCheck: StorageMigrationsBoolExp "Update permission pre-condition predicate over the 'storage_migrations' collection" preCheck: StorageMigrationsBoolExp updateColumns: UpdateStorageMigrationsByIdUpdateColumnsInput!): UpdateStorageMigrationsByIdResponse!
    "Update any row on the 'storage_migrations' collection using the 'name' key"
    updateStorageMigrationsByName(keyName: Varchar! "Update permission post-condition predicate over the 'storage_migrations' collection" postCheck: StorageMigrationsBoolExp "Update permission pre-condition predicate over the 'storage_migrations' collection" preCheck: StorageMigrationsBoolExp updateColumns: UpdateStorageMigrationsByNameUpdateColumnsInput!): UpdateStorageMigrationsByNameResponse!
    "Update any row on the 'storage_objects' collection using the 'id' key"
    updateStorageObjectsById(keyId: Uuid! "Update permission post-condition predicate over the 'storage_objects' collection" postCheck: StorageObjectsBoolExp "Update permission pre-condition predicate over the 'storage_objects' collection" preCheck: StorageObjectsBoolExp updateColumns: UpdateStorageObjectsByIdUpdateColumnsInput!): UpdateStorageObjectsByIdResponse!
    "Update any row on the 'storage_s3_multipart_uploads' collection using the 'id' key"
    updateStorageS3MultipartUploadsById(keyId: Text! "Update permission post-condition predicate over the 'storage_s3_multipart_uploads' collection" postCheck: StorageS3MultipartUploadsBoolExp "Update permission pre-condition predicate over the 'storage_s3_multipart_uploads' collection" preCheck: StorageS3MultipartUploadsBoolExp updateColumns: UpdateStorageS3MultipartUploadsByIdUpdateColumnsInput!): UpdateStorageS3MultipartUploadsByIdResponse!
    "Update any row on the 'storage_s3_multipart_uploads_parts' collection using the 'id' key"
    updateStorageS3MultipartUploadsPartsById(keyId: Uuid! "Update permission post-condition predicate over the 'storage_s3_multipart_uploads_parts' collection" postCheck: StorageS3MultipartUploadsPartsBoolExp "Update permission pre-condition predicate over the 'storage_s3_multipart_uploads_parts' collection" preCheck: StorageS3MultipartUploadsPartsBoolExp updateColumns: UpdateStorageS3MultipartUploadsPartsByIdUpdateColumnsInput!): UpdateStorageS3MultipartUploadsPartsByIdResponse!
    "Update any row on the 'StreetEntity' collection using the 'Id' key"
    updateStreetEntityById(keyId: Int! "Update permission post-condition predicate over the 'StreetEntity' collection" postCheck: StreetEntityBoolExp "Update permission pre-condition predicate over the 'StreetEntity' collection" preCheck: StreetEntityBoolExp updateColumns: UpdateStreetEntityByIdUpdateColumnsInput!): UpdateStreetEntityByIdResponse!
    "Update any row on the 'TeamInvites' collection using the 'Id' key"
    updateTeamInvitesById(keyId: Int! "Update permission post-condition predicate over the 'TeamInvites' collection" postCheck: TeamInvitesBoolExp "Update permission pre-condition predicate over the 'TeamInvites' collection" preCheck: TeamInvitesBoolExp updateColumns: UpdateTeamInvitesByIdUpdateColumnsInput!): UpdateTeamInvitesByIdResponse!
    "Update any row on the 'TeamMembers' collection using the 'Id' key"
    updateTeamMembersById(keyId: Int! "Update permission post-condition predicate over the 'TeamMembers' collection" postCheck: TeamMembersBoolExp "Update permission pre-condition predicate over the 'TeamMembers' collection" preCheck: TeamMembersBoolExp updateColumns: UpdateTeamMembersByIdUpdateColumnsInput!): UpdateTeamMembersByIdResponse!
    "Update any row on the 'Teams' collection using the 'Id' key"
    updateTeamsById(keyId: Int! "Update permission post-condition predicate over the 'Teams' collection" postCheck: TeamsBoolExp "Update permission pre-condition predicate over the 'Teams' collection" preCheck: TeamsBoolExp updateColumns: UpdateTeamsByIdUpdateColumnsInput!): UpdateTeamsByIdResponse!
    "Update any row on the 'Tenants' collection using the 'Id' key"
    updateTenantsById(keyId: Int! "Update permission post-condition predicate over the 'Tenants' collection" postCheck: TenantsBoolExp "Update permission pre-condition predicate over the 'Tenants' collection" preCheck: TenantsBoolExp updateColumns: UpdateTenantsByIdUpdateColumnsInput!): UpdateTenantsByIdResponse!
    "Update any row on the 'UserRoles' collection using the 'Id' key"
    updateUserRolesById(keyId: Int! "Update permission post-condition predicate over the 'UserRoles' collection" postCheck: UserRolesBoolExp "Update permission pre-condition predicate over the 'UserRoles' collection" preCheck: UserRolesBoolExp updateColumns: UpdateUserRolesByIdUpdateColumnsInput!): UpdateUserRolesByIdResponse!
    "Update any row on the 'Users' collection using the 'Id' key"
    updateUsersById(keyId: Int! "Update permission post-condition predicate over the 'Users' collection" postCheck: UsersBoolExp "Update permission pre-condition predicate over the 'Users' collection" preCheck: UsersBoolExp updateColumns: UpdateUsersByIdUpdateColumnsInput!): UpdateUsersByIdResponse!
    "Update any row on the 'vault_secrets' collection using the 'id' key"
    updateVaultSecretsById(keyId: Uuid! "Update permission post-condition predicate over the 'vault_secrets' collection" postCheck: VaultSecretsBoolExp "Update permission pre-condition predicate over the 'vault_secrets' collection" preCheck: VaultSecretsBoolExp updateColumns: UpdateVaultSecretsByIdUpdateColumnsInput!): UpdateVaultSecretsByIdResponse!
}

type Notifications {
    createdAt: Timestamptz!
    id: Int!
    isRead: Bool!
    message: Varchar!
    title: Varchar!
    user: Users
    userId: Int!
}

type NotificationsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    id: IntAggExp!
    isRead: BoolAggExp!
    message: VarcharAggExp!
    title: VarcharAggExp!
    userId: IntAggExp!
}

input NotificationsBoolExp {
    _and: [NotificationsBoolExp!]
    _not: NotificationsBoolExp
    _or: [NotificationsBoolExp!]
    createdAt: TimestamptzBoolExp
    id: IntBoolExp
    isRead: BoolBoolExp
    message: VarcharBoolExp
    title: VarcharBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input NotificationsFilterInput {
    limit: Int
    offset: Int
    order_by: [NotificationsOrderBy!]
    where: NotificationsBoolExp
}

input NotificationsOrderBy {
    createdAt: OrderBy
    id: OrderBy
    isRead: OrderBy
    message: OrderBy
    title: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

scalar Numeric

enum OrderBy {
    "Sorts the data in ascending order"
    Asc
    "Sorts the data in descending order"
    Desc
}

type Permissions {
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    role: Roles
    roleEntityId: Int
}

type PermissionsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    description: VarcharAggExp!
    id: IntAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    name: VarcharAggExp!
    roleEntityId: IntAggExp!
}

input PermissionsBoolExp {
    _and: [PermissionsBoolExp!]
    _not: PermissionsBoolExp
    _or: [PermissionsBoolExp!]
    createdAt: TimestamptzBoolExp
    description: VarcharBoolExp
    id: IntBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    name: VarcharBoolExp
    role: RolesBoolExp
    roleEntityId: IntBoolExp
}

input PermissionsFilterInput {
    limit: Int
    offset: Int
    order_by: [PermissionsOrderBy!]
    where: PermissionsBoolExp
}

input PermissionsOrderBy {
    createdAt: OrderBy
    description: OrderBy
    id: OrderBy
    lastUpdatedAt: OrderBy
    name: OrderBy
    role: RolesOrderBy
    roleEntityId: OrderBy
}

type PgmqMeta {
    createdAt: Timestamptz!
    isPartitioned: Bool!
    isUnlogged: Bool!
    queueName: Varchar!
}

type PgmqMetaAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    isPartitioned: BoolAggExp!
    isUnlogged: BoolAggExp!
    queueName: VarcharAggExp!
}

input PgmqMetaBoolExp {
    _and: [PgmqMetaBoolExp!]
    _not: PgmqMetaBoolExp
    _or: [PgmqMetaBoolExp!]
    createdAt: TimestamptzBoolExp
    isPartitioned: BoolBoolExp
    isUnlogged: BoolBoolExp
    queueName: VarcharBoolExp
}

input PgmqMetaFilterInput {
    limit: Int
    offset: Int
    order_by: [PgmqMetaOrderBy!]
    where: PgmqMetaBoolExp
}

input PgmqMetaOrderBy {
    createdAt: OrderBy
    isPartitioned: OrderBy
    isUnlogged: OrderBy
    queueName: OrderBy
}

type PgsodiumDecryptedKey {
    associatedData: Text
    comment: Text
    created: Timestamptz
    decryptedRawKey: Bytea
    expires: Timestamptz
    id: Uuid
    keyContext: Bytea
    keyId: Int8
    keyType: PgsodiumKeyType
    name: Text
    parentKey: Uuid
    rawKey: Bytea
    rawKeyNonce: Bytea
    status: PgsodiumKeyStatus
}

type PgsodiumDecryptedKeyAggExp {
    _count: Int!
    associatedData: TextAggExp!
    comment: TextAggExp!
    created: TimestamptzAggExp!
    decryptedRawKey: ByteaAggExp!
    expires: TimestamptzAggExp!
    id: UuidAggExp!
    keyContext: ByteaAggExp!
    keyId: Int8AggExp!
    keyType: PgsodiumKeyTypeAggExp!
    name: TextAggExp!
    parentKey: UuidAggExp!
    rawKey: ByteaAggExp!
    rawKeyNonce: ByteaAggExp!
    status: PgsodiumKeyStatusAggExp!
}

input PgsodiumDecryptedKeyBoolExp {
    _and: [PgsodiumDecryptedKeyBoolExp!]
    _not: PgsodiumDecryptedKeyBoolExp
    _or: [PgsodiumDecryptedKeyBoolExp!]
    associatedData: TextBoolExp
    comment: TextBoolExp
    created: TimestamptzBoolExp
    decryptedRawKey: ByteaBoolExp
    expires: TimestamptzBoolExp
    id: UuidBoolExp
    keyContext: ByteaBoolExp
    keyId: Int8BoolExp
    keyType: PgsodiumKeyTypeBoolExp
    name: TextBoolExp
    parentKey: UuidBoolExp
    rawKey: ByteaBoolExp
    rawKeyNonce: ByteaBoolExp
    status: PgsodiumKeyStatusBoolExp
}

input PgsodiumDecryptedKeyFilterInput {
    limit: Int
    offset: Int
    order_by: [PgsodiumDecryptedKeyOrderBy!]
    where: PgsodiumDecryptedKeyBoolExp
}

input PgsodiumDecryptedKeyOrderBy {
    associatedData: OrderBy
    comment: OrderBy
    created: OrderBy
    decryptedRawKey: OrderBy
    expires: OrderBy
    id: OrderBy
    keyContext: OrderBy
    keyId: OrderBy
    keyType: OrderBy
    name: OrderBy
    parentKey: OrderBy
    rawKey: OrderBy
    rawKeyNonce: OrderBy
    status: OrderBy
}

"This table holds metadata for derived keys given a key_id and key_context. The raw key is never stored."
type PgsodiumKey {
    associatedData: Text
    comment: Text
    created: Timestamptz!
    expires: Timestamptz
    id: Uuid!
    keyContext: Bytea
    keyId: Int8
    keyType: PgsodiumKeyType
    name: Text
    parentKey: Uuid
    pgsodiumKey: PgsodiumKey
    pgsodiumKeys(limit: Int offset: Int order_by: [PgsodiumKeyOrderBy!] where: PgsodiumKeyBoolExp): [PgsodiumKey!]
    pgsodiumKeysAggregate(filter_input: PgsodiumKeyFilterInput): PgsodiumKeyAggExp!
    rawKey: Bytea
    rawKeyNonce: Bytea
    status: PgsodiumKeyStatus
    userData: Text
    vaultSecrets(limit: Int offset: Int order_by: [VaultSecretsOrderBy!] where: VaultSecretsBoolExp): [VaultSecrets!]
    vaultSecretsAggregate(filter_input: VaultSecretsFilterInput): VaultSecretsAggExp!
}

type PgsodiumKeyAggExp {
    _count: Int!
    associatedData: TextAggExp!
    comment: TextAggExp!
    created: TimestamptzAggExp!
    expires: TimestamptzAggExp!
    id: UuidAggExp!
    keyContext: ByteaAggExp!
    keyId: Int8AggExp!
    keyType: PgsodiumKeyTypeAggExp!
    name: TextAggExp!
    parentKey: UuidAggExp!
    rawKey: ByteaAggExp!
    rawKeyNonce: ByteaAggExp!
    status: PgsodiumKeyStatusAggExp!
    userData: TextAggExp!
}

input PgsodiumKeyBoolExp {
    _and: [PgsodiumKeyBoolExp!]
    _not: PgsodiumKeyBoolExp
    _or: [PgsodiumKeyBoolExp!]
    associatedData: TextBoolExp
    comment: TextBoolExp
    created: TimestamptzBoolExp
    expires: TimestamptzBoolExp
    id: UuidBoolExp
    keyContext: ByteaBoolExp
    keyId: Int8BoolExp
    keyType: PgsodiumKeyTypeBoolExp
    name: TextBoolExp
    parentKey: UuidBoolExp
    pgsodiumKey: PgsodiumKeyBoolExp
    pgsodiumKeys: PgsodiumKeyBoolExp
    rawKey: ByteaBoolExp
    rawKeyNonce: ByteaBoolExp
    status: PgsodiumKeyStatusBoolExp
    userData: TextBoolExp
    vaultSecrets: VaultSecretsBoolExp
}

input PgsodiumKeyFilterInput {
    limit: Int
    offset: Int
    order_by: [PgsodiumKeyOrderBy!]
    where: PgsodiumKeyBoolExp
}

input PgsodiumKeyOrderBy {
    associatedData: OrderBy
    comment: OrderBy
    created: OrderBy
    expires: OrderBy
    id: OrderBy
    keyContext: OrderBy
    keyId: OrderBy
    keyType: OrderBy
    name: OrderBy
    parentKey: OrderBy
    pgsodiumKey: PgsodiumKeyOrderBy
    rawKey: OrderBy
    rawKeyNonce: OrderBy
    status: OrderBy
    userData: OrderBy
}

scalar PgsodiumKeyStatus

type PgsodiumKeyStatusAggExp {
    _count: Int!
    _count_distinct: Int!
    max: PgsodiumKeyStatus
    min: PgsodiumKeyStatus
}

input PgsodiumKeyStatusBoolExp {
    _eq: PgsodiumKeyStatus
    _gt: PgsodiumKeyStatus
    _gte: PgsodiumKeyStatus
    _in: [PgsodiumKeyStatus!]
    _is_null: Boolean
    _lt: PgsodiumKeyStatus
    _lte: PgsodiumKeyStatus
    _neq: PgsodiumKeyStatus
}

scalar PgsodiumKeyType

type PgsodiumKeyTypeAggExp {
    _count: Int!
    _count_distinct: Int!
    max: PgsodiumKeyType
    min: PgsodiumKeyType
}

input PgsodiumKeyTypeBoolExp {
    _eq: PgsodiumKeyType
    _gt: PgsodiumKeyType
    _gte: PgsodiumKeyType
    _in: [PgsodiumKeyType!]
    _is_null: Boolean
    _lt: PgsodiumKeyType
    _lte: PgsodiumKeyType
    _neq: PgsodiumKeyType
}

type PgsodiumValidKey {
    associatedData: Text
    created: Timestamptz
    expires: Timestamptz
    id: Uuid
    keyContext: Bytea
    keyId: Int8
    keyType: PgsodiumKeyType
    name: Text
    status: PgsodiumKeyStatus
}

type PgsodiumValidKeyAggExp {
    _count: Int!
    associatedData: TextAggExp!
    created: TimestamptzAggExp!
    expires: TimestamptzAggExp!
    id: UuidAggExp!
    keyContext: ByteaAggExp!
    keyId: Int8AggExp!
    keyType: PgsodiumKeyTypeAggExp!
    name: TextAggExp!
    status: PgsodiumKeyStatusAggExp!
}

input PgsodiumValidKeyBoolExp {
    _and: [PgsodiumValidKeyBoolExp!]
    _not: PgsodiumValidKeyBoolExp
    _or: [PgsodiumValidKeyBoolExp!]
    associatedData: TextBoolExp
    created: TimestamptzBoolExp
    expires: TimestamptzBoolExp
    id: UuidBoolExp
    keyContext: ByteaBoolExp
    keyId: Int8BoolExp
    keyType: PgsodiumKeyTypeBoolExp
    name: TextBoolExp
    status: PgsodiumKeyStatusBoolExp
}

input PgsodiumValidKeyFilterInput {
    limit: Int
    offset: Int
    order_by: [PgsodiumValidKeyOrderBy!]
    where: PgsodiumValidKeyBoolExp
}

input PgsodiumValidKeyOrderBy {
    associatedData: OrderBy
    created: OrderBy
    expires: OrderBy
    id: OrderBy
    keyContext: OrderBy
    keyId: OrderBy
    keyType: OrderBy
    name: OrderBy
    status: OrderBy
}

type PhoneNumbers {
    contactPerson: ContactPersons
    contactPersonId: Int!
    countryCode: Varchar!
    createdAt: Timestamptz!
    customer: Customers
    customerId: Int
    id: Int!
    isPrimary: Bool!
    isVerified: Bool!
    lastUpdatedAt: Timestamptz
    number: Varchar!
    tenant: Tenants
    tenantId: Int
    user: Users
    userId: Int!
}

type PhoneNumbersAggExp {
    _count: Int!
    contactPersonId: IntAggExp!
    countryCode: VarcharAggExp!
    createdAt: TimestamptzAggExp!
    customerId: IntAggExp!
    id: IntAggExp!
    isPrimary: BoolAggExp!
    isVerified: BoolAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    number: VarcharAggExp!
    tenantId: IntAggExp!
    userId: IntAggExp!
}

input PhoneNumbersBoolExp {
    _and: [PhoneNumbersBoolExp!]
    _not: PhoneNumbersBoolExp
    _or: [PhoneNumbersBoolExp!]
    contactPerson: ContactPersonsBoolExp
    contactPersonId: IntBoolExp
    countryCode: VarcharBoolExp
    createdAt: TimestamptzBoolExp
    customer: CustomersBoolExp
    customerId: IntBoolExp
    id: IntBoolExp
    isPrimary: BoolBoolExp
    isVerified: BoolBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    number: VarcharBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input PhoneNumbersFilterInput {
    limit: Int
    offset: Int
    order_by: [PhoneNumbersOrderBy!]
    where: PhoneNumbersBoolExp
}

input PhoneNumbersOrderBy {
    contactPerson: ContactPersonsOrderBy
    contactPersonId: OrderBy
    countryCode: OrderBy
    createdAt: OrderBy
    customer: CustomersOrderBy
    customerId: OrderBy
    id: OrderBy
    isPrimary: OrderBy
    isVerified: OrderBy
    lastUpdatedAt: OrderBy
    number: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

type ProfileEntity {
    avatar: Varchar!
    createdAt: Timestamptz!
    dateOfBirth: Timestamptz!
    firstName: Varchar!
    gender: Int
    id: Int!
    isActive: Bool!
    language: Varchar!
    lastLogin: Timestamptz!
    lastName: Varchar!
    slug: Varchar!
    timezone: Timestamptz!
    userName: Varchar!
    users(limit: Int offset: Int order_by: [UsersOrderBy!] where: UsersBoolExp): [Users!]
    usersAggregate(filter_input: UsersFilterInput): UsersAggExp!
}

type ProfileEntityAggExp {
    _count: Int!
    avatar: VarcharAggExp!
    createdAt: TimestamptzAggExp!
    dateOfBirth: TimestamptzAggExp!
    firstName: VarcharAggExp!
    gender: IntAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    language: VarcharAggExp!
    lastLogin: TimestamptzAggExp!
    lastName: VarcharAggExp!
    slug: VarcharAggExp!
    timezone: TimestamptzAggExp!
    userName: VarcharAggExp!
}

input ProfileEntityBoolExp {
    _and: [ProfileEntityBoolExp!]
    _not: ProfileEntityBoolExp
    _or: [ProfileEntityBoolExp!]
    avatar: VarcharBoolExp
    createdAt: TimestamptzBoolExp
    dateOfBirth: TimestamptzBoolExp
    firstName: VarcharBoolExp
    gender: IntBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    language: VarcharBoolExp
    lastLogin: TimestamptzBoolExp
    lastName: VarcharBoolExp
    slug: VarcharBoolExp
    timezone: TimestamptzBoolExp
    userName: VarcharBoolExp
    users: UsersBoolExp
}

input ProfileEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [ProfileEntityOrderBy!]
    where: ProfileEntityBoolExp
}

input ProfileEntityOrderBy {
    avatar: OrderBy
    createdAt: OrderBy
    dateOfBirth: OrderBy
    firstName: OrderBy
    gender: OrderBy
    id: OrderBy
    isActive: OrderBy
    language: OrderBy
    lastLogin: OrderBy
    lastName: OrderBy
    slug: OrderBy
    timezone: OrderBy
    userName: OrderBy
}

type Query {
    accounts(limit: Int offset: Int order_by: [AccountsOrderBy!] where: AccountsBoolExp): [Accounts!]
    accountsAggregate(filter_input: AccountsFilterInput): AccountsAggExp
    accountsByAccountId(accountId: Int!): Accounts
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp
    addressesById(id: Int!): Addresses
    auditLogs(limit: Int offset: Int order_by: [AuditLogsOrderBy!] where: AuditLogsBoolExp): [AuditLogs!]
    auditLogsAggregate(filter_input: AuditLogsFilterInput): AuditLogsAggExp
    auditLogsById(id: Int!): AuditLogs
    "Selects multiple objects from the model. Model description: Auth: Audit trail for user actions."
    authAuditLogEntries(limit: Int offset: Int order_by: [AuthAuditLogEntriesOrderBy!] where: AuthAuditLogEntriesBoolExp): [AuthAuditLogEntries!]
    authAuditLogEntriesAggregate(filter_input: AuthAuditLogEntriesFilterInput): AuthAuditLogEntriesAggExp
    "Selects a single object from the model. Model description: Auth: Audit trail for user actions."
    authAuditLogEntriesById(id: Uuid!): AuthAuditLogEntries
    "Selects multiple objects from the model. Model description: stores metadata for pkce logins"
    authFlowState(limit: Int offset: Int order_by: [AuthFlowStateOrderBy!] where: AuthFlowStateBoolExp): [AuthFlowState!]
    authFlowStateAggregate(filter_input: AuthFlowStateFilterInput): AuthFlowStateAggExp
    "Selects a single object from the model. Model description: stores metadata for pkce logins"
    authFlowStateById(id: Uuid!): AuthFlowState
    "Selects multiple objects from the model. Model description: Auth: Stores identities associated to a user."
    authIdentities(limit: Int offset: Int order_by: [AuthIdentitiesOrderBy!] where: AuthIdentitiesBoolExp): [AuthIdentities!]
    authIdentitiesAggregate(filter_input: AuthIdentitiesFilterInput): AuthIdentitiesAggExp
    "Selects a single object from the model. Model description: Auth: Stores identities associated to a user."
    authIdentitiesById(id: Uuid!): AuthIdentities
    "Selects a single object from the model. Model description: Auth: Stores identities associated to a user."
    authIdentitiesByIdentitiesProviderIdProviderUnique(provider: Text! providerId: Text!): AuthIdentities
    "Selects multiple objects from the model. Model description: Auth: Manages users across multiple sites."
    authInstances(limit: Int offset: Int order_by: [AuthInstancesOrderBy!] where: AuthInstancesBoolExp): [AuthInstances!]
    authInstancesAggregate(filter_input: AuthInstancesFilterInput): AuthInstancesAggExp
    "Selects a single object from the model. Model description: Auth: Manages users across multiple sites."
    authInstancesById(id: Uuid!): AuthInstances
    "Selects multiple objects from the model. Model description: auth: stores authenticator method reference claims for multi factor authentication"
    authMfaAmrClaims(limit: Int offset: Int order_by: [AuthMfaAmrClaimsOrderBy!] where: AuthMfaAmrClaimsBoolExp): [AuthMfaAmrClaims!]
    authMfaAmrClaimsAggregate(filter_input: AuthMfaAmrClaimsFilterInput): AuthMfaAmrClaimsAggExp
    "Selects a single object from the model. Model description: auth: stores authenticator method reference claims for multi factor authentication"
    authMfaAmrClaimsById(id: Uuid!): AuthMfaAmrClaims
    "Selects a single object from the model. Model description: auth: stores authenticator method reference claims for multi factor authentication"
    authMfaAmrClaimsByMfaAmrClaimsSessionIdAuthenticationMethodPkey(authenticationMethod: Text! sessionId: Uuid!): AuthMfaAmrClaims
    "Selects multiple objects from the model. Model description: auth: stores metadata about challenge requests made"
    authMfaChallenges(limit: Int offset: Int order_by: [AuthMfaChallengesOrderBy!] where: AuthMfaChallengesBoolExp): [AuthMfaChallenges!]
    authMfaChallengesAggregate(filter_input: AuthMfaChallengesFilterInput): AuthMfaChallengesAggExp
    "Selects a single object from the model. Model description: auth: stores metadata about challenge requests made"
    authMfaChallengesById(id: Uuid!): AuthMfaChallenges
    "Selects multiple objects from the model. Model description: auth: stores metadata about factors"
    authMfaFactors(limit: Int offset: Int order_by: [AuthMfaFactorsOrderBy!] where: AuthMfaFactorsBoolExp): [AuthMfaFactors!]
    authMfaFactorsAggregate(filter_input: AuthMfaFactorsFilterInput): AuthMfaFactorsAggExp
    "Selects a single object from the model. Model description: auth: stores metadata about factors"
    authMfaFactorsById(id: Uuid!): AuthMfaFactors
    "Selects a single object from the model. Model description: auth: stores metadata about factors"
    authMfaFactorsByLastChallengedAt(lastChallengedAt: Timestamptz): AuthMfaFactors
    authOneTimeTokens(limit: Int offset: Int order_by: [AuthOneTimeTokensOrderBy!] where: AuthOneTimeTokensBoolExp): [AuthOneTimeTokens!]
    authOneTimeTokensAggregate(filter_input: AuthOneTimeTokensFilterInput): AuthOneTimeTokensAggExp
    authOneTimeTokensById(id: Uuid!): AuthOneTimeTokens
    "Selects multiple objects from the model. Model description: Auth: Store of tokens used to refresh JWT tokens once they expire."
    authRefreshTokens(limit: Int offset: Int order_by: [AuthRefreshTokensOrderBy!] where: AuthRefreshTokensBoolExp): [AuthRefreshTokens!]
    authRefreshTokensAggregate(filter_input: AuthRefreshTokensFilterInput): AuthRefreshTokensAggExp
    "Selects a single object from the model. Model description: Auth: Store of tokens used to refresh JWT tokens once they expire."
    authRefreshTokensById(id: Int8!): AuthRefreshTokens
    "Selects a single object from the model. Model description: Auth: Store of tokens used to refresh JWT tokens once they expire."
    authRefreshTokensByToken(token: Varchar): AuthRefreshTokens
    "Selects multiple objects from the model. Model description: Auth: Manages SAML Identity Provider connections."
    authSamlProviders(limit: Int offset: Int order_by: [AuthSamlProvidersOrderBy!] where: AuthSamlProvidersBoolExp): [AuthSamlProviders!]
    authSamlProvidersAggregate(filter_input: AuthSamlProvidersFilterInput): AuthSamlProvidersAggExp
    "Selects a single object from the model. Model description: Auth: Manages SAML Identity Provider connections."
    authSamlProvidersByEntityId(entityId: Text!): AuthSamlProviders
    "Selects a single object from the model. Model description: Auth: Manages SAML Identity Provider connections."
    authSamlProvidersById(id: Uuid!): AuthSamlProviders
    "Selects multiple objects from the model. Model description: Auth: Contains SAML Relay State information for each Service Provider initiated login."
    authSamlRelayStates(limit: Int offset: Int order_by: [AuthSamlRelayStatesOrderBy!] where: AuthSamlRelayStatesBoolExp): [AuthSamlRelayStates!]
    authSamlRelayStatesAggregate(filter_input: AuthSamlRelayStatesFilterInput): AuthSamlRelayStatesAggExp
    "Selects a single object from the model. Model description: Auth: Contains SAML Relay State information for each Service Provider initiated login."
    authSamlRelayStatesById(id: Uuid!): AuthSamlRelayStates
    "Selects multiple objects from the model. Model description: Auth: Manages updates to the auth system."
    authSchemaMigrations(limit: Int offset: Int order_by: [AuthSchemaMigrationsOrderBy!] where: AuthSchemaMigrationsBoolExp): [AuthSchemaMigrations!]
    authSchemaMigrationsAggregate(filter_input: AuthSchemaMigrationsFilterInput): AuthSchemaMigrationsAggExp
    "Selects a single object from the model. Model description: Auth: Manages updates to the auth system."
    authSchemaMigrationsByVersion(version: Varchar!): AuthSchemaMigrations
    "Selects multiple objects from the model. Model description: Auth: Stores session data associated to a user."
    authSessions(limit: Int offset: Int order_by: [AuthSessionsOrderBy!] where: AuthSessionsBoolExp): [AuthSessions!]
    authSessionsAggregate(filter_input: AuthSessionsFilterInput): AuthSessionsAggExp
    "Selects a single object from the model. Model description: Auth: Stores session data associated to a user."
    authSessionsById(id: Uuid!): AuthSessions
    "Selects multiple objects from the model. Model description: Auth: Manages SSO email address domain mapping to an SSO Identity Provider."
    authSsoDomains(limit: Int offset: Int order_by: [AuthSsoDomainsOrderBy!] where: AuthSsoDomainsBoolExp): [AuthSsoDomains!]
    authSsoDomainsAggregate(filter_input: AuthSsoDomainsFilterInput): AuthSsoDomainsAggExp
    "Selects a single object from the model. Model description: Auth: Manages SSO email address domain mapping to an SSO Identity Provider."
    authSsoDomainsById(id: Uuid!): AuthSsoDomains
    "Selects multiple objects from the model. Model description: Auth: Manages SSO identity provider information; see saml_providers for SAML."
    authSsoProviders(limit: Int offset: Int order_by: [AuthSsoProvidersOrderBy!] where: AuthSsoProvidersBoolExp): [AuthSsoProviders!]
    authSsoProvidersAggregate(filter_input: AuthSsoProvidersFilterInput): AuthSsoProvidersAggExp
    "Selects a single object from the model. Model description: Auth: Manages SSO identity provider information; see saml_providers for SAML."
    authSsoProvidersById(id: Uuid!): AuthSsoProviders
    "Selects multiple objects from the model. Model description: Auth: Stores user login data within a secure schema."
    authUsers(limit: Int offset: Int order_by: [AuthUsersOrderBy!] where: AuthUsersBoolExp): [AuthUsers!]
    authUsersAggregate(filter_input: AuthUsersFilterInput): AuthUsersAggExp
    "Selects a single object from the model. Model description: Auth: Stores user login data within a secure schema."
    authUsersById(id: Uuid!): AuthUsers
    "Selects a single object from the model. Model description: Auth: Stores user login data within a secure schema."
    authUsersByPhone(phone: Text): AuthUsers
    cityEntity(limit: Int offset: Int order_by: [CityEntityOrderBy!] where: CityEntityBoolExp): [CityEntity!]
    cityEntityAggregate(filter_input: CityEntityFilterInput): CityEntityAggExp
    cityEntityById(id: Int!): CityEntity
    contactPersons(limit: Int offset: Int order_by: [ContactPersonsOrderBy!] where: ContactPersonsBoolExp): [ContactPersons!]
    contactPersonsAggregate(filter_input: ContactPersonsFilterInput): ContactPersonsAggExp
    contactPersonsById(id: Int!): ContactPersons
    countryEntity(limit: Int offset: Int order_by: [CountryEntityOrderBy!] where: CountryEntityBoolExp): [CountryEntity!]
    countryEntityAggregate(filter_input: CountryEntityFilterInput): CountryEntityAggExp
    countryEntityById(id: Int!): CountryEntity
    customers(limit: Int offset: Int order_by: [CustomersOrderBy!] where: CustomersBoolExp): [Customers!]
    customersAggregate(filter_input: CustomersFilterInput): CustomersAggExp
    customersById(id: Int!): Customers
    efMigrationsHistory(limit: Int offset: Int order_by: [EfMigrationsHistoryOrderBy!] where: EfMigrationsHistoryBoolExp): [EfMigrationsHistory!]
    efMigrationsHistoryAggregate(filter_input: EfMigrationsHistoryFilterInput): EfMigrationsHistoryAggExp
    efMigrationsHistoryByMigrationId(migrationId: Varchar!): EfMigrationsHistory
    emailAddressEntity(limit: Int offset: Int order_by: [EmailAddressEntityOrderBy!] where: EmailAddressEntityBoolExp): [EmailAddressEntity!]
    emailAddressEntityAggregate(filter_input: EmailAddressEntityFilterInput): EmailAddressEntityAggExp
    emailAddressEntityById(id: Int!): EmailAddressEntity
    emailInviteEntity(limit: Int offset: Int order_by: [EmailInviteEntityOrderBy!] where: EmailInviteEntityBoolExp): [EmailInviteEntity!]
    emailInviteEntityAggregate(filter_input: EmailInviteEntityFilterInput): EmailInviteEntityAggExp
    emailInviteEntityById(id: Int!): EmailInviteEntity
    emailVerificationEntity(limit: Int offset: Int order_by: [EmailVerificationEntityOrderBy!] where: EmailVerificationEntityBoolExp): [EmailVerificationEntity!]
    emailVerificationEntityAggregate(filter_input: EmailVerificationEntityFilterInput): EmailVerificationEntityAggExp
    emailVerificationEntityById(id: Int!): EmailVerificationEntity
    extensionsPgStatStatementsInfo(limit: Int offset: Int order_by: [ExtensionsPgStatStatementsInfoOrderBy!] where: ExtensionsPgStatStatementsInfoBoolExp): [ExtensionsPgStatStatementsInfo!]
    extensionsPgStatStatementsInfoAggregate(filter_input: ExtensionsPgStatStatementsInfoFilterInput): ExtensionsPgStatStatementsInfoAggExp
    globalRegionEntity(limit: Int offset: Int order_by: [GlobalRegionEntityOrderBy!] where: GlobalRegionEntityBoolExp): [GlobalRegionEntity!]
    globalRegionEntityAggregate(filter_input: GlobalRegionEntityFilterInput): GlobalRegionEntityAggExp
    globalRegionEntityById(id: Int!): GlobalRegionEntity
    integrations(limit: Int offset: Int order_by: [IntegrationsOrderBy!] where: IntegrationsBoolExp): [Integrations!]
    integrationsAggregate(filter_input: IntegrationsFilterInput): IntegrationsAggExp
    integrationsById(id: Int!): Integrations
    languages(limit: Int offset: Int order_by: [LanguagesOrderBy!] where: LanguagesBoolExp): [Languages!]
    languagesAggregate(filter_input: LanguagesFilterInput): LanguagesAggExp
    languagesById(id: Int!): Languages
    notifications(limit: Int offset: Int order_by: [NotificationsOrderBy!] where: NotificationsBoolExp): [Notifications!]
    notificationsAggregate(filter_input: NotificationsFilterInput): NotificationsAggExp
    notificationsById(id: Int!): Notifications
    permissions(limit: Int offset: Int order_by: [PermissionsOrderBy!] where: PermissionsBoolExp): [Permissions!]
    permissionsAggregate(filter_input: PermissionsFilterInput): PermissionsAggExp
    permissionsById(id: Int!): Permissions
    pgmqMeta(limit: Int offset: Int order_by: [PgmqMetaOrderBy!] where: PgmqMetaBoolExp): [PgmqMeta!]
    pgmqMetaAggregate(filter_input: PgmqMetaFilterInput): PgmqMetaAggExp
    pgmqMetaByQueueName(queueName: Varchar!): PgmqMeta
    pgsodiumDecryptedKey(limit: Int offset: Int order_by: [PgsodiumDecryptedKeyOrderBy!] where: PgsodiumDecryptedKeyBoolExp): [PgsodiumDecryptedKey!]
    pgsodiumDecryptedKeyAggregate(filter_input: PgsodiumDecryptedKeyFilterInput): PgsodiumDecryptedKeyAggExp
    "Selects multiple objects from the model. Model description: This table holds metadata for derived keys given a key_id and key_context. The raw key is never stored."
    pgsodiumKey(limit: Int offset: Int order_by: [PgsodiumKeyOrderBy!] where: PgsodiumKeyBoolExp): [PgsodiumKey!]
    pgsodiumKeyAggregate(filter_input: PgsodiumKeyFilterInput): PgsodiumKeyAggExp
    "Selects a single object from the model. Model description: This table holds metadata for derived keys given a key_id and key_context. The raw key is never stored."
    pgsodiumKeyById(id: Uuid!): PgsodiumKey
    "Selects a single object from the model. Model description: This table holds metadata for derived keys given a key_id and key_context. The raw key is never stored."
    pgsodiumKeyByName(name: Text): PgsodiumKey
    pgsodiumValidKey(limit: Int offset: Int order_by: [PgsodiumValidKeyOrderBy!] where: PgsodiumValidKeyBoolExp): [PgsodiumValidKey!]
    pgsodiumValidKeyAggregate(filter_input: PgsodiumValidKeyFilterInput): PgsodiumValidKeyAggExp
    phoneNumbers(limit: Int offset: Int order_by: [PhoneNumbersOrderBy!] where: PhoneNumbersBoolExp): [PhoneNumbers!]
    phoneNumbersAggregate(filter_input: PhoneNumbersFilterInput): PhoneNumbersAggExp
    phoneNumbersById(id: Int!): PhoneNumbers
    profileEntity(limit: Int offset: Int order_by: [ProfileEntityOrderBy!] where: ProfileEntityBoolExp): [ProfileEntity!]
    profileEntityAggregate(filter_input: ProfileEntityFilterInput): ProfileEntityAggExp
    profileEntityById(id: Int!): ProfileEntity
    realtimeMessages(limit: Int offset: Int order_by: [RealtimeMessagesOrderBy!] where: RealtimeMessagesBoolExp): [RealtimeMessages!]
    realtimeMessagesAggregate(filter_input: RealtimeMessagesFilterInput): RealtimeMessagesAggExp
    realtimeMessagesByMessagesPkey(id: Uuid! insertedAt: Timestamp!): RealtimeMessages
    realtimeSchemaMigrations(limit: Int offset: Int order_by: [RealtimeSchemaMigrationsOrderBy!] where: RealtimeSchemaMigrationsBoolExp): [RealtimeSchemaMigrations!]
    realtimeSchemaMigrationsAggregate(filter_input: RealtimeSchemaMigrationsFilterInput): RealtimeSchemaMigrationsAggExp
    realtimeSchemaMigrationsByVersion(version: Int8!): RealtimeSchemaMigrations
    roles(limit: Int offset: Int order_by: [RolesOrderBy!] where: RolesBoolExp): [Roles!]
    rolesAggregate(filter_input: RolesFilterInput): RolesAggExp
    rolesById(id: Int!): Roles
    stateEntity(limit: Int offset: Int order_by: [StateEntityOrderBy!] where: StateEntityBoolExp): [StateEntity!]
    stateEntityAggregate(filter_input: StateEntityFilterInput): StateEntityAggExp
    stateEntityById(id: Int!): StateEntity
    storageBuckets(limit: Int offset: Int order_by: [StorageBucketsOrderBy!] where: StorageBucketsBoolExp): [StorageBuckets!]
    storageBucketsAggregate(filter_input: StorageBucketsFilterInput): StorageBucketsAggExp
    storageBucketsById(id: Text!): StorageBuckets
    storageMigrations(limit: Int offset: Int order_by: [StorageMigrationsOrderBy!] where: StorageMigrationsBoolExp): [StorageMigrations!]
    storageMigrationsAggregate(filter_input: StorageMigrationsFilterInput): StorageMigrationsAggExp
    storageMigrationsById(id: Int!): StorageMigrations
    storageMigrationsByName(name: Varchar!): StorageMigrations
    storageObjects(limit: Int offset: Int order_by: [StorageObjectsOrderBy!] where: StorageObjectsBoolExp): [StorageObjects!]
    storageObjectsAggregate(filter_input: StorageObjectsFilterInput): StorageObjectsAggExp
    storageObjectsById(id: Uuid!): StorageObjects
    storageS3MultipartUploads(limit: Int offset: Int order_by: [StorageS3MultipartUploadsOrderBy!] where: StorageS3MultipartUploadsBoolExp): [StorageS3MultipartUploads!]
    storageS3MultipartUploadsAggregate(filter_input: StorageS3MultipartUploadsFilterInput): StorageS3MultipartUploadsAggExp
    storageS3MultipartUploadsById(id: Text!): StorageS3MultipartUploads
    storageS3MultipartUploadsParts(limit: Int offset: Int order_by: [StorageS3MultipartUploadsPartsOrderBy!] where: StorageS3MultipartUploadsPartsBoolExp): [StorageS3MultipartUploadsParts!]
    storageS3MultipartUploadsPartsAggregate(filter_input: StorageS3MultipartUploadsPartsFilterInput): StorageS3MultipartUploadsPartsAggExp
    storageS3MultipartUploadsPartsById(id: Uuid!): StorageS3MultipartUploadsParts
    streetEntity(limit: Int offset: Int order_by: [StreetEntityOrderBy!] where: StreetEntityBoolExp): [StreetEntity!]
    streetEntityAggregate(filter_input: StreetEntityFilterInput): StreetEntityAggExp
    streetEntityById(id: Int!): StreetEntity
    teamInvites(limit: Int offset: Int order_by: [TeamInvitesOrderBy!] where: TeamInvitesBoolExp): [TeamInvites!]
    teamInvitesAggregate(filter_input: TeamInvitesFilterInput): TeamInvitesAggExp
    teamInvitesById(id: Int!): TeamInvites
    teamMembers(limit: Int offset: Int order_by: [TeamMembersOrderBy!] where: TeamMembersBoolExp): [TeamMembers!]
    teamMembersAggregate(filter_input: TeamMembersFilterInput): TeamMembersAggExp
    teamMembersById(id: Int!): TeamMembers
    teams(limit: Int offset: Int order_by: [TeamsOrderBy!] where: TeamsBoolExp): [Teams!]
    teamsAggregate(filter_input: TeamsFilterInput): TeamsAggExp
    teamsById(id: Int!): Teams
    tenants(limit: Int offset: Int order_by: [TenantsOrderBy!] where: TenantsBoolExp): [Tenants!]
    tenantsAggregate(filter_input: TenantsFilterInput): TenantsAggExp
    tenantsById(id: Int!): Tenants
    userRoles(limit: Int offset: Int order_by: [UserRolesOrderBy!] where: UserRolesBoolExp): [UserRoles!]
    userRolesAggregate(filter_input: UserRolesFilterInput): UserRolesAggExp
    userRolesById(id: Int!): UserRoles
    users(limit: Int offset: Int order_by: [UsersOrderBy!] where: UsersBoolExp): [Users!]
    usersAggregate(filter_input: UsersFilterInput): UsersAggExp
    usersById(id: Int!): Users
    vaultDecryptedSecrets(limit: Int offset: Int order_by: [VaultDecryptedSecretsOrderBy!] where: VaultDecryptedSecretsBoolExp): [VaultDecryptedSecrets!]
    vaultDecryptedSecretsAggregate(filter_input: VaultDecryptedSecretsFilterInput): VaultDecryptedSecretsAggExp
    "Selects multiple objects from the model. Model description: Table with encrypted `secret` column for storing sensitive information on disk."
    vaultSecrets(limit: Int offset: Int order_by: [VaultSecretsOrderBy!] where: VaultSecretsBoolExp): [VaultSecrets!]
    vaultSecretsAggregate(filter_input: VaultSecretsFilterInput): VaultSecretsAggExp
    "Selects a single object from the model. Model description: Table with encrypted `secret` column for storing sensitive information on disk."
    vaultSecretsById(id: Uuid!): VaultSecrets
}

type RealtimeMessages {
    event: Text
    extension: Text!
    id: Uuid!
    insertedAt: Timestamp!
    payload: Jsonb
    private: Bool
    topic: Text!
    updatedAt: Timestamp!
}

type RealtimeMessagesAggExp {
    _count: Int!
    event: TextAggExp!
    extension: TextAggExp!
    id: UuidAggExp!
    insertedAt: TimestampAggExp!
    payload: JsonbAggExp!
    private: BoolAggExp!
    topic: TextAggExp!
    updatedAt: TimestampAggExp!
}

input RealtimeMessagesBoolExp {
    _and: [RealtimeMessagesBoolExp!]
    _not: RealtimeMessagesBoolExp
    _or: [RealtimeMessagesBoolExp!]
    event: TextBoolExp
    extension: TextBoolExp
    id: UuidBoolExp
    insertedAt: TimestampBoolExp
    payload: JsonbBoolExp
    private: BoolBoolExp
    topic: TextBoolExp
    updatedAt: TimestampBoolExp
}

input RealtimeMessagesFilterInput {
    limit: Int
    offset: Int
    order_by: [RealtimeMessagesOrderBy!]
    where: RealtimeMessagesBoolExp
}

input RealtimeMessagesOrderBy {
    event: OrderBy
    extension: OrderBy
    id: OrderBy
    insertedAt: OrderBy
    payload: OrderBy
    private: OrderBy
    topic: OrderBy
    updatedAt: OrderBy
}

type RealtimeSchemaMigrations {
    insertedAt: Timestamp
    version: Int8!
}

type RealtimeSchemaMigrationsAggExp {
    _count: Int!
    insertedAt: TimestampAggExp!
    version: Int8AggExp!
}

input RealtimeSchemaMigrationsBoolExp {
    _and: [RealtimeSchemaMigrationsBoolExp!]
    _not: RealtimeSchemaMigrationsBoolExp
    _or: [RealtimeSchemaMigrationsBoolExp!]
    insertedAt: TimestampBoolExp
    version: Int8BoolExp
}

input RealtimeSchemaMigrationsFilterInput {
    limit: Int
    offset: Int
    order_by: [RealtimeSchemaMigrationsOrderBy!]
    where: RealtimeSchemaMigrationsBoolExp
}

input RealtimeSchemaMigrationsOrderBy {
    insertedAt: OrderBy
    version: OrderBy
}

type Roles {
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    permissions(limit: Int offset: Int order_by: [PermissionsOrderBy!] where: PermissionsBoolExp): [Permissions!]
    permissionsAggregate(filter_input: PermissionsFilterInput): PermissionsAggExp!
    userRoles(limit: Int offset: Int order_by: [UserRolesOrderBy!] where: UserRolesBoolExp): [UserRoles!]
    userRolesAggregate(filter_input: UserRolesFilterInput): UserRolesAggExp!
}

type RolesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    description: VarcharAggExp!
    id: IntAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    name: VarcharAggExp!
}

input RolesBoolExp {
    _and: [RolesBoolExp!]
    _not: RolesBoolExp
    _or: [RolesBoolExp!]
    createdAt: TimestamptzBoolExp
    description: VarcharBoolExp
    id: IntBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    name: VarcharBoolExp
    permissions: PermissionsBoolExp
    userRoles: UserRolesBoolExp
}

input RolesFilterInput {
    limit: Int
    offset: Int
    order_by: [RolesOrderBy!]
    where: RolesBoolExp
}

input RolesOrderBy {
    createdAt: OrderBy
    description: OrderBy
    id: OrderBy
    lastUpdatedAt: OrderBy
    name: OrderBy
}

type StateEntity {
    cityEntities(limit: Int offset: Int order_by: [CityEntityOrderBy!] where: CityEntityBoolExp): [CityEntity!]
    cityEntitiesAggregate(filter_input: CityEntityFilterInput): CityEntityAggExp!
    countryEntity: CountryEntity
    countryId: Int!
    id: Int!
    isoCode: Varchar!
    name: Varchar!
}

type StateEntityAggExp {
    _count: Int!
    countryId: IntAggExp!
    id: IntAggExp!
    isoCode: VarcharAggExp!
    name: VarcharAggExp!
}

input StateEntityBoolExp {
    _and: [StateEntityBoolExp!]
    _not: StateEntityBoolExp
    _or: [StateEntityBoolExp!]
    cityEntities: CityEntityBoolExp
    countryEntity: CountryEntityBoolExp
    countryId: IntBoolExp
    id: IntBoolExp
    isoCode: VarcharBoolExp
    name: VarcharBoolExp
}

input StateEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [StateEntityOrderBy!]
    where: StateEntityBoolExp
}

input StateEntityOrderBy {
    countryEntity: CountryEntityOrderBy
    countryId: OrderBy
    id: OrderBy
    isoCode: OrderBy
    name: OrderBy
}

type StorageBuckets {
    allowedMimeTypes: [Text]
    avifAutodetection: Bool
    createdAt: Timestamptz
    fileSizeLimit: Int8
    id: Text!
    name: Text!
    "Field is deprecated, use owner_id instead"
    owner: Uuid
    ownerId: Text
    public: Bool
    storageObjects(limit: Int offset: Int order_by: [StorageObjectsOrderBy!] where: StorageObjectsBoolExp): [StorageObjects!]
    storageObjectsAggregate(filter_input: StorageObjectsFilterInput): StorageObjectsAggExp!
    storageS3MultipartUploads(limit: Int offset: Int order_by: [StorageS3MultipartUploadsOrderBy!] where: StorageS3MultipartUploadsBoolExp): [StorageS3MultipartUploads!]
    storageS3MultipartUploadsAggregate(filter_input: StorageS3MultipartUploadsFilterInput): StorageS3MultipartUploadsAggExp!
    storageS3MultipartUploadsParts(limit: Int offset: Int order_by: [StorageS3MultipartUploadsPartsOrderBy!] where: StorageS3MultipartUploadsPartsBoolExp): [StorageS3MultipartUploadsParts!]
    storageS3MultipartUploadsPartsAggregate(filter_input: StorageS3MultipartUploadsPartsFilterInput): StorageS3MultipartUploadsPartsAggExp!
    updatedAt: Timestamptz
}

type StorageBucketsAggExp {
    _count: Int!
    avifAutodetection: BoolAggExp!
    createdAt: TimestamptzAggExp!
    fileSizeLimit: Int8AggExp!
    id: TextAggExp!
    name: TextAggExp!
    owner: UuidAggExp!
    ownerId: TextAggExp!
    public: BoolAggExp!
    updatedAt: TimestamptzAggExp!
}

input StorageBucketsBoolExp {
    _and: [StorageBucketsBoolExp!]
    _not: StorageBucketsBoolExp
    _or: [StorageBucketsBoolExp!]
    avifAutodetection: BoolBoolExp
    createdAt: TimestamptzBoolExp
    fileSizeLimit: Int8BoolExp
    id: TextBoolExp
    name: TextBoolExp
    owner: UuidBoolExp
    ownerId: TextBoolExp
    public: BoolBoolExp
    storageObjects: StorageObjectsBoolExp
    storageS3MultipartUploads: StorageS3MultipartUploadsBoolExp
    storageS3MultipartUploadsParts: StorageS3MultipartUploadsPartsBoolExp
    updatedAt: TimestamptzBoolExp
}

input StorageBucketsFilterInput {
    limit: Int
    offset: Int
    order_by: [StorageBucketsOrderBy!]
    where: StorageBucketsBoolExp
}

input StorageBucketsOrderBy {
    allowedMimeTypes: OrderBy
    avifAutodetection: OrderBy
    createdAt: OrderBy
    fileSizeLimit: OrderBy
    id: OrderBy
    name: OrderBy
    owner: OrderBy
    ownerId: OrderBy
    public: OrderBy
    updatedAt: OrderBy
}

type StorageMigrations {
    executedAt: Timestamp
    hash: Varchar!
    id: Int!
    name: Varchar!
}

type StorageMigrationsAggExp {
    _count: Int!
    executedAt: TimestampAggExp!
    hash: VarcharAggExp!
    id: IntAggExp!
    name: VarcharAggExp!
}

input StorageMigrationsBoolExp {
    _and: [StorageMigrationsBoolExp!]
    _not: StorageMigrationsBoolExp
    _or: [StorageMigrationsBoolExp!]
    executedAt: TimestampBoolExp
    hash: VarcharBoolExp
    id: IntBoolExp
    name: VarcharBoolExp
}

input StorageMigrationsFilterInput {
    limit: Int
    offset: Int
    order_by: [StorageMigrationsOrderBy!]
    where: StorageMigrationsBoolExp
}

input StorageMigrationsOrderBy {
    executedAt: OrderBy
    hash: OrderBy
    id: OrderBy
    name: OrderBy
}

type StorageObjects {
    bucketId: Text
    createdAt: Timestamptz
    id: Uuid!
    lastAccessedAt: Timestamptz
    metadata: Jsonb
    name: Text
    "Field is deprecated, use owner_id instead"
    owner: Uuid
    ownerId: Text
    pathTokens: [Text]
    storageBucket: StorageBuckets
    updatedAt: Timestamptz
    userMetadata: Jsonb
    version: Text
}

type StorageObjectsAggExp {
    _count: Int!
    bucketId: TextAggExp!
    createdAt: TimestamptzAggExp!
    id: UuidAggExp!
    lastAccessedAt: TimestamptzAggExp!
    metadata: JsonbAggExp!
    name: TextAggExp!
    owner: UuidAggExp!
    ownerId: TextAggExp!
    updatedAt: TimestamptzAggExp!
    userMetadata: JsonbAggExp!
    version: TextAggExp!
}

input StorageObjectsBoolExp {
    _and: [StorageObjectsBoolExp!]
    _not: StorageObjectsBoolExp
    _or: [StorageObjectsBoolExp!]
    bucketId: TextBoolExp
    createdAt: TimestamptzBoolExp
    id: UuidBoolExp
    lastAccessedAt: TimestamptzBoolExp
    metadata: JsonbBoolExp
    name: TextBoolExp
    owner: UuidBoolExp
    ownerId: TextBoolExp
    storageBucket: StorageBucketsBoolExp
    updatedAt: TimestamptzBoolExp
    userMetadata: JsonbBoolExp
    version: TextBoolExp
}

input StorageObjectsFilterInput {
    limit: Int
    offset: Int
    order_by: [StorageObjectsOrderBy!]
    where: StorageObjectsBoolExp
}

input StorageObjectsOrderBy {
    bucketId: OrderBy
    createdAt: OrderBy
    id: OrderBy
    lastAccessedAt: OrderBy
    metadata: OrderBy
    name: OrderBy
    owner: OrderBy
    ownerId: OrderBy
    pathTokens: OrderBy
    storageBucket: StorageBucketsOrderBy
    updatedAt: OrderBy
    userMetadata: OrderBy
    version: OrderBy
}

type StorageS3MultipartUploads {
    bucketId: Text!
    createdAt: Timestamptz!
    id: Text!
    inProgressSize: Int8!
    key: Text!
    ownerId: Text
    storageBucket: StorageBuckets
    storageS3MultipartUploadsParts(limit: Int offset: Int order_by: [StorageS3MultipartUploadsPartsOrderBy!] where: StorageS3MultipartUploadsPartsBoolExp): [StorageS3MultipartUploadsParts!]
    storageS3MultipartUploadsPartsAggregate(filter_input: StorageS3MultipartUploadsPartsFilterInput): StorageS3MultipartUploadsPartsAggExp!
    uploadSignature: Text!
    userMetadata: Jsonb
    version: Text!
}

type StorageS3MultipartUploadsAggExp {
    _count: Int!
    bucketId: TextAggExp!
    createdAt: TimestamptzAggExp!
    id: TextAggExp!
    inProgressSize: Int8AggExp!
    key: TextAggExp!
    ownerId: TextAggExp!
    uploadSignature: TextAggExp!
    userMetadata: JsonbAggExp!
    version: TextAggExp!
}

input StorageS3MultipartUploadsBoolExp {
    _and: [StorageS3MultipartUploadsBoolExp!]
    _not: StorageS3MultipartUploadsBoolExp
    _or: [StorageS3MultipartUploadsBoolExp!]
    bucketId: TextBoolExp
    createdAt: TimestamptzBoolExp
    id: TextBoolExp
    inProgressSize: Int8BoolExp
    key: TextBoolExp
    ownerId: TextBoolExp
    storageBucket: StorageBucketsBoolExp
    storageS3MultipartUploadsParts: StorageS3MultipartUploadsPartsBoolExp
    uploadSignature: TextBoolExp
    userMetadata: JsonbBoolExp
    version: TextBoolExp
}

input StorageS3MultipartUploadsFilterInput {
    limit: Int
    offset: Int
    order_by: [StorageS3MultipartUploadsOrderBy!]
    where: StorageS3MultipartUploadsBoolExp
}

input StorageS3MultipartUploadsOrderBy {
    bucketId: OrderBy
    createdAt: OrderBy
    id: OrderBy
    inProgressSize: OrderBy
    key: OrderBy
    ownerId: OrderBy
    storageBucket: StorageBucketsOrderBy
    uploadSignature: OrderBy
    userMetadata: OrderBy
    version: OrderBy
}

type StorageS3MultipartUploadsParts {
    bucketId: Text!
    createdAt: Timestamptz!
    etag: Text!
    id: Uuid!
    key: Text!
    ownerId: Text
    partNumber: Int!
    size: Int8!
    storageBucket: StorageBuckets
    storageS3MultipartUpload: StorageS3MultipartUploads
    uploadId: Text!
    version: Text!
}

type StorageS3MultipartUploadsPartsAggExp {
    _count: Int!
    bucketId: TextAggExp!
    createdAt: TimestamptzAggExp!
    etag: TextAggExp!
    id: UuidAggExp!
    key: TextAggExp!
    ownerId: TextAggExp!
    partNumber: IntAggExp!
    size: Int8AggExp!
    uploadId: TextAggExp!
    version: TextAggExp!
}

input StorageS3MultipartUploadsPartsBoolExp {
    _and: [StorageS3MultipartUploadsPartsBoolExp!]
    _not: StorageS3MultipartUploadsPartsBoolExp
    _or: [StorageS3MultipartUploadsPartsBoolExp!]
    bucketId: TextBoolExp
    createdAt: TimestamptzBoolExp
    etag: TextBoolExp
    id: UuidBoolExp
    key: TextBoolExp
    ownerId: TextBoolExp
    partNumber: IntBoolExp
    size: Int8BoolExp
    storageBucket: StorageBucketsBoolExp
    storageS3MultipartUpload: StorageS3MultipartUploadsBoolExp
    uploadId: TextBoolExp
    version: TextBoolExp
}

input StorageS3MultipartUploadsPartsFilterInput {
    limit: Int
    offset: Int
    order_by: [StorageS3MultipartUploadsPartsOrderBy!]
    where: StorageS3MultipartUploadsPartsBoolExp
}

input StorageS3MultipartUploadsPartsOrderBy {
    bucketId: OrderBy
    createdAt: OrderBy
    etag: OrderBy
    id: OrderBy
    key: OrderBy
    ownerId: OrderBy
    partNumber: OrderBy
    size: OrderBy
    storageBucket: StorageBucketsOrderBy
    storageS3MultipartUpload: StorageS3MultipartUploadsOrderBy
    uploadId: OrderBy
    version: OrderBy
}

type StreetEntity {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    cityEntity: CityEntity
    cityEntityByCountryId: CityEntity
    cityId: Int!
    countryId: Int!
    id: Int!
    name: Varchar!
}

type StreetEntityAggExp {
    _count: Int!
    cityId: IntAggExp!
    countryId: IntAggExp!
    id: IntAggExp!
    name: VarcharAggExp!
}

input StreetEntityBoolExp {
    _and: [StreetEntityBoolExp!]
    _not: StreetEntityBoolExp
    _or: [StreetEntityBoolExp!]
    addresses: AddressesBoolExp
    cityEntity: CityEntityBoolExp
    cityEntityByCountryId: CityEntityBoolExp
    cityId: IntBoolExp
    countryId: IntBoolExp
    id: IntBoolExp
    name: VarcharBoolExp
}

input StreetEntityFilterInput {
    limit: Int
    offset: Int
    order_by: [StreetEntityOrderBy!]
    where: StreetEntityBoolExp
}

input StreetEntityOrderBy {
    cityEntity: CityEntityOrderBy
    cityEntityByCountryId: CityEntityOrderBy
    cityId: OrderBy
    countryId: OrderBy
    id: OrderBy
    name: OrderBy
}

type Subscription {
    accounts(limit: Int offset: Int order_by: [AccountsOrderBy!] where: AccountsBoolExp): [Accounts!]
    accountsAggregate(filter_input: AccountsFilterInput): AccountsAggExp
    accountsByAccountId(accountId: Int!): Accounts
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp
    addressesById(id: Int!): Addresses
    auditLogs(limit: Int offset: Int order_by: [AuditLogsOrderBy!] where: AuditLogsBoolExp): [AuditLogs!]
    auditLogsAggregate(filter_input: AuditLogsFilterInput): AuditLogsAggExp
    auditLogsById(id: Int!): AuditLogs
    authAuditLogEntries(limit: Int offset: Int order_by: [AuthAuditLogEntriesOrderBy!] where: AuthAuditLogEntriesBoolExp): [AuthAuditLogEntries!]
    authAuditLogEntriesAggregate(filter_input: AuthAuditLogEntriesFilterInput): AuthAuditLogEntriesAggExp
    authAuditLogEntriesById(id: Uuid!): AuthAuditLogEntries
    authFlowState(limit: Int offset: Int order_by: [AuthFlowStateOrderBy!] where: AuthFlowStateBoolExp): [AuthFlowState!]
    authFlowStateAggregate(filter_input: AuthFlowStateFilterInput): AuthFlowStateAggExp
    authFlowStateById(id: Uuid!): AuthFlowState
    authIdentities(limit: Int offset: Int order_by: [AuthIdentitiesOrderBy!] where: AuthIdentitiesBoolExp): [AuthIdentities!]
    authIdentitiesAggregate(filter_input: AuthIdentitiesFilterInput): AuthIdentitiesAggExp
    authIdentitiesById(id: Uuid!): AuthIdentities
    authIdentitiesByIdentitiesProviderIdProviderUnique(provider: Text! providerId: Text!): AuthIdentities
    authInstances(limit: Int offset: Int order_by: [AuthInstancesOrderBy!] where: AuthInstancesBoolExp): [AuthInstances!]
    authInstancesAggregate(filter_input: AuthInstancesFilterInput): AuthInstancesAggExp
    authInstancesById(id: Uuid!): AuthInstances
    authMfaAmrClaims(limit: Int offset: Int order_by: [AuthMfaAmrClaimsOrderBy!] where: AuthMfaAmrClaimsBoolExp): [AuthMfaAmrClaims!]
    authMfaAmrClaimsAggregate(filter_input: AuthMfaAmrClaimsFilterInput): AuthMfaAmrClaimsAggExp
    authMfaAmrClaimsById(id: Uuid!): AuthMfaAmrClaims
    authMfaAmrClaimsByMfaAmrClaimsSessionIdAuthenticationMethodPkey(authenticationMethod: Text! sessionId: Uuid!): AuthMfaAmrClaims
    authMfaChallenges(limit: Int offset: Int order_by: [AuthMfaChallengesOrderBy!] where: AuthMfaChallengesBoolExp): [AuthMfaChallenges!]
    authMfaChallengesAggregate(filter_input: AuthMfaChallengesFilterInput): AuthMfaChallengesAggExp
    authMfaChallengesById(id: Uuid!): AuthMfaChallenges
    authMfaFactors(limit: Int offset: Int order_by: [AuthMfaFactorsOrderBy!] where: AuthMfaFactorsBoolExp): [AuthMfaFactors!]
    authMfaFactorsAggregate(filter_input: AuthMfaFactorsFilterInput): AuthMfaFactorsAggExp
    authMfaFactorsById(id: Uuid!): AuthMfaFactors
    authMfaFactorsByLastChallengedAt(lastChallengedAt: Timestamptz): AuthMfaFactors
    authOneTimeTokens(limit: Int offset: Int order_by: [AuthOneTimeTokensOrderBy!] where: AuthOneTimeTokensBoolExp): [AuthOneTimeTokens!]
    authOneTimeTokensAggregate(filter_input: AuthOneTimeTokensFilterInput): AuthOneTimeTokensAggExp
    authOneTimeTokensById(id: Uuid!): AuthOneTimeTokens
    authRefreshTokens(limit: Int offset: Int order_by: [AuthRefreshTokensOrderBy!] where: AuthRefreshTokensBoolExp): [AuthRefreshTokens!]
    authRefreshTokensAggregate(filter_input: AuthRefreshTokensFilterInput): AuthRefreshTokensAggExp
    authRefreshTokensById(id: Int8!): AuthRefreshTokens
    authRefreshTokensByToken(token: Varchar): AuthRefreshTokens
    authSamlProviders(limit: Int offset: Int order_by: [AuthSamlProvidersOrderBy!] where: AuthSamlProvidersBoolExp): [AuthSamlProviders!]
    authSamlProvidersAggregate(filter_input: AuthSamlProvidersFilterInput): AuthSamlProvidersAggExp
    authSamlProvidersByEntityId(entityId: Text!): AuthSamlProviders
    authSamlProvidersById(id: Uuid!): AuthSamlProviders
    authSamlRelayStates(limit: Int offset: Int order_by: [AuthSamlRelayStatesOrderBy!] where: AuthSamlRelayStatesBoolExp): [AuthSamlRelayStates!]
    authSamlRelayStatesAggregate(filter_input: AuthSamlRelayStatesFilterInput): AuthSamlRelayStatesAggExp
    authSamlRelayStatesById(id: Uuid!): AuthSamlRelayStates
    authSchemaMigrations(limit: Int offset: Int order_by: [AuthSchemaMigrationsOrderBy!] where: AuthSchemaMigrationsBoolExp): [AuthSchemaMigrations!]
    authSchemaMigrationsAggregate(filter_input: AuthSchemaMigrationsFilterInput): AuthSchemaMigrationsAggExp
    authSchemaMigrationsByVersion(version: Varchar!): AuthSchemaMigrations
    authSessions(limit: Int offset: Int order_by: [AuthSessionsOrderBy!] where: AuthSessionsBoolExp): [AuthSessions!]
    authSessionsAggregate(filter_input: AuthSessionsFilterInput): AuthSessionsAggExp
    authSessionsById(id: Uuid!): AuthSessions
    authSsoDomains(limit: Int offset: Int order_by: [AuthSsoDomainsOrderBy!] where: AuthSsoDomainsBoolExp): [AuthSsoDomains!]
    authSsoDomainsAggregate(filter_input: AuthSsoDomainsFilterInput): AuthSsoDomainsAggExp
    authSsoDomainsById(id: Uuid!): AuthSsoDomains
    authSsoProviders(limit: Int offset: Int order_by: [AuthSsoProvidersOrderBy!] where: AuthSsoProvidersBoolExp): [AuthSsoProviders!]
    authSsoProvidersAggregate(filter_input: AuthSsoProvidersFilterInput): AuthSsoProvidersAggExp
    authSsoProvidersById(id: Uuid!): AuthSsoProviders
    authUsers(limit: Int offset: Int order_by: [AuthUsersOrderBy!] where: AuthUsersBoolExp): [AuthUsers!]
    authUsersAggregate(filter_input: AuthUsersFilterInput): AuthUsersAggExp
    authUsersById(id: Uuid!): AuthUsers
    authUsersByPhone(phone: Text): AuthUsers
    cityEntity(limit: Int offset: Int order_by: [CityEntityOrderBy!] where: CityEntityBoolExp): [CityEntity!]
    cityEntityAggregate(filter_input: CityEntityFilterInput): CityEntityAggExp
    cityEntityById(id: Int!): CityEntity
    contactPersons(limit: Int offset: Int order_by: [ContactPersonsOrderBy!] where: ContactPersonsBoolExp): [ContactPersons!]
    contactPersonsAggregate(filter_input: ContactPersonsFilterInput): ContactPersonsAggExp
    contactPersonsById(id: Int!): ContactPersons
    countryEntity(limit: Int offset: Int order_by: [CountryEntityOrderBy!] where: CountryEntityBoolExp): [CountryEntity!]
    countryEntityAggregate(filter_input: CountryEntityFilterInput): CountryEntityAggExp
    countryEntityById(id: Int!): CountryEntity
    customers(limit: Int offset: Int order_by: [CustomersOrderBy!] where: CustomersBoolExp): [Customers!]
    customersAggregate(filter_input: CustomersFilterInput): CustomersAggExp
    customersById(id: Int!): Customers
    efMigrationsHistory(limit: Int offset: Int order_by: [EfMigrationsHistoryOrderBy!] where: EfMigrationsHistoryBoolExp): [EfMigrationsHistory!]
    efMigrationsHistoryAggregate(filter_input: EfMigrationsHistoryFilterInput): EfMigrationsHistoryAggExp
    efMigrationsHistoryByMigrationId(migrationId: Varchar!): EfMigrationsHistory
    emailAddressEntity(limit: Int offset: Int order_by: [EmailAddressEntityOrderBy!] where: EmailAddressEntityBoolExp): [EmailAddressEntity!]
    emailAddressEntityAggregate(filter_input: EmailAddressEntityFilterInput): EmailAddressEntityAggExp
    emailAddressEntityById(id: Int!): EmailAddressEntity
    emailInviteEntity(limit: Int offset: Int order_by: [EmailInviteEntityOrderBy!] where: EmailInviteEntityBoolExp): [EmailInviteEntity!]
    emailInviteEntityAggregate(filter_input: EmailInviteEntityFilterInput): EmailInviteEntityAggExp
    emailInviteEntityById(id: Int!): EmailInviteEntity
    emailVerificationEntity(limit: Int offset: Int order_by: [EmailVerificationEntityOrderBy!] where: EmailVerificationEntityBoolExp): [EmailVerificationEntity!]
    emailVerificationEntityAggregate(filter_input: EmailVerificationEntityFilterInput): EmailVerificationEntityAggExp
    emailVerificationEntityById(id: Int!): EmailVerificationEntity
    extensionsPgStatStatementsInfo(limit: Int offset: Int order_by: [ExtensionsPgStatStatementsInfoOrderBy!] where: ExtensionsPgStatStatementsInfoBoolExp): [ExtensionsPgStatStatementsInfo!]
    extensionsPgStatStatementsInfoAggregate(filter_input: ExtensionsPgStatStatementsInfoFilterInput): ExtensionsPgStatStatementsInfoAggExp
    globalRegionEntity(limit: Int offset: Int order_by: [GlobalRegionEntityOrderBy!] where: GlobalRegionEntityBoolExp): [GlobalRegionEntity!]
    globalRegionEntityAggregate(filter_input: GlobalRegionEntityFilterInput): GlobalRegionEntityAggExp
    globalRegionEntityById(id: Int!): GlobalRegionEntity
    integrations(limit: Int offset: Int order_by: [IntegrationsOrderBy!] where: IntegrationsBoolExp): [Integrations!]
    integrationsAggregate(filter_input: IntegrationsFilterInput): IntegrationsAggExp
    integrationsById(id: Int!): Integrations
    languages(limit: Int offset: Int order_by: [LanguagesOrderBy!] where: LanguagesBoolExp): [Languages!]
    languagesAggregate(filter_input: LanguagesFilterInput): LanguagesAggExp
    languagesById(id: Int!): Languages
    notifications(limit: Int offset: Int order_by: [NotificationsOrderBy!] where: NotificationsBoolExp): [Notifications!]
    notificationsAggregate(filter_input: NotificationsFilterInput): NotificationsAggExp
    notificationsById(id: Int!): Notifications
    permissions(limit: Int offset: Int order_by: [PermissionsOrderBy!] where: PermissionsBoolExp): [Permissions!]
    permissionsAggregate(filter_input: PermissionsFilterInput): PermissionsAggExp
    permissionsById(id: Int!): Permissions
    pgmqMeta(limit: Int offset: Int order_by: [PgmqMetaOrderBy!] where: PgmqMetaBoolExp): [PgmqMeta!]
    pgmqMetaAggregate(filter_input: PgmqMetaFilterInput): PgmqMetaAggExp
    pgmqMetaByQueueName(queueName: Varchar!): PgmqMeta
    pgsodiumDecryptedKey(limit: Int offset: Int order_by: [PgsodiumDecryptedKeyOrderBy!] where: PgsodiumDecryptedKeyBoolExp): [PgsodiumDecryptedKey!]
    pgsodiumDecryptedKeyAggregate(filter_input: PgsodiumDecryptedKeyFilterInput): PgsodiumDecryptedKeyAggExp
    pgsodiumKey(limit: Int offset: Int order_by: [PgsodiumKeyOrderBy!] where: PgsodiumKeyBoolExp): [PgsodiumKey!]
    pgsodiumKeyAggregate(filter_input: PgsodiumKeyFilterInput): PgsodiumKeyAggExp
    pgsodiumKeyById(id: Uuid!): PgsodiumKey
    pgsodiumKeyByName(name: Text): PgsodiumKey
    pgsodiumValidKey(limit: Int offset: Int order_by: [PgsodiumValidKeyOrderBy!] where: PgsodiumValidKeyBoolExp): [PgsodiumValidKey!]
    pgsodiumValidKeyAggregate(filter_input: PgsodiumValidKeyFilterInput): PgsodiumValidKeyAggExp
    phoneNumbers(limit: Int offset: Int order_by: [PhoneNumbersOrderBy!] where: PhoneNumbersBoolExp): [PhoneNumbers!]
    phoneNumbersAggregate(filter_input: PhoneNumbersFilterInput): PhoneNumbersAggExp
    phoneNumbersById(id: Int!): PhoneNumbers
    profileEntity(limit: Int offset: Int order_by: [ProfileEntityOrderBy!] where: ProfileEntityBoolExp): [ProfileEntity!]
    profileEntityAggregate(filter_input: ProfileEntityFilterInput): ProfileEntityAggExp
    profileEntityById(id: Int!): ProfileEntity
    realtimeMessages(limit: Int offset: Int order_by: [RealtimeMessagesOrderBy!] where: RealtimeMessagesBoolExp): [RealtimeMessages!]
    realtimeMessagesAggregate(filter_input: RealtimeMessagesFilterInput): RealtimeMessagesAggExp
    realtimeMessagesByMessagesPkey(id: Uuid! insertedAt: Timestamp!): RealtimeMessages
    realtimeSchemaMigrations(limit: Int offset: Int order_by: [RealtimeSchemaMigrationsOrderBy!] where: RealtimeSchemaMigrationsBoolExp): [RealtimeSchemaMigrations!]
    realtimeSchemaMigrationsAggregate(filter_input: RealtimeSchemaMigrationsFilterInput): RealtimeSchemaMigrationsAggExp
    realtimeSchemaMigrationsByVersion(version: Int8!): RealtimeSchemaMigrations
    roles(limit: Int offset: Int order_by: [RolesOrderBy!] where: RolesBoolExp): [Roles!]
    rolesAggregate(filter_input: RolesFilterInput): RolesAggExp
    rolesById(id: Int!): Roles
    stateEntity(limit: Int offset: Int order_by: [StateEntityOrderBy!] where: StateEntityBoolExp): [StateEntity!]
    stateEntityAggregate(filter_input: StateEntityFilterInput): StateEntityAggExp
    stateEntityById(id: Int!): StateEntity
    storageBuckets(limit: Int offset: Int order_by: [StorageBucketsOrderBy!] where: StorageBucketsBoolExp): [StorageBuckets!]
    storageBucketsAggregate(filter_input: StorageBucketsFilterInput): StorageBucketsAggExp
    storageBucketsById(id: Text!): StorageBuckets
    storageMigrations(limit: Int offset: Int order_by: [StorageMigrationsOrderBy!] where: StorageMigrationsBoolExp): [StorageMigrations!]
    storageMigrationsAggregate(filter_input: StorageMigrationsFilterInput): StorageMigrationsAggExp
    storageMigrationsById(id: Int!): StorageMigrations
    storageMigrationsByName(name: Varchar!): StorageMigrations
    storageObjects(limit: Int offset: Int order_by: [StorageObjectsOrderBy!] where: StorageObjectsBoolExp): [StorageObjects!]
    storageObjectsAggregate(filter_input: StorageObjectsFilterInput): StorageObjectsAggExp
    storageObjectsById(id: Uuid!): StorageObjects
    storageS3MultipartUploads(limit: Int offset: Int order_by: [StorageS3MultipartUploadsOrderBy!] where: StorageS3MultipartUploadsBoolExp): [StorageS3MultipartUploads!]
    storageS3MultipartUploadsAggregate(filter_input: StorageS3MultipartUploadsFilterInput): StorageS3MultipartUploadsAggExp
    storageS3MultipartUploadsById(id: Text!): StorageS3MultipartUploads
    storageS3MultipartUploadsParts(limit: Int offset: Int order_by: [StorageS3MultipartUploadsPartsOrderBy!] where: StorageS3MultipartUploadsPartsBoolExp): [StorageS3MultipartUploadsParts!]
    storageS3MultipartUploadsPartsAggregate(filter_input: StorageS3MultipartUploadsPartsFilterInput): StorageS3MultipartUploadsPartsAggExp
    storageS3MultipartUploadsPartsById(id: Uuid!): StorageS3MultipartUploadsParts
    streetEntity(limit: Int offset: Int order_by: [StreetEntityOrderBy!] where: StreetEntityBoolExp): [StreetEntity!]
    streetEntityAggregate(filter_input: StreetEntityFilterInput): StreetEntityAggExp
    streetEntityById(id: Int!): StreetEntity
    teamInvites(limit: Int offset: Int order_by: [TeamInvitesOrderBy!] where: TeamInvitesBoolExp): [TeamInvites!]
    teamInvitesAggregate(filter_input: TeamInvitesFilterInput): TeamInvitesAggExp
    teamInvitesById(id: Int!): TeamInvites
    teamMembers(limit: Int offset: Int order_by: [TeamMembersOrderBy!] where: TeamMembersBoolExp): [TeamMembers!]
    teamMembersAggregate(filter_input: TeamMembersFilterInput): TeamMembersAggExp
    teamMembersById(id: Int!): TeamMembers
    teams(limit: Int offset: Int order_by: [TeamsOrderBy!] where: TeamsBoolExp): [Teams!]
    teamsAggregate(filter_input: TeamsFilterInput): TeamsAggExp
    teamsById(id: Int!): Teams
    tenants(limit: Int offset: Int order_by: [TenantsOrderBy!] where: TenantsBoolExp): [Tenants!]
    tenantsAggregate(filter_input: TenantsFilterInput): TenantsAggExp
    tenantsById(id: Int!): Tenants
    userRoles(limit: Int offset: Int order_by: [UserRolesOrderBy!] where: UserRolesBoolExp): [UserRoles!]
    userRolesAggregate(filter_input: UserRolesFilterInput): UserRolesAggExp
    userRolesById(id: Int!): UserRoles
    users(limit: Int offset: Int order_by: [UsersOrderBy!] where: UsersBoolExp): [Users!]
    usersAggregate(filter_input: UsersFilterInput): UsersAggExp
    usersById(id: Int!): Users
    vaultDecryptedSecrets(limit: Int offset: Int order_by: [VaultDecryptedSecretsOrderBy!] where: VaultDecryptedSecretsBoolExp): [VaultDecryptedSecrets!]
    vaultDecryptedSecretsAggregate(filter_input: VaultDecryptedSecretsFilterInput): VaultDecryptedSecretsAggExp
    vaultSecrets(limit: Int offset: Int order_by: [VaultSecretsOrderBy!] where: VaultSecretsBoolExp): [VaultSecrets!]
    vaultSecretsAggregate(filter_input: VaultSecretsFilterInput): VaultSecretsAggExp
    vaultSecretsById(id: Uuid!): VaultSecrets
}

type TeamInvites {
    createdAt: Timestamptz!
    expireAt: Timestamptz!
    id: Int!
    isActive: Bool!
    team: Teams
    teamId: Int!
    user: Users
    userId: Int!
}

type TeamInvitesAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    expireAt: TimestamptzAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    teamId: IntAggExp!
    userId: IntAggExp!
}

input TeamInvitesBoolExp {
    _and: [TeamInvitesBoolExp!]
    _not: TeamInvitesBoolExp
    _or: [TeamInvitesBoolExp!]
    createdAt: TimestamptzBoolExp
    expireAt: TimestamptzBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    team: TeamsBoolExp
    teamId: IntBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input TeamInvitesFilterInput {
    limit: Int
    offset: Int
    order_by: [TeamInvitesOrderBy!]
    where: TeamInvitesBoolExp
}

input TeamInvitesOrderBy {
    createdAt: OrderBy
    expireAt: OrderBy
    id: OrderBy
    isActive: OrderBy
    team: TeamsOrderBy
    teamId: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

type TeamMembers {
    alias: Varchar!
    id: Int!
    isActive: Bool!
    team: Teams
    teamId: Int!
    user: Users
    userId: Int!
}

type TeamMembersAggExp {
    _count: Int!
    alias: VarcharAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    teamId: IntAggExp!
    userId: IntAggExp!
}

input TeamMembersBoolExp {
    _and: [TeamMembersBoolExp!]
    _not: TeamMembersBoolExp
    _or: [TeamMembersBoolExp!]
    alias: VarcharBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    team: TeamsBoolExp
    teamId: IntBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input TeamMembersFilterInput {
    limit: Int
    offset: Int
    order_by: [TeamMembersOrderBy!]
    where: TeamMembersBoolExp
}

input TeamMembersOrderBy {
    alias: OrderBy
    id: OrderBy
    isActive: OrderBy
    team: TeamsOrderBy
    teamId: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

type Teams {
    createdAt: Timestamptz!
    description: Varchar!
    id: Int!
    isActive: Bool!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    ownerId: Int!
    teamInvites(limit: Int offset: Int order_by: [TeamInvitesOrderBy!] where: TeamInvitesBoolExp): [TeamInvites!]
    teamInvitesAggregate(filter_input: TeamInvitesFilterInput): TeamInvitesAggExp!
    teamMembers(limit: Int offset: Int order_by: [TeamMembersOrderBy!] where: TeamMembersBoolExp): [TeamMembers!]
    teamMembersAggregate(filter_input: TeamMembersFilterInput): TeamMembersAggExp!
    tenant: Tenants
    tenantId: Int!
    user: Users
}

type TeamsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    description: VarcharAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    name: VarcharAggExp!
    ownerId: IntAggExp!
    tenantId: IntAggExp!
}

input TeamsBoolExp {
    _and: [TeamsBoolExp!]
    _not: TeamsBoolExp
    _or: [TeamsBoolExp!]
    createdAt: TimestamptzBoolExp
    description: VarcharBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    name: VarcharBoolExp
    ownerId: IntBoolExp
    teamInvites: TeamInvitesBoolExp
    teamMembers: TeamMembersBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
    user: UsersBoolExp
}

input TeamsFilterInput {
    limit: Int
    offset: Int
    order_by: [TeamsOrderBy!]
    where: TeamsBoolExp
}

input TeamsOrderBy {
    createdAt: OrderBy
    description: OrderBy
    id: OrderBy
    isActive: OrderBy
    lastUpdatedAt: OrderBy
    name: OrderBy
    ownerId: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
    user: UsersOrderBy
}

type Tenants {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    auditLogs(limit: Int offset: Int order_by: [AuditLogsOrderBy!] where: AuditLogsBoolExp): [AuditLogs!]
    auditLogsAggregate(filter_input: AuditLogsFilterInput): AuditLogsAggExp!
    contactPersons(limit: Int offset: Int order_by: [ContactPersonsOrderBy!] where: ContactPersonsBoolExp): [ContactPersons!]
    contactPersonsAggregate(filter_input: ContactPersonsFilterInput): ContactPersonsAggExp!
    country: Varchar!
    createdAt: Timestamptz!
    customer: Customers
    customerId: Int!
    description: Varchar!
    email: Varchar!
    emailAddressEntities(limit: Int offset: Int order_by: [EmailAddressEntityOrderBy!] where: EmailAddressEntityBoolExp): [EmailAddressEntity!]
    emailAddressEntitiesAggregate(filter_input: EmailAddressEntityFilterInput): EmailAddressEntityAggExp!
    id: Int!
    isActive: Bool!
    isPrimary: Bool!
    lastUpdatedAt: Timestamptz
    name: Varchar!
    phone: Varchar!
    phoneNumbers(limit: Int offset: Int order_by: [PhoneNumbersOrderBy!] where: PhoneNumbersBoolExp): [PhoneNumbers!]
    phoneNumbersAggregate(filter_input: PhoneNumbersFilterInput): PhoneNumbersAggExp!
    teams(limit: Int offset: Int order_by: [TeamsOrderBy!] where: TeamsBoolExp): [Teams!]
    teamsAggregate(filter_input: TeamsFilterInput): TeamsAggExp!
    tenantId: Int!
    type: Varchar!
    users(limit: Int offset: Int order_by: [UsersOrderBy!] where: UsersBoolExp): [Users!]
    usersAggregate(filter_input: UsersFilterInput): UsersAggExp!
    vatNumber: Varchar!
}

type TenantsAggExp {
    _count: Int!
    country: VarcharAggExp!
    createdAt: TimestamptzAggExp!
    customerId: IntAggExp!
    description: VarcharAggExp!
    email: VarcharAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    isPrimary: BoolAggExp!
    lastUpdatedAt: TimestamptzAggExp!
    name: VarcharAggExp!
    phone: VarcharAggExp!
    tenantId: IntAggExp!
    type: VarcharAggExp!
    vatNumber: VarcharAggExp!
}

input TenantsBoolExp {
    _and: [TenantsBoolExp!]
    _not: TenantsBoolExp
    _or: [TenantsBoolExp!]
    addresses: AddressesBoolExp
    auditLogs: AuditLogsBoolExp
    contactPersons: ContactPersonsBoolExp
    country: VarcharBoolExp
    createdAt: TimestamptzBoolExp
    customer: CustomersBoolExp
    customerId: IntBoolExp
    description: VarcharBoolExp
    email: VarcharBoolExp
    emailAddressEntities: EmailAddressEntityBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    isPrimary: BoolBoolExp
    lastUpdatedAt: TimestamptzBoolExp
    name: VarcharBoolExp
    phone: VarcharBoolExp
    phoneNumbers: PhoneNumbersBoolExp
    teams: TeamsBoolExp
    tenantId: IntBoolExp
    type: VarcharBoolExp
    users: UsersBoolExp
    vatNumber: VarcharBoolExp
}

input TenantsFilterInput {
    limit: Int
    offset: Int
    order_by: [TenantsOrderBy!]
    where: TenantsBoolExp
}

input TenantsOrderBy {
    country: OrderBy
    createdAt: OrderBy
    customer: CustomersOrderBy
    customerId: OrderBy
    description: OrderBy
    email: OrderBy
    id: OrderBy
    isActive: OrderBy
    isPrimary: OrderBy
    lastUpdatedAt: OrderBy
    name: OrderBy
    phone: OrderBy
    tenantId: OrderBy
    type: OrderBy
    vatNumber: OrderBy
}

scalar Text

type TextAggExp {
    _count: Int!
    _count_distinct: Int!
    max: Text
    min: Text
}

input TextBoolExp {
    _eq: Text
    _gt: Text
    _gte: Text
    _ilike: Text
    _in: [Text!]
    _iregex: Text
    _is_null: Boolean
    _like: Text
    _lt: Text
    _lte: Text
    _neq: Text
    _nilike: Text
    _niregex: Text
    _nlike: Text
    _nregex: Text
    _regex: Text
    starts_with: Text
    ts_match_tt: Text
}

scalar Timestamp

type TimestampAggExp {
    _count: Int!
    _count_distinct: Int!
    max: Timestamp
    min: Timestamp
}

input TimestampBoolExp {
    _eq: Timestamp
    _gt: Timestamp
    _gte: Timestamp
    _in: [Timestamp!]
    _is_null: Boolean
    _lt: Timestamp
    _lte: Timestamp
    _neq: Timestamp
}

scalar Timestamptz

type TimestamptzAggExp {
    _count: Int!
    _count_distinct: Int!
    max: Timestamptz
    min: Timestamptz
}

input TimestamptzBoolExp {
    _eq: Timestamptz
    _gt: Timestamptz
    _gte: Timestamptz
    _in: [Timestamptz!]
    _is_null: Boolean
    _lt: Timestamptz
    _lte: Timestamptz
    _neq: Timestamptz
}

"Responses from the 'update_Accounts_by_AccountId' procedure"
type UpdateAccountsByAccountIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Accounts!]!
}

"Update the columns of the 'Accounts' collection"
input UpdateAccountsByAccountIdUpdateColumnsInput {
    "Update the 'AccountId' column in the 'Accounts' collection."
    accountId: UpdateColumnAccountsAccountIdInput
    "Update the 'AdditionalMetadata' column in the 'Accounts' collection."
    additionalMetadata: UpdateColumnAccountsAdditionalMetadataInput
    "Update the 'CreatedAt' column in the 'Accounts' collection."
    createdAt: UpdateColumnAccountsCreatedAtInput
    "Update the 'Email' column in the 'Accounts' collection."
    email: UpdateColumnAccountsEmailInput
    "Update the 'IsActive' column in the 'Accounts' collection."
    isActive: UpdateColumnAccountsIsActiveInput
    "Update the 'PasswordHash' column in the 'Accounts' collection."
    passwordHash: UpdateColumnAccountsPasswordHashInput
    "Update the 'Role' column in the 'Accounts' collection."
    role: UpdateColumnAccountsRoleInput
    "Update the 'UpdatedAt' column in the 'Accounts' collection."
    updatedAt: UpdateColumnAccountsUpdatedAtInput
}

"Responses from the 'update_Addresses_by_Id' procedure"
type UpdateAddressesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Addresses!]!
}

"Update the columns of the 'Addresses' collection"
input UpdateAddressesByIdUpdateColumnsInput {
    "Update the 'CityId' column in the 'Addresses' collection."
    cityId: UpdateColumnAddressesCityIdInput
    "Update the 'ContactPersonEntityId' column in the 'Addresses' collection."
    contactPersonEntityId: UpdateColumnAddressesContactPersonEntityIdInput
    "Update the 'CountryId' column in the 'Addresses' collection."
    countryId: UpdateColumnAddressesCountryIdInput
    "Update the 'CustomerId' column in the 'Addresses' collection."
    customerId: UpdateColumnAddressesCustomerIdInput
    "Update the 'Floor' column in the 'Addresses' collection."
    floor: UpdateColumnAddressesFloorInput
    "Update the 'Id' column in the 'Addresses' collection."
    id: UpdateColumnAddressesIdInput
    "Update the 'IsPrimary' column in the 'Addresses' collection."
    isPrimary: UpdateColumnAddressesIsPrimaryInput
    "Update the 'Latitude' column in the 'Addresses' collection."
    latitude: UpdateColumnAddressesLatitudeInput
    "Update the 'Longtitude' column in the 'Addresses' collection."
    longtitude: UpdateColumnAddressesLongtitudeInput
    "Update the 'PostalCode' column in the 'Addresses' collection."
    postalCode: UpdateColumnAddressesPostalCodeInput
    "Update the 'State' column in the 'Addresses' collection."
    state: UpdateColumnAddressesStateInput
    "Update the 'StreetId' column in the 'Addresses' collection."
    streetId: UpdateColumnAddressesStreetIdInput
    "Update the 'StreetNumber' column in the 'Addresses' collection."
    streetNumber: UpdateColumnAddressesStreetNumberInput
    "Update the 'TenantId' column in the 'Addresses' collection."
    tenantId: UpdateColumnAddressesTenantIdInput
    "Update the 'UnitNumber' column in the 'Addresses' collection."
    unitNumber: UpdateColumnAddressesUnitNumberInput
    "Update the 'UserEntityId' column in the 'Addresses' collection."
    userEntityId: UpdateColumnAddressesUserEntityIdInput
}

"Responses from the 'update_AuditLogs_by_Id' procedure"
type UpdateAuditLogsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuditLogs!]!
}

"Update the columns of the 'AuditLogs' collection"
input UpdateAuditLogsByIdUpdateColumnsInput {
    "Update the 'Action' column in the 'AuditLogs' collection."
    action: UpdateColumnAuditLogsActionInput
    "Update the 'Category' column in the 'AuditLogs' collection."
    category: UpdateColumnAuditLogsCategoryInput
    "Update the 'Id' column in the 'AuditLogs' collection."
    id: UpdateColumnAuditLogsIdInput
    "Update the 'ModifiedAt' column in the 'AuditLogs' collection."
    modifiedAt: UpdateColumnAuditLogsModifiedAtInput
    "Update the 'ModifiedBy' column in the 'AuditLogs' collection."
    modifiedBy: UpdateColumnAuditLogsModifiedByInput
    "Update the 'NewValue' column in the 'AuditLogs' collection."
    newValue: UpdateColumnAuditLogsNewValueInput
    "Update the 'OldValue' column in the 'AuditLogs' collection."
    oldValue: UpdateColumnAuditLogsOldValueInput
    "Update the 'TenantId' column in the 'AuditLogs' collection."
    tenantId: UpdateColumnAuditLogsTenantIdInput
    "Update the 'UserId' column in the 'AuditLogs' collection."
    userId: UpdateColumnAuditLogsUserIdInput
}

"Responses from the 'update_auth_audit_log_entries_by_id' procedure"
type UpdateAuthAuditLogEntriesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthAuditLogEntries!]!
}

"Update the columns of the 'auth_audit_log_entries' collection"
input UpdateAuthAuditLogEntriesByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_audit_log_entries' collection."
    createdAt: UpdateColumnAuthAuditLogEntriesCreatedAtInput
    "Update the 'id' column in the 'auth_audit_log_entries' collection."
    id: UpdateColumnAuthAuditLogEntriesIdInput
    "Update the 'instance_id' column in the 'auth_audit_log_entries' collection."
    instanceId: UpdateColumnAuthAuditLogEntriesInstanceIdInput
    "Update the 'ip_address' column in the 'auth_audit_log_entries' collection."
    ipAddress: UpdateColumnAuthAuditLogEntriesIpAddressInput
    "Update the 'payload' column in the 'auth_audit_log_entries' collection."
    payload: UpdateColumnAuthAuditLogEntriesPayloadInput
}

"Responses from the 'update_auth_flow_state_by_id' procedure"
type UpdateAuthFlowStateByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthFlowState!]!
}

"Update the columns of the 'auth_flow_state' collection"
input UpdateAuthFlowStateByIdUpdateColumnsInput {
    "Update the 'auth_code' column in the 'auth_flow_state' collection."
    authCode: UpdateColumnAuthFlowStateAuthCodeInput
    "Update the 'auth_code_issued_at' column in the 'auth_flow_state' collection."
    authCodeIssuedAt: UpdateColumnAuthFlowStateAuthCodeIssuedAtInput
    "Update the 'authentication_method' column in the 'auth_flow_state' collection."
    authenticationMethod: UpdateColumnAuthFlowStateAuthenticationMethodInput
    "Update the 'code_challenge' column in the 'auth_flow_state' collection."
    codeChallenge: UpdateColumnAuthFlowStateCodeChallengeInput
    "Update the 'code_challenge_method' column in the 'auth_flow_state' collection."
    codeChallengeMethod: UpdateColumnAuthFlowStateCodeChallengeMethodInput
    "Update the 'created_at' column in the 'auth_flow_state' collection."
    createdAt: UpdateColumnAuthFlowStateCreatedAtInput
    "Update the 'id' column in the 'auth_flow_state' collection."
    id: UpdateColumnAuthFlowStateIdInput
    "Update the 'provider_access_token' column in the 'auth_flow_state' collection."
    providerAccessToken: UpdateColumnAuthFlowStateProviderAccessTokenInput
    "Update the 'provider_refresh_token' column in the 'auth_flow_state' collection."
    providerRefreshToken: UpdateColumnAuthFlowStateProviderRefreshTokenInput
    "Update the 'provider_type' column in the 'auth_flow_state' collection."
    providerType: UpdateColumnAuthFlowStateProviderTypeInput
    "Update the 'updated_at' column in the 'auth_flow_state' collection."
    updatedAt: UpdateColumnAuthFlowStateUpdatedAtInput
    "Update the 'user_id' column in the 'auth_flow_state' collection."
    userId: UpdateColumnAuthFlowStateUserIdInput
}

"Responses from the 'update_auth_identities_by_id' procedure"
type UpdateAuthIdentitiesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthIdentities!]!
}

"Update the columns of the 'auth_identities' collection"
input UpdateAuthIdentitiesByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_identities' collection."
    createdAt: UpdateColumnAuthIdentitiesCreatedAtInput
    "Update the 'id' column in the 'auth_identities' collection."
    id: UpdateColumnAuthIdentitiesIdInput
    "Update the 'identity_data' column in the 'auth_identities' collection."
    identityData: UpdateColumnAuthIdentitiesIdentityDataInput
    "Update the 'last_sign_in_at' column in the 'auth_identities' collection."
    lastSignInAt: UpdateColumnAuthIdentitiesLastSignInAtInput
    "Update the 'provider' column in the 'auth_identities' collection."
    provider: UpdateColumnAuthIdentitiesProviderInput
    "Update the 'provider_id' column in the 'auth_identities' collection."
    providerId: UpdateColumnAuthIdentitiesProviderIdInput
    "Update the 'updated_at' column in the 'auth_identities' collection."
    updatedAt: UpdateColumnAuthIdentitiesUpdatedAtInput
    "Update the 'user_id' column in the 'auth_identities' collection."
    userId: UpdateColumnAuthIdentitiesUserIdInput
}

"Responses from the 'update_auth_identities_by_provider_and_provider_id' procedure"
type UpdateAuthIdentitiesByProviderAndProviderIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthIdentities!]!
}

"Update the columns of the 'auth_identities' collection"
input UpdateAuthIdentitiesByProviderAndProviderIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_identities' collection."
    createdAt: UpdateColumnAuthIdentitiesCreatedAtInput
    "Update the 'id' column in the 'auth_identities' collection."
    id: UpdateColumnAuthIdentitiesIdInput
    "Update the 'identity_data' column in the 'auth_identities' collection."
    identityData: UpdateColumnAuthIdentitiesIdentityDataInput
    "Update the 'last_sign_in_at' column in the 'auth_identities' collection."
    lastSignInAt: UpdateColumnAuthIdentitiesLastSignInAtInput
    "Update the 'provider' column in the 'auth_identities' collection."
    provider: UpdateColumnAuthIdentitiesProviderInput
    "Update the 'provider_id' column in the 'auth_identities' collection."
    providerId: UpdateColumnAuthIdentitiesProviderIdInput
    "Update the 'updated_at' column in the 'auth_identities' collection."
    updatedAt: UpdateColumnAuthIdentitiesUpdatedAtInput
    "Update the 'user_id' column in the 'auth_identities' collection."
    userId: UpdateColumnAuthIdentitiesUserIdInput
}

"Responses from the 'update_auth_instances_by_id' procedure"
type UpdateAuthInstancesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthInstances!]!
}

"Update the columns of the 'auth_instances' collection"
input UpdateAuthInstancesByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_instances' collection."
    createdAt: UpdateColumnAuthInstancesCreatedAtInput
    "Update the 'id' column in the 'auth_instances' collection."
    id: UpdateColumnAuthInstancesIdInput
    "Update the 'raw_base_config' column in the 'auth_instances' collection."
    rawBaseConfig: UpdateColumnAuthInstancesRawBaseConfigInput
    "Update the 'updated_at' column in the 'auth_instances' collection."
    updatedAt: UpdateColumnAuthInstancesUpdatedAtInput
    "Update the 'uuid' column in the 'auth_instances' collection."
    uuid: UpdateColumnAuthInstancesUuidInput
}

"Responses from the 'update_auth_mfa_amr_claims_by_authentication_method_and_session_id' procedure"
type UpdateAuthMfaAmrClaimsByAuthenticationMethodAndSessionIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaAmrClaims!]!
}

"Update the columns of the 'auth_mfa_amr_claims' collection"
input UpdateAuthMfaAmrClaimsByAuthenticationMethodAndSessionIdUpdateColumnsInput {
    "Update the 'authentication_method' column in the 'auth_mfa_amr_claims' collection."
    authenticationMethod: UpdateColumnAuthMfaAmrClaimsAuthenticationMethodInput
    "Update the 'created_at' column in the 'auth_mfa_amr_claims' collection."
    createdAt: UpdateColumnAuthMfaAmrClaimsCreatedAtInput
    "Update the 'id' column in the 'auth_mfa_amr_claims' collection."
    id: UpdateColumnAuthMfaAmrClaimsIdInput
    "Update the 'session_id' column in the 'auth_mfa_amr_claims' collection."
    sessionId: UpdateColumnAuthMfaAmrClaimsSessionIdInput
    "Update the 'updated_at' column in the 'auth_mfa_amr_claims' collection."
    updatedAt: UpdateColumnAuthMfaAmrClaimsUpdatedAtInput
}

"Responses from the 'update_auth_mfa_amr_claims_by_id' procedure"
type UpdateAuthMfaAmrClaimsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaAmrClaims!]!
}

"Update the columns of the 'auth_mfa_amr_claims' collection"
input UpdateAuthMfaAmrClaimsByIdUpdateColumnsInput {
    "Update the 'authentication_method' column in the 'auth_mfa_amr_claims' collection."
    authenticationMethod: UpdateColumnAuthMfaAmrClaimsAuthenticationMethodInput
    "Update the 'created_at' column in the 'auth_mfa_amr_claims' collection."
    createdAt: UpdateColumnAuthMfaAmrClaimsCreatedAtInput
    "Update the 'id' column in the 'auth_mfa_amr_claims' collection."
    id: UpdateColumnAuthMfaAmrClaimsIdInput
    "Update the 'session_id' column in the 'auth_mfa_amr_claims' collection."
    sessionId: UpdateColumnAuthMfaAmrClaimsSessionIdInput
    "Update the 'updated_at' column in the 'auth_mfa_amr_claims' collection."
    updatedAt: UpdateColumnAuthMfaAmrClaimsUpdatedAtInput
}

"Responses from the 'update_auth_mfa_challenges_by_id' procedure"
type UpdateAuthMfaChallengesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaChallenges!]!
}

"Update the columns of the 'auth_mfa_challenges' collection"
input UpdateAuthMfaChallengesByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_mfa_challenges' collection."
    createdAt: UpdateColumnAuthMfaChallengesCreatedAtInput
    "Update the 'factor_id' column in the 'auth_mfa_challenges' collection."
    factorId: UpdateColumnAuthMfaChallengesFactorIdInput
    "Update the 'id' column in the 'auth_mfa_challenges' collection."
    id: UpdateColumnAuthMfaChallengesIdInput
    "Update the 'ip_address' column in the 'auth_mfa_challenges' collection."
    ipAddress: UpdateColumnAuthMfaChallengesIpAddressInput
    "Update the 'otp_code' column in the 'auth_mfa_challenges' collection."
    otpCode: UpdateColumnAuthMfaChallengesOtpCodeInput
    "Update the 'verified_at' column in the 'auth_mfa_challenges' collection."
    verifiedAt: UpdateColumnAuthMfaChallengesVerifiedAtInput
    "Update the 'web_authn_session_data' column in the 'auth_mfa_challenges' collection."
    webAuthnSessionData: UpdateColumnAuthMfaChallengesWebAuthnSessionDataInput
}

"Responses from the 'update_auth_mfa_factors_by_id' procedure"
type UpdateAuthMfaFactorsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaFactors!]!
}

"Update the columns of the 'auth_mfa_factors' collection"
input UpdateAuthMfaFactorsByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_mfa_factors' collection."
    createdAt: UpdateColumnAuthMfaFactorsCreatedAtInput
    "Update the 'factor_type' column in the 'auth_mfa_factors' collection."
    factorType: UpdateColumnAuthMfaFactorsFactorTypeInput
    "Update the 'friendly_name' column in the 'auth_mfa_factors' collection."
    friendlyName: UpdateColumnAuthMfaFactorsFriendlyNameInput
    "Update the 'id' column in the 'auth_mfa_factors' collection."
    id: UpdateColumnAuthMfaFactorsIdInput
    "Update the 'last_challenged_at' column in the 'auth_mfa_factors' collection."
    lastChallengedAt: UpdateColumnAuthMfaFactorsLastChallengedAtInput
    "Update the 'phone' column in the 'auth_mfa_factors' collection."
    phone: UpdateColumnAuthMfaFactorsPhoneInput
    "Update the 'secret' column in the 'auth_mfa_factors' collection."
    secret: UpdateColumnAuthMfaFactorsSecretInput
    "Update the 'status' column in the 'auth_mfa_factors' collection."
    status: UpdateColumnAuthMfaFactorsStatusInput
    "Update the 'updated_at' column in the 'auth_mfa_factors' collection."
    updatedAt: UpdateColumnAuthMfaFactorsUpdatedAtInput
    "Update the 'user_id' column in the 'auth_mfa_factors' collection."
    userId: UpdateColumnAuthMfaFactorsUserIdInput
    "Update the 'web_authn_aaguid' column in the 'auth_mfa_factors' collection."
    webAuthnAaguid: UpdateColumnAuthMfaFactorsWebAuthnAaguidInput
    "Update the 'web_authn_credential' column in the 'auth_mfa_factors' collection."
    webAuthnCredential: UpdateColumnAuthMfaFactorsWebAuthnCredentialInput
}

"Responses from the 'update_auth_mfa_factors_by_last_challenged_at' procedure"
type UpdateAuthMfaFactorsByLastChallengedAtResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthMfaFactors!]!
}

"Update the columns of the 'auth_mfa_factors' collection"
input UpdateAuthMfaFactorsByLastChallengedAtUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_mfa_factors' collection."
    createdAt: UpdateColumnAuthMfaFactorsCreatedAtInput
    "Update the 'factor_type' column in the 'auth_mfa_factors' collection."
    factorType: UpdateColumnAuthMfaFactorsFactorTypeInput
    "Update the 'friendly_name' column in the 'auth_mfa_factors' collection."
    friendlyName: UpdateColumnAuthMfaFactorsFriendlyNameInput
    "Update the 'id' column in the 'auth_mfa_factors' collection."
    id: UpdateColumnAuthMfaFactorsIdInput
    "Update the 'last_challenged_at' column in the 'auth_mfa_factors' collection."
    lastChallengedAt: UpdateColumnAuthMfaFactorsLastChallengedAtInput
    "Update the 'phone' column in the 'auth_mfa_factors' collection."
    phone: UpdateColumnAuthMfaFactorsPhoneInput
    "Update the 'secret' column in the 'auth_mfa_factors' collection."
    secret: UpdateColumnAuthMfaFactorsSecretInput
    "Update the 'status' column in the 'auth_mfa_factors' collection."
    status: UpdateColumnAuthMfaFactorsStatusInput
    "Update the 'updated_at' column in the 'auth_mfa_factors' collection."
    updatedAt: UpdateColumnAuthMfaFactorsUpdatedAtInput
    "Update the 'user_id' column in the 'auth_mfa_factors' collection."
    userId: UpdateColumnAuthMfaFactorsUserIdInput
    "Update the 'web_authn_aaguid' column in the 'auth_mfa_factors' collection."
    webAuthnAaguid: UpdateColumnAuthMfaFactorsWebAuthnAaguidInput
    "Update the 'web_authn_credential' column in the 'auth_mfa_factors' collection."
    webAuthnCredential: UpdateColumnAuthMfaFactorsWebAuthnCredentialInput
}

"Responses from the 'update_auth_one_time_tokens_by_id' procedure"
type UpdateAuthOneTimeTokensByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthOneTimeTokens!]!
}

"Update the columns of the 'auth_one_time_tokens' collection"
input UpdateAuthOneTimeTokensByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_one_time_tokens' collection."
    createdAt: UpdateColumnAuthOneTimeTokensCreatedAtInput
    "Update the 'id' column in the 'auth_one_time_tokens' collection."
    id: UpdateColumnAuthOneTimeTokensIdInput
    "Update the 'relates_to' column in the 'auth_one_time_tokens' collection."
    relatesTo: UpdateColumnAuthOneTimeTokensRelatesToInput
    "Update the 'token_hash' column in the 'auth_one_time_tokens' collection."
    tokenHash: UpdateColumnAuthOneTimeTokensTokenHashInput
    "Update the 'token_type' column in the 'auth_one_time_tokens' collection."
    tokenType: UpdateColumnAuthOneTimeTokensTokenTypeInput
    "Update the 'updated_at' column in the 'auth_one_time_tokens' collection."
    updatedAt: UpdateColumnAuthOneTimeTokensUpdatedAtInput
    "Update the 'user_id' column in the 'auth_one_time_tokens' collection."
    userId: UpdateColumnAuthOneTimeTokensUserIdInput
}

"Responses from the 'update_auth_refresh_tokens_by_id' procedure"
type UpdateAuthRefreshTokensByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthRefreshTokens!]!
}

"Update the columns of the 'auth_refresh_tokens' collection"
input UpdateAuthRefreshTokensByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_refresh_tokens' collection."
    createdAt: UpdateColumnAuthRefreshTokensCreatedAtInput
    "Update the 'id' column in the 'auth_refresh_tokens' collection."
    id: UpdateColumnAuthRefreshTokensIdInput
    "Update the 'instance_id' column in the 'auth_refresh_tokens' collection."
    instanceId: UpdateColumnAuthRefreshTokensInstanceIdInput
    "Update the 'parent' column in the 'auth_refresh_tokens' collection."
    parent: UpdateColumnAuthRefreshTokensParentInput
    "Update the 'revoked' column in the 'auth_refresh_tokens' collection."
    revoked: UpdateColumnAuthRefreshTokensRevokedInput
    "Update the 'session_id' column in the 'auth_refresh_tokens' collection."
    sessionId: UpdateColumnAuthRefreshTokensSessionIdInput
    "Update the 'token' column in the 'auth_refresh_tokens' collection."
    token: UpdateColumnAuthRefreshTokensTokenInput
    "Update the 'updated_at' column in the 'auth_refresh_tokens' collection."
    updatedAt: UpdateColumnAuthRefreshTokensUpdatedAtInput
    "Update the 'user_id' column in the 'auth_refresh_tokens' collection."
    userId: UpdateColumnAuthRefreshTokensUserIdInput
}

"Responses from the 'update_auth_refresh_tokens_by_token' procedure"
type UpdateAuthRefreshTokensByTokenResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthRefreshTokens!]!
}

"Update the columns of the 'auth_refresh_tokens' collection"
input UpdateAuthRefreshTokensByTokenUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_refresh_tokens' collection."
    createdAt: UpdateColumnAuthRefreshTokensCreatedAtInput
    "Update the 'id' column in the 'auth_refresh_tokens' collection."
    id: UpdateColumnAuthRefreshTokensIdInput
    "Update the 'instance_id' column in the 'auth_refresh_tokens' collection."
    instanceId: UpdateColumnAuthRefreshTokensInstanceIdInput
    "Update the 'parent' column in the 'auth_refresh_tokens' collection."
    parent: UpdateColumnAuthRefreshTokensParentInput
    "Update the 'revoked' column in the 'auth_refresh_tokens' collection."
    revoked: UpdateColumnAuthRefreshTokensRevokedInput
    "Update the 'session_id' column in the 'auth_refresh_tokens' collection."
    sessionId: UpdateColumnAuthRefreshTokensSessionIdInput
    "Update the 'token' column in the 'auth_refresh_tokens' collection."
    token: UpdateColumnAuthRefreshTokensTokenInput
    "Update the 'updated_at' column in the 'auth_refresh_tokens' collection."
    updatedAt: UpdateColumnAuthRefreshTokensUpdatedAtInput
    "Update the 'user_id' column in the 'auth_refresh_tokens' collection."
    userId: UpdateColumnAuthRefreshTokensUserIdInput
}

"Responses from the 'update_auth_saml_providers_by_entity_id' procedure"
type UpdateAuthSamlProvidersByEntityIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlProviders!]!
}

"Update the columns of the 'auth_saml_providers' collection"
input UpdateAuthSamlProvidersByEntityIdUpdateColumnsInput {
    "Update the 'attribute_mapping' column in the 'auth_saml_providers' collection."
    attributeMapping: UpdateColumnAuthSamlProvidersAttributeMappingInput
    "Update the 'created_at' column in the 'auth_saml_providers' collection."
    createdAt: UpdateColumnAuthSamlProvidersCreatedAtInput
    "Update the 'entity_id' column in the 'auth_saml_providers' collection."
    entityId: UpdateColumnAuthSamlProvidersEntityIdInput
    "Update the 'id' column in the 'auth_saml_providers' collection."
    id: UpdateColumnAuthSamlProvidersIdInput
    "Update the 'metadata_url' column in the 'auth_saml_providers' collection."
    metadataUrl: UpdateColumnAuthSamlProvidersMetadataUrlInput
    "Update the 'metadata_xml' column in the 'auth_saml_providers' collection."
    metadataXml: UpdateColumnAuthSamlProvidersMetadataXmlInput
    "Update the 'name_id_format' column in the 'auth_saml_providers' collection."
    nameIdFormat: UpdateColumnAuthSamlProvidersNameIdFormatInput
    "Update the 'sso_provider_id' column in the 'auth_saml_providers' collection."
    ssoProviderId: UpdateColumnAuthSamlProvidersSsoProviderIdInput
    "Update the 'updated_at' column in the 'auth_saml_providers' collection."
    updatedAt: UpdateColumnAuthSamlProvidersUpdatedAtInput
}

"Responses from the 'update_auth_saml_providers_by_id' procedure"
type UpdateAuthSamlProvidersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlProviders!]!
}

"Update the columns of the 'auth_saml_providers' collection"
input UpdateAuthSamlProvidersByIdUpdateColumnsInput {
    "Update the 'attribute_mapping' column in the 'auth_saml_providers' collection."
    attributeMapping: UpdateColumnAuthSamlProvidersAttributeMappingInput
    "Update the 'created_at' column in the 'auth_saml_providers' collection."
    createdAt: UpdateColumnAuthSamlProvidersCreatedAtInput
    "Update the 'entity_id' column in the 'auth_saml_providers' collection."
    entityId: UpdateColumnAuthSamlProvidersEntityIdInput
    "Update the 'id' column in the 'auth_saml_providers' collection."
    id: UpdateColumnAuthSamlProvidersIdInput
    "Update the 'metadata_url' column in the 'auth_saml_providers' collection."
    metadataUrl: UpdateColumnAuthSamlProvidersMetadataUrlInput
    "Update the 'metadata_xml' column in the 'auth_saml_providers' collection."
    metadataXml: UpdateColumnAuthSamlProvidersMetadataXmlInput
    "Update the 'name_id_format' column in the 'auth_saml_providers' collection."
    nameIdFormat: UpdateColumnAuthSamlProvidersNameIdFormatInput
    "Update the 'sso_provider_id' column in the 'auth_saml_providers' collection."
    ssoProviderId: UpdateColumnAuthSamlProvidersSsoProviderIdInput
    "Update the 'updated_at' column in the 'auth_saml_providers' collection."
    updatedAt: UpdateColumnAuthSamlProvidersUpdatedAtInput
}

"Responses from the 'update_auth_saml_relay_states_by_id' procedure"
type UpdateAuthSamlRelayStatesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSamlRelayStates!]!
}

"Update the columns of the 'auth_saml_relay_states' collection"
input UpdateAuthSamlRelayStatesByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_saml_relay_states' collection."
    createdAt: UpdateColumnAuthSamlRelayStatesCreatedAtInput
    "Update the 'flow_state_id' column in the 'auth_saml_relay_states' collection."
    flowStateId: UpdateColumnAuthSamlRelayStatesFlowStateIdInput
    "Update the 'for_email' column in the 'auth_saml_relay_states' collection."
    forEmail: UpdateColumnAuthSamlRelayStatesForEmailInput
    "Update the 'id' column in the 'auth_saml_relay_states' collection."
    id: UpdateColumnAuthSamlRelayStatesIdInput
    "Update the 'redirect_to' column in the 'auth_saml_relay_states' collection."
    redirectTo: UpdateColumnAuthSamlRelayStatesRedirectToInput
    "Update the 'request_id' column in the 'auth_saml_relay_states' collection."
    requestId: UpdateColumnAuthSamlRelayStatesRequestIdInput
    "Update the 'sso_provider_id' column in the 'auth_saml_relay_states' collection."
    ssoProviderId: UpdateColumnAuthSamlRelayStatesSsoProviderIdInput
    "Update the 'updated_at' column in the 'auth_saml_relay_states' collection."
    updatedAt: UpdateColumnAuthSamlRelayStatesUpdatedAtInput
}

"Responses from the 'update_auth_schema_migrations_by_version' procedure"
type UpdateAuthSchemaMigrationsByVersionResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSchemaMigrations!]!
}

"Update the columns of the 'auth_schema_migrations' collection"
input UpdateAuthSchemaMigrationsByVersionUpdateColumnsInput {
    "Update the 'version' column in the 'auth_schema_migrations' collection."
    version: UpdateColumnAuthSchemaMigrationsVersionInput
}

"Responses from the 'update_auth_sessions_by_id' procedure"
type UpdateAuthSessionsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSessions!]!
}

"Update the columns of the 'auth_sessions' collection"
input UpdateAuthSessionsByIdUpdateColumnsInput {
    "Update the 'aal' column in the 'auth_sessions' collection."
    aal: UpdateColumnAuthSessionsAalInput
    "Update the 'created_at' column in the 'auth_sessions' collection."
    createdAt: UpdateColumnAuthSessionsCreatedAtInput
    "Update the 'factor_id' column in the 'auth_sessions' collection."
    factorId: UpdateColumnAuthSessionsFactorIdInput
    "Update the 'id' column in the 'auth_sessions' collection."
    id: UpdateColumnAuthSessionsIdInput
    "Update the 'ip' column in the 'auth_sessions' collection."
    ip: UpdateColumnAuthSessionsIpInput
    "Update the 'not_after' column in the 'auth_sessions' collection."
    notAfter: UpdateColumnAuthSessionsNotAfterInput
    "Update the 'refreshed_at' column in the 'auth_sessions' collection."
    refreshedAt: UpdateColumnAuthSessionsRefreshedAtInput
    "Update the 'tag' column in the 'auth_sessions' collection."
    tag: UpdateColumnAuthSessionsTagInput
    "Update the 'updated_at' column in the 'auth_sessions' collection."
    updatedAt: UpdateColumnAuthSessionsUpdatedAtInput
    "Update the 'user_agent' column in the 'auth_sessions' collection."
    userAgent: UpdateColumnAuthSessionsUserAgentInput
    "Update the 'user_id' column in the 'auth_sessions' collection."
    userId: UpdateColumnAuthSessionsUserIdInput
}

"Responses from the 'update_auth_sso_domains_by_id' procedure"
type UpdateAuthSsoDomainsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSsoDomains!]!
}

"Update the columns of the 'auth_sso_domains' collection"
input UpdateAuthSsoDomainsByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_sso_domains' collection."
    createdAt: UpdateColumnAuthSsoDomainsCreatedAtInput
    "Update the 'domain' column in the 'auth_sso_domains' collection."
    domain: UpdateColumnAuthSsoDomainsDomainInput
    "Update the 'id' column in the 'auth_sso_domains' collection."
    id: UpdateColumnAuthSsoDomainsIdInput
    "Update the 'sso_provider_id' column in the 'auth_sso_domains' collection."
    ssoProviderId: UpdateColumnAuthSsoDomainsSsoProviderIdInput
    "Update the 'updated_at' column in the 'auth_sso_domains' collection."
    updatedAt: UpdateColumnAuthSsoDomainsUpdatedAtInput
}

"Responses from the 'update_auth_sso_providers_by_id' procedure"
type UpdateAuthSsoProvidersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthSsoProviders!]!
}

"Update the columns of the 'auth_sso_providers' collection"
input UpdateAuthSsoProvidersByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'auth_sso_providers' collection."
    createdAt: UpdateColumnAuthSsoProvidersCreatedAtInput
    "Update the 'id' column in the 'auth_sso_providers' collection."
    id: UpdateColumnAuthSsoProvidersIdInput
    "Update the 'resource_id' column in the 'auth_sso_providers' collection."
    resourceId: UpdateColumnAuthSsoProvidersResourceIdInput
    "Update the 'updated_at' column in the 'auth_sso_providers' collection."
    updatedAt: UpdateColumnAuthSsoProvidersUpdatedAtInput
}

"Responses from the 'update_auth_users_by_id' procedure"
type UpdateAuthUsersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthUsers!]!
}

"Update the columns of the 'auth_users' collection"
input UpdateAuthUsersByIdUpdateColumnsInput {
    "Update the 'aud' column in the 'auth_users' collection."
    aud: UpdateColumnAuthUsersAudInput
    "Update the 'banned_until' column in the 'auth_users' collection."
    bannedUntil: UpdateColumnAuthUsersBannedUntilInput
    "Update the 'confirmation_sent_at' column in the 'auth_users' collection."
    confirmationSentAt: UpdateColumnAuthUsersConfirmationSentAtInput
    "Update the 'confirmation_token' column in the 'auth_users' collection."
    confirmationToken: UpdateColumnAuthUsersConfirmationTokenInput
    "Update the 'created_at' column in the 'auth_users' collection."
    createdAt: UpdateColumnAuthUsersCreatedAtInput
    "Update the 'deleted_at' column in the 'auth_users' collection."
    deletedAt: UpdateColumnAuthUsersDeletedAtInput
    "Update the 'email' column in the 'auth_users' collection."
    email: UpdateColumnAuthUsersEmailInput
    "Update the 'email_change' column in the 'auth_users' collection."
    emailChange: UpdateColumnAuthUsersEmailChangeInput
    "Update the 'email_change_confirm_status' column in the 'auth_users' collection."
    emailChangeConfirmStatus: UpdateColumnAuthUsersEmailChangeConfirmStatusInput
    "Update the 'email_change_sent_at' column in the 'auth_users' collection."
    emailChangeSentAt: UpdateColumnAuthUsersEmailChangeSentAtInput
    "Update the 'email_change_token_current' column in the 'auth_users' collection."
    emailChangeTokenCurrent: UpdateColumnAuthUsersEmailChangeTokenCurrentInput
    "Update the 'email_change_token_new' column in the 'auth_users' collection."
    emailChangeTokenNew: UpdateColumnAuthUsersEmailChangeTokenNewInput
    "Update the 'email_confirmed_at' column in the 'auth_users' collection."
    emailConfirmedAt: UpdateColumnAuthUsersEmailConfirmedAtInput
    "Update the 'encrypted_password' column in the 'auth_users' collection."
    encryptedPassword: UpdateColumnAuthUsersEncryptedPasswordInput
    "Update the 'id' column in the 'auth_users' collection."
    id: UpdateColumnAuthUsersIdInput
    "Update the 'instance_id' column in the 'auth_users' collection."
    instanceId: UpdateColumnAuthUsersInstanceIdInput
    "Update the 'invited_at' column in the 'auth_users' collection."
    invitedAt: UpdateColumnAuthUsersInvitedAtInput
    "Update the 'is_anonymous' column in the 'auth_users' collection."
    isAnonymous: UpdateColumnAuthUsersIsAnonymousInput
    "Update the 'is_sso_user' column in the 'auth_users' collection."
    isSsoUser: UpdateColumnAuthUsersIsSsoUserInput
    "Update the 'is_super_admin' column in the 'auth_users' collection."
    isSuperAdmin: UpdateColumnAuthUsersIsSuperAdminInput
    "Update the 'last_sign_in_at' column in the 'auth_users' collection."
    lastSignInAt: UpdateColumnAuthUsersLastSignInAtInput
    "Update the 'phone' column in the 'auth_users' collection."
    phone: UpdateColumnAuthUsersPhoneInput
    "Update the 'phone_change' column in the 'auth_users' collection."
    phoneChange: UpdateColumnAuthUsersPhoneChangeInput
    "Update the 'phone_change_sent_at' column in the 'auth_users' collection."
    phoneChangeSentAt: UpdateColumnAuthUsersPhoneChangeSentAtInput
    "Update the 'phone_change_token' column in the 'auth_users' collection."
    phoneChangeToken: UpdateColumnAuthUsersPhoneChangeTokenInput
    "Update the 'phone_confirmed_at' column in the 'auth_users' collection."
    phoneConfirmedAt: UpdateColumnAuthUsersPhoneConfirmedAtInput
    "Update the 'raw_app_meta_data' column in the 'auth_users' collection."
    rawAppMetaData: UpdateColumnAuthUsersRawAppMetaDataInput
    "Update the 'raw_user_meta_data' column in the 'auth_users' collection."
    rawUserMetaData: UpdateColumnAuthUsersRawUserMetaDataInput
    "Update the 'reauthentication_sent_at' column in the 'auth_users' collection."
    reauthenticationSentAt: UpdateColumnAuthUsersReauthenticationSentAtInput
    "Update the 'reauthentication_token' column in the 'auth_users' collection."
    reauthenticationToken: UpdateColumnAuthUsersReauthenticationTokenInput
    "Update the 'recovery_sent_at' column in the 'auth_users' collection."
    recoverySentAt: UpdateColumnAuthUsersRecoverySentAtInput
    "Update the 'recovery_token' column in the 'auth_users' collection."
    recoveryToken: UpdateColumnAuthUsersRecoveryTokenInput
    "Update the 'role' column in the 'auth_users' collection."
    role: UpdateColumnAuthUsersRoleInput
    "Update the 'updated_at' column in the 'auth_users' collection."
    updatedAt: UpdateColumnAuthUsersUpdatedAtInput
}

"Responses from the 'update_auth_users_by_phone' procedure"
type UpdateAuthUsersByPhoneResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [AuthUsers!]!
}

"Update the columns of the 'auth_users' collection"
input UpdateAuthUsersByPhoneUpdateColumnsInput {
    "Update the 'aud' column in the 'auth_users' collection."
    aud: UpdateColumnAuthUsersAudInput
    "Update the 'banned_until' column in the 'auth_users' collection."
    bannedUntil: UpdateColumnAuthUsersBannedUntilInput
    "Update the 'confirmation_sent_at' column in the 'auth_users' collection."
    confirmationSentAt: UpdateColumnAuthUsersConfirmationSentAtInput
    "Update the 'confirmation_token' column in the 'auth_users' collection."
    confirmationToken: UpdateColumnAuthUsersConfirmationTokenInput
    "Update the 'created_at' column in the 'auth_users' collection."
    createdAt: UpdateColumnAuthUsersCreatedAtInput
    "Update the 'deleted_at' column in the 'auth_users' collection."
    deletedAt: UpdateColumnAuthUsersDeletedAtInput
    "Update the 'email' column in the 'auth_users' collection."
    email: UpdateColumnAuthUsersEmailInput
    "Update the 'email_change' column in the 'auth_users' collection."
    emailChange: UpdateColumnAuthUsersEmailChangeInput
    "Update the 'email_change_confirm_status' column in the 'auth_users' collection."
    emailChangeConfirmStatus: UpdateColumnAuthUsersEmailChangeConfirmStatusInput
    "Update the 'email_change_sent_at' column in the 'auth_users' collection."
    emailChangeSentAt: UpdateColumnAuthUsersEmailChangeSentAtInput
    "Update the 'email_change_token_current' column in the 'auth_users' collection."
    emailChangeTokenCurrent: UpdateColumnAuthUsersEmailChangeTokenCurrentInput
    "Update the 'email_change_token_new' column in the 'auth_users' collection."
    emailChangeTokenNew: UpdateColumnAuthUsersEmailChangeTokenNewInput
    "Update the 'email_confirmed_at' column in the 'auth_users' collection."
    emailConfirmedAt: UpdateColumnAuthUsersEmailConfirmedAtInput
    "Update the 'encrypted_password' column in the 'auth_users' collection."
    encryptedPassword: UpdateColumnAuthUsersEncryptedPasswordInput
    "Update the 'id' column in the 'auth_users' collection."
    id: UpdateColumnAuthUsersIdInput
    "Update the 'instance_id' column in the 'auth_users' collection."
    instanceId: UpdateColumnAuthUsersInstanceIdInput
    "Update the 'invited_at' column in the 'auth_users' collection."
    invitedAt: UpdateColumnAuthUsersInvitedAtInput
    "Update the 'is_anonymous' column in the 'auth_users' collection."
    isAnonymous: UpdateColumnAuthUsersIsAnonymousInput
    "Update the 'is_sso_user' column in the 'auth_users' collection."
    isSsoUser: UpdateColumnAuthUsersIsSsoUserInput
    "Update the 'is_super_admin' column in the 'auth_users' collection."
    isSuperAdmin: UpdateColumnAuthUsersIsSuperAdminInput
    "Update the 'last_sign_in_at' column in the 'auth_users' collection."
    lastSignInAt: UpdateColumnAuthUsersLastSignInAtInput
    "Update the 'phone' column in the 'auth_users' collection."
    phone: UpdateColumnAuthUsersPhoneInput
    "Update the 'phone_change' column in the 'auth_users' collection."
    phoneChange: UpdateColumnAuthUsersPhoneChangeInput
    "Update the 'phone_change_sent_at' column in the 'auth_users' collection."
    phoneChangeSentAt: UpdateColumnAuthUsersPhoneChangeSentAtInput
    "Update the 'phone_change_token' column in the 'auth_users' collection."
    phoneChangeToken: UpdateColumnAuthUsersPhoneChangeTokenInput
    "Update the 'phone_confirmed_at' column in the 'auth_users' collection."
    phoneConfirmedAt: UpdateColumnAuthUsersPhoneConfirmedAtInput
    "Update the 'raw_app_meta_data' column in the 'auth_users' collection."
    rawAppMetaData: UpdateColumnAuthUsersRawAppMetaDataInput
    "Update the 'raw_user_meta_data' column in the 'auth_users' collection."
    rawUserMetaData: UpdateColumnAuthUsersRawUserMetaDataInput
    "Update the 'reauthentication_sent_at' column in the 'auth_users' collection."
    reauthenticationSentAt: UpdateColumnAuthUsersReauthenticationSentAtInput
    "Update the 'reauthentication_token' column in the 'auth_users' collection."
    reauthenticationToken: UpdateColumnAuthUsersReauthenticationTokenInput
    "Update the 'recovery_sent_at' column in the 'auth_users' collection."
    recoverySentAt: UpdateColumnAuthUsersRecoverySentAtInput
    "Update the 'recovery_token' column in the 'auth_users' collection."
    recoveryToken: UpdateColumnAuthUsersRecoveryTokenInput
    "Update the 'role' column in the 'auth_users' collection."
    role: UpdateColumnAuthUsersRoleInput
    "Update the 'updated_at' column in the 'auth_users' collection."
    updatedAt: UpdateColumnAuthUsersUpdatedAtInput
}

"Responses from the 'update_CityEntity_by_Id' procedure"
type UpdateCityEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [CityEntity!]!
}

"Update the columns of the 'CityEntity' collection"
input UpdateCityEntityByIdUpdateColumnsInput {
    "Update the 'CountryId' column in the 'CityEntity' collection."
    countryId: UpdateColumnCityEntityCountryIdInput
    "Update the 'Id' column in the 'CityEntity' collection."
    id: UpdateColumnCityEntityIdInput
    "Update the 'Name' column in the 'CityEntity' collection."
    name: UpdateColumnCityEntityNameInput
    "Update the 'PostalCode' column in the 'CityEntity' collection."
    postalCode: UpdateColumnCityEntityPostalCodeInput
    "Update the 'StateId' column in the 'CityEntity' collection."
    stateId: UpdateColumnCityEntityStateIdInput
}

"Update the 'AccountId' column in the 'Accounts' collection"
input UpdateColumnAccountsAccountIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'AdditionalMetadata' column in the 'Accounts' collection"
input UpdateColumnAccountsAdditionalMetadataInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'Accounts' collection"
input UpdateColumnAccountsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Email' column in the 'Accounts' collection"
input UpdateColumnAccountsEmailInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'IsActive' column in the 'Accounts' collection"
input UpdateColumnAccountsIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'PasswordHash' column in the 'Accounts' collection"
input UpdateColumnAccountsPasswordHashInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Role' column in the 'Accounts' collection"
input UpdateColumnAccountsRoleInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'UpdatedAt' column in the 'Accounts' collection"
input UpdateColumnAccountsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'CityId' column in the 'Addresses' collection"
input UpdateColumnAddressesCityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'ContactPersonEntityId' column in the 'Addresses' collection"
input UpdateColumnAddressesContactPersonEntityIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'CountryId' column in the 'Addresses' collection"
input UpdateColumnAddressesCountryIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CustomerId' column in the 'Addresses' collection"
input UpdateColumnAddressesCustomerIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'Floor' column in the 'Addresses' collection"
input UpdateColumnAddressesFloorInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Addresses' collection"
input UpdateColumnAddressesIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsPrimary' column in the 'Addresses' collection"
input UpdateColumnAddressesIsPrimaryInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'Latitude' column in the 'Addresses' collection"
input UpdateColumnAddressesLatitudeInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'Longtitude' column in the 'Addresses' collection"
input UpdateColumnAddressesLongtitudeInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'PostalCode' column in the 'Addresses' collection"
input UpdateColumnAddressesPostalCodeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'State' column in the 'Addresses' collection"
input UpdateColumnAddressesStateInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'StreetId' column in the 'Addresses' collection"
input UpdateColumnAddressesStreetIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'StreetNumber' column in the 'Addresses' collection"
input UpdateColumnAddressesStreetNumberInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'TenantId' column in the 'Addresses' collection"
input UpdateColumnAddressesTenantIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'UnitNumber' column in the 'Addresses' collection"
input UpdateColumnAddressesUnitNumberInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'UserEntityId' column in the 'Addresses' collection"
input UpdateColumnAddressesUserEntityIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'Action' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsActionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Category' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsCategoryInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'ModifiedAt' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsModifiedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'ModifiedBy' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsModifiedByInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'NewValue' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsNewValueInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'OldValue' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsOldValueInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'TenantId' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsTenantIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'UserId' column in the 'AuditLogs' collection"
input UpdateColumnAuditLogsUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'created_at' column in the 'auth_audit_log_entries' collection"
input UpdateColumnAuthAuditLogEntriesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'auth_audit_log_entries' collection"
input UpdateColumnAuthAuditLogEntriesIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'instance_id' column in the 'auth_audit_log_entries' collection"
input UpdateColumnAuthAuditLogEntriesInstanceIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'ip_address' column in the 'auth_audit_log_entries' collection"
input UpdateColumnAuthAuditLogEntriesIpAddressInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'payload' column in the 'auth_audit_log_entries' collection"
input UpdateColumnAuthAuditLogEntriesPayloadInput {
    "Set the column to this value"
    set: Json
}

"Update the 'auth_code' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateAuthCodeInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'auth_code_issued_at' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateAuthCodeIssuedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'authentication_method' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateAuthenticationMethodInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'code_challenge' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateCodeChallengeInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'code_challenge_method' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateCodeChallengeMethodInput {
    "Set the column to this value"
    set: AuthCodeChallengeMethod!
}

"Update the 'created_at' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'provider_access_token' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateProviderAccessTokenInput {
    "Set the column to this value"
    set: Text
}

"Update the 'provider_refresh_token' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateProviderRefreshTokenInput {
    "Set the column to this value"
    set: Text
}

"Update the 'provider_type' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateProviderTypeInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'updated_at' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'user_id' column in the 'auth_flow_state' collection"
input UpdateColumnAuthFlowStateUserIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'created_at' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'identity_data' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesIdentityDataInput {
    "Set the column to this value"
    set: Jsonb!
}

"Update the 'last_sign_in_at' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesLastSignInAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'provider_id' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesProviderIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'provider' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesProviderInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'updated_at' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'user_id' column in the 'auth_identities' collection"
input UpdateColumnAuthIdentitiesUserIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'created_at' column in the 'auth_instances' collection"
input UpdateColumnAuthInstancesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'auth_instances' collection"
input UpdateColumnAuthInstancesIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'raw_base_config' column in the 'auth_instances' collection"
input UpdateColumnAuthInstancesRawBaseConfigInput {
    "Set the column to this value"
    set: Text
}

"Update the 'updated_at' column in the 'auth_instances' collection"
input UpdateColumnAuthInstancesUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'uuid' column in the 'auth_instances' collection"
input UpdateColumnAuthInstancesUuidInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'authentication_method' column in the 'auth_mfa_amr_claims' collection"
input UpdateColumnAuthMfaAmrClaimsAuthenticationMethodInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'created_at' column in the 'auth_mfa_amr_claims' collection"
input UpdateColumnAuthMfaAmrClaimsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'id' column in the 'auth_mfa_amr_claims' collection"
input UpdateColumnAuthMfaAmrClaimsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'session_id' column in the 'auth_mfa_amr_claims' collection"
input UpdateColumnAuthMfaAmrClaimsSessionIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'updated_at' column in the 'auth_mfa_amr_claims' collection"
input UpdateColumnAuthMfaAmrClaimsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'created_at' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'factor_id' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesFactorIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'id' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'ip_address' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesIpAddressInput {
    "Set the column to this value"
    set: Inet!
}

"Update the 'otp_code' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesOtpCodeInput {
    "Set the column to this value"
    set: Text
}

"Update the 'verified_at' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesVerifiedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'web_authn_session_data' column in the 'auth_mfa_challenges' collection"
input UpdateColumnAuthMfaChallengesWebAuthnSessionDataInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'created_at' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'factor_type' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsFactorTypeInput {
    "Set the column to this value"
    set: AuthFactorType!
}

"Update the 'friendly_name' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsFriendlyNameInput {
    "Set the column to this value"
    set: Text
}

"Update the 'id' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'last_challenged_at' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsLastChallengedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'phone' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsPhoneInput {
    "Set the column to this value"
    set: Text
}

"Update the 'secret' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsSecretInput {
    "Set the column to this value"
    set: Text
}

"Update the 'status' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsStatusInput {
    "Set the column to this value"
    set: AuthFactorStatus!
}

"Update the 'updated_at' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'user_id' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsUserIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'web_authn_aaguid' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsWebAuthnAaguidInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'web_authn_credential' column in the 'auth_mfa_factors' collection"
input UpdateColumnAuthMfaFactorsWebAuthnCredentialInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'created_at' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensCreatedAtInput {
    "Set the column to this value"
    set: Timestamp!
}

"Update the 'id' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'relates_to' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensRelatesToInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'token_hash' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensTokenHashInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'token_type' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensTokenTypeInput {
    "Set the column to this value"
    set: AuthOneTimeTokenType!
}

"Update the 'updated_at' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensUpdatedAtInput {
    "Set the column to this value"
    set: Timestamp!
}

"Update the 'user_id' column in the 'auth_one_time_tokens' collection"
input UpdateColumnAuthOneTimeTokensUserIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'created_at' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensIdInput {
    "Set the column to this value"
    set: Int8!
}

"Update the 'instance_id' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensInstanceIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'parent' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensParentInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'revoked' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensRevokedInput {
    "Set the column to this value"
    set: Bool
}

"Update the 'session_id' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensSessionIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'token' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensTokenInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'updated_at' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'user_id' column in the 'auth_refresh_tokens' collection"
input UpdateColumnAuthRefreshTokensUserIdInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'attribute_mapping' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersAttributeMappingInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'created_at' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'entity_id' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersEntityIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'id' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'metadata_url' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersMetadataUrlInput {
    "Set the column to this value"
    set: Text
}

"Update the 'metadata_xml' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersMetadataXmlInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'name_id_format' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersNameIdFormatInput {
    "Set the column to this value"
    set: Text
}

"Update the 'sso_provider_id' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersSsoProviderIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'updated_at' column in the 'auth_saml_providers' collection"
input UpdateColumnAuthSamlProvidersUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'created_at' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'flow_state_id' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesFlowStateIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'for_email' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesForEmailInput {
    "Set the column to this value"
    set: Text
}

"Update the 'id' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'redirect_to' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesRedirectToInput {
    "Set the column to this value"
    set: Text
}

"Update the 'request_id' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesRequestIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'sso_provider_id' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesSsoProviderIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'updated_at' column in the 'auth_saml_relay_states' collection"
input UpdateColumnAuthSamlRelayStatesUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'version' column in the 'auth_schema_migrations' collection"
input UpdateColumnAuthSchemaMigrationsVersionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'aal' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsAalInput {
    "Set the column to this value"
    set: AuthAalLevel
}

"Update the 'created_at' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'factor_id' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsFactorIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'id' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'ip' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsIpInput {
    "Set the column to this value"
    set: Inet
}

"Update the 'not_after' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsNotAfterInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'refreshed_at' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsRefreshedAtInput {
    "Set the column to this value"
    set: Timestamp
}

"Update the 'tag' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsTagInput {
    "Set the column to this value"
    set: Text
}

"Update the 'updated_at' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'user_agent' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsUserAgentInput {
    "Set the column to this value"
    set: Text
}

"Update the 'user_id' column in the 'auth_sessions' collection"
input UpdateColumnAuthSessionsUserIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'created_at' column in the 'auth_sso_domains' collection"
input UpdateColumnAuthSsoDomainsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'domain' column in the 'auth_sso_domains' collection"
input UpdateColumnAuthSsoDomainsDomainInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'id' column in the 'auth_sso_domains' collection"
input UpdateColumnAuthSsoDomainsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'sso_provider_id' column in the 'auth_sso_domains' collection"
input UpdateColumnAuthSsoDomainsSsoProviderIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'updated_at' column in the 'auth_sso_domains' collection"
input UpdateColumnAuthSsoDomainsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'created_at' column in the 'auth_sso_providers' collection"
input UpdateColumnAuthSsoProvidersCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'auth_sso_providers' collection"
input UpdateColumnAuthSsoProvidersIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'resource_id' column in the 'auth_sso_providers' collection"
input UpdateColumnAuthSsoProvidersResourceIdInput {
    "Set the column to this value"
    set: Text
}

"Update the 'updated_at' column in the 'auth_sso_providers' collection"
input UpdateColumnAuthSsoProvidersUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'aud' column in the 'auth_users' collection"
input UpdateColumnAuthUsersAudInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'banned_until' column in the 'auth_users' collection"
input UpdateColumnAuthUsersBannedUntilInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'confirmation_sent_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersConfirmationSentAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'confirmation_token' column in the 'auth_users' collection"
input UpdateColumnAuthUsersConfirmationTokenInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'created_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'deleted_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersDeletedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'email_change_confirm_status' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailChangeConfirmStatusInput {
    "Set the column to this value"
    set: Int2
}

"Update the 'email_change' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailChangeInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'email_change_sent_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailChangeSentAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'email_change_token_current' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailChangeTokenCurrentInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'email_change_token_new' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailChangeTokenNewInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'email_confirmed_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailConfirmedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'email' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEmailInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'encrypted_password' column in the 'auth_users' collection"
input UpdateColumnAuthUsersEncryptedPasswordInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'id' column in the 'auth_users' collection"
input UpdateColumnAuthUsersIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'instance_id' column in the 'auth_users' collection"
input UpdateColumnAuthUsersInstanceIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'invited_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersInvitedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'is_anonymous' column in the 'auth_users' collection"
input UpdateColumnAuthUsersIsAnonymousInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'is_sso_user' column in the 'auth_users' collection"
input UpdateColumnAuthUsersIsSsoUserInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'is_super_admin' column in the 'auth_users' collection"
input UpdateColumnAuthUsersIsSuperAdminInput {
    "Set the column to this value"
    set: Bool
}

"Update the 'last_sign_in_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersLastSignInAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'phone_change' column in the 'auth_users' collection"
input UpdateColumnAuthUsersPhoneChangeInput {
    "Set the column to this value"
    set: Text
}

"Update the 'phone_change_sent_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersPhoneChangeSentAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'phone_change_token' column in the 'auth_users' collection"
input UpdateColumnAuthUsersPhoneChangeTokenInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'phone_confirmed_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersPhoneConfirmedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'phone' column in the 'auth_users' collection"
input UpdateColumnAuthUsersPhoneInput {
    "Set the column to this value"
    set: Text
}

"Update the 'raw_app_meta_data' column in the 'auth_users' collection"
input UpdateColumnAuthUsersRawAppMetaDataInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'raw_user_meta_data' column in the 'auth_users' collection"
input UpdateColumnAuthUsersRawUserMetaDataInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'reauthentication_sent_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersReauthenticationSentAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'reauthentication_token' column in the 'auth_users' collection"
input UpdateColumnAuthUsersReauthenticationTokenInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'recovery_sent_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersRecoverySentAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'recovery_token' column in the 'auth_users' collection"
input UpdateColumnAuthUsersRecoveryTokenInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'role' column in the 'auth_users' collection"
input UpdateColumnAuthUsersRoleInput {
    "Set the column to this value"
    set: Varchar
}

"Update the 'updated_at' column in the 'auth_users' collection"
input UpdateColumnAuthUsersUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'CountryId' column in the 'CityEntity' collection"
input UpdateColumnCityEntityCountryIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Id' column in the 'CityEntity' collection"
input UpdateColumnCityEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Name' column in the 'CityEntity' collection"
input UpdateColumnCityEntityNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'PostalCode' column in the 'CityEntity' collection"
input UpdateColumnCityEntityPostalCodeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'StateId' column in the 'CityEntity' collection"
input UpdateColumnCityEntityStateIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CustomerId' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsCustomerIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'FirstName' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsFirstNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'IsPrimary' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsIsPrimaryInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'LastName' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsLastNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'TenantId' column in the 'ContactPersons' collection"
input UpdateColumnContactPersonsTenantIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CityId' column in the 'CountryEntity' collection"
input UpdateColumnCountryEntityCityIdInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'GlobalRegionId' column in the 'CountryEntity' collection"
input UpdateColumnCountryEntityGlobalRegionIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Id' column in the 'CountryEntity' collection"
input UpdateColumnCountryEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsoCode' column in the 'CountryEntity' collection"
input UpdateColumnCountryEntityIsoCodeInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Name' column in the 'CountryEntity' collection"
input UpdateColumnCountryEntityNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Country' column in the 'Customers' collection"
input UpdateColumnCustomersCountryInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CurrentlyAtOnboardingFlowStep' column in the 'Customers' collection"
input UpdateColumnCustomersCurrentlyAtOnboardingFlowStepInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CustomerType' column in the 'Customers' collection"
input UpdateColumnCustomersCustomerTypeInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Id' column in the 'Customers' collection"
input UpdateColumnCustomersIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'StripeCustomerId' column in the 'Customers' collection"
input UpdateColumnCustomersStripeCustomerIdInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'StripeSubscriptionId' column in the 'Customers' collection"
input UpdateColumnCustomersStripeSubscriptionIdInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Type' column in the 'Customers' collection"
input UpdateColumnCustomersTypeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'VatId' column in the 'Customers' collection"
input UpdateColumnCustomersVatIdInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'VatNumber' column in the 'Customers' collection"
input UpdateColumnCustomersVatNumberInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'MigrationId' column in the '__EFMigrationsHistory' collection"
input UpdateColumnEfMigrationsHistoryMigrationIdInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'ProductVersion' column in the '__EFMigrationsHistory' collection"
input UpdateColumnEfMigrationsHistoryProductVersionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Address' column in the 'EmailAddressEntity' collection"
input UpdateColumnEmailAddressEntityAddressInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'ContactPersonId' column in the 'EmailAddressEntity' collection"
input UpdateColumnEmailAddressEntityContactPersonIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CustomerId' column in the 'EmailAddressEntity' collection"
input UpdateColumnEmailAddressEntityCustomerIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'Id' column in the 'EmailAddressEntity' collection"
input UpdateColumnEmailAddressEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'TenantId' column in the 'EmailAddressEntity' collection"
input UpdateColumnEmailAddressEntityTenantIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'UserId' column in the 'EmailAddressEntity' collection"
input UpdateColumnEmailAddressEntityUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CreatedAt' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'ExpireAt' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityExpireAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Id' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'InviteIsUsed' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityInviteIsUsedInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'LastUpdatedAt' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'ReferredEmailAddress' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityReferredEmailAddressInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Token' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityTokenInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'UserEntityId' column in the 'EmailInviteEntity' collection"
input UpdateColumnEmailInviteEntityUserEntityIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'CreatedAt' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'ExpireAt' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityExpireAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'HasBeenOpened' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityHasBeenOpenedInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'HasBeenVerified' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityHasBeenVerifiedInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'Id' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'LastUpdatedAt' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Token' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityTokenInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'UserEntityId' column in the 'EmailVerificationEntity' collection"
input UpdateColumnEmailVerificationEntityUserEntityIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'Id' column in the 'GlobalRegionEntity' collection"
input UpdateColumnGlobalRegionEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Name' column in the 'GlobalRegionEntity' collection"
input UpdateColumnGlobalRegionEntityNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'ApiKeySecretReference' column in the 'Integrations' collection"
input UpdateColumnIntegrationsApiKeySecretReferenceInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'Integrations' collection"
input UpdateColumnIntegrationsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Description' column in the 'Integrations' collection"
input UpdateColumnIntegrationsDescriptionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Integrations' collection"
input UpdateColumnIntegrationsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'LastUpdatedAt' column in the 'Integrations' collection"
input UpdateColumnIntegrationsLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Name' column in the 'Integrations' collection"
input UpdateColumnIntegrationsNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'ServiceName' column in the 'Integrations' collection"
input UpdateColumnIntegrationsServiceNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Code' column in the 'Languages' collection"
input UpdateColumnLanguagesCodeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Languages' collection"
input UpdateColumnLanguagesIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Name' column in the 'Languages' collection"
input UpdateColumnLanguagesNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'Notifications' collection"
input UpdateColumnNotificationsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Id' column in the 'Notifications' collection"
input UpdateColumnNotificationsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsRead' column in the 'Notifications' collection"
input UpdateColumnNotificationsIsReadInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'Message' column in the 'Notifications' collection"
input UpdateColumnNotificationsMessageInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Title' column in the 'Notifications' collection"
input UpdateColumnNotificationsTitleInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'UserId' column in the 'Notifications' collection"
input UpdateColumnNotificationsUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CreatedAt' column in the 'Permissions' collection"
input UpdateColumnPermissionsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Description' column in the 'Permissions' collection"
input UpdateColumnPermissionsDescriptionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Permissions' collection"
input UpdateColumnPermissionsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'LastUpdatedAt' column in the 'Permissions' collection"
input UpdateColumnPermissionsLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Name' column in the 'Permissions' collection"
input UpdateColumnPermissionsNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'RoleEntityId' column in the 'Permissions' collection"
input UpdateColumnPermissionsRoleEntityIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'created_at' column in the 'pgmq_meta' collection"
input UpdateColumnPgmqMetaCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'is_partitioned' column in the 'pgmq_meta' collection"
input UpdateColumnPgmqMetaIsPartitionedInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'is_unlogged' column in the 'pgmq_meta' collection"
input UpdateColumnPgmqMetaIsUnloggedInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'queue_name' column in the 'pgmq_meta' collection"
input UpdateColumnPgmqMetaQueueNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'associated_data' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyAssociatedDataInput {
    "Set the column to this value"
    set: Text
}

"Update the 'comment' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyCommentInput {
    "Set the column to this value"
    set: Text
}

"Update the 'created' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyCreatedInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'expires' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyExpiresInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'key_context' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyKeyContextInput {
    "Set the column to this value"
    set: Bytea
}

"Update the 'key_id' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyKeyIdInput {
    "Set the column to this value"
    set: Int8
}

"Update the 'key_type' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyKeyTypeInput {
    "Set the column to this value"
    set: PgsodiumKeyType
}

"Update the 'name' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyNameInput {
    "Set the column to this value"
    set: Text
}

"Update the 'parent_key' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyParentKeyInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'raw_key' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyRawKeyInput {
    "Set the column to this value"
    set: Bytea
}

"Update the 'raw_key_nonce' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyRawKeyNonceInput {
    "Set the column to this value"
    set: Bytea
}

"Update the 'status' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyStatusInput {
    "Set the column to this value"
    set: PgsodiumKeyStatus
}

"Update the 'user_data' column in the 'pgsodium_key' collection"
input UpdateColumnPgsodiumKeyUserDataInput {
    "Set the column to this value"
    set: Text
}

"Update the 'ContactPersonId' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersContactPersonIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CountryCode' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersCountryCodeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'CustomerId' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersCustomerIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'Id' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsPrimary' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersIsPrimaryInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'IsVerified' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersIsVerifiedInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'LastUpdatedAt' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Number' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersNumberInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'TenantId' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersTenantIdInput {
    "Set the column to this value"
    set: Int
}

"Update the 'UserId' column in the 'PhoneNumbers' collection"
input UpdateColumnPhoneNumbersUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Avatar' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityAvatarInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'DateOfBirth' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityDateOfBirthInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'FirstName' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityFirstNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Gender' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityGenderInput {
    "Set the column to this value"
    set: Int
}

"Update the 'Id' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'Language' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityLanguageInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'LastLogin' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityLastLoginInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'LastName' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityLastNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Slug' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntitySlugInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Timezone' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityTimezoneInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'UserName' column in the 'ProfileEntity' collection"
input UpdateColumnProfileEntityUserNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'event' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesEventInput {
    "Set the column to this value"
    set: Text
}

"Update the 'extension' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesExtensionInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'id' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'inserted_at' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesInsertedAtInput {
    "Set the column to this value"
    set: Timestamp!
}

"Update the 'payload' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesPayloadInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'private' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesPrivateInput {
    "Set the column to this value"
    set: Bool
}

"Update the 'topic' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesTopicInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'updated_at' column in the 'realtime_messages' collection"
input UpdateColumnRealtimeMessagesUpdatedAtInput {
    "Set the column to this value"
    set: Timestamp!
}

"Update the 'inserted_at' column in the 'realtime_schema_migrations' collection"
input UpdateColumnRealtimeSchemaMigrationsInsertedAtInput {
    "Set the column to this value"
    set: Timestamp
}

"Update the 'version' column in the 'realtime_schema_migrations' collection"
input UpdateColumnRealtimeSchemaMigrationsVersionInput {
    "Set the column to this value"
    set: Int8!
}

"Update the 'CreatedAt' column in the 'Roles' collection"
input UpdateColumnRolesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Description' column in the 'Roles' collection"
input UpdateColumnRolesDescriptionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Roles' collection"
input UpdateColumnRolesIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'LastUpdatedAt' column in the 'Roles' collection"
input UpdateColumnRolesLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Name' column in the 'Roles' collection"
input UpdateColumnRolesNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CountryId' column in the 'StateEntity' collection"
input UpdateColumnStateEntityCountryIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Id' column in the 'StateEntity' collection"
input UpdateColumnStateEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsoCode' column in the 'StateEntity' collection"
input UpdateColumnStateEntityIsoCodeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Name' column in the 'StateEntity' collection"
input UpdateColumnStateEntityNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'allowed_mime_types' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsAllowedMimeTypesInput {
    "Set the column to this value"
    set: [Text]
}

"Update the 'avif_autodetection' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsAvifAutodetectionInput {
    "Set the column to this value"
    set: Bool
}

"Update the 'created_at' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'file_size_limit' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsFileSizeLimitInput {
    "Set the column to this value"
    set: Int8
}

"Update the 'id' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'name' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsNameInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'owner_id' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsOwnerIdInput {
    "Set the column to this value"
    set: Text
}

"Update the 'owner' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsOwnerInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'public' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsPublicInput {
    "Set the column to this value"
    set: Bool
}

"Update the 'updated_at' column in the 'storage_buckets' collection"
input UpdateColumnStorageBucketsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'executed_at' column in the 'storage_migrations' collection"
input UpdateColumnStorageMigrationsExecutedAtInput {
    "Set the column to this value"
    set: Timestamp
}

"Update the 'hash' column in the 'storage_migrations' collection"
input UpdateColumnStorageMigrationsHashInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'id' column in the 'storage_migrations' collection"
input UpdateColumnStorageMigrationsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'name' column in the 'storage_migrations' collection"
input UpdateColumnStorageMigrationsNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'bucket_id' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsBucketIdInput {
    "Set the column to this value"
    set: Text
}

"Update the 'created_at' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'id' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'last_accessed_at' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsLastAccessedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'metadata' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsMetadataInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'name' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsNameInput {
    "Set the column to this value"
    set: Text
}

"Update the 'owner_id' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsOwnerIdInput {
    "Set the column to this value"
    set: Text
}

"Update the 'owner' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsOwnerInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'updated_at' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'user_metadata' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsUserMetadataInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'version' column in the 'storage_objects' collection"
input UpdateColumnStorageObjectsVersionInput {
    "Set the column to this value"
    set: Text
}

"Update the 'bucket_id' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsBucketIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'created_at' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'id' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'in_progress_size' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsInProgressSizeInput {
    "Set the column to this value"
    set: Int8!
}

"Update the 'key' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsKeyInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'owner_id' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsOwnerIdInput {
    "Set the column to this value"
    set: Text
}

"Update the 'bucket_id' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsBucketIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'created_at' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'etag' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsEtagInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'id' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'key' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsKeyInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'owner_id' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsOwnerIdInput {
    "Set the column to this value"
    set: Text
}

"Update the 'part_number' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsPartNumberInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'size' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsSizeInput {
    "Set the column to this value"
    set: Int8!
}

"Update the 'upload_id' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsUploadIdInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'version' column in the 'storage_s3_multipart_uploads_parts' collection"
input UpdateColumnStorageS3MultipartUploadsPartsVersionInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'upload_signature' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsUploadSignatureInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'user_metadata' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsUserMetadataInput {
    "Set the column to this value"
    set: Jsonb
}

"Update the 'version' column in the 'storage_s3_multipart_uploads' collection"
input UpdateColumnStorageS3MultipartUploadsVersionInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'CityId' column in the 'StreetEntity' collection"
input UpdateColumnStreetEntityCityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CountryId' column in the 'StreetEntity' collection"
input UpdateColumnStreetEntityCountryIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Id' column in the 'StreetEntity' collection"
input UpdateColumnStreetEntityIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Name' column in the 'StreetEntity' collection"
input UpdateColumnStreetEntityNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'TeamInvites' collection"
input UpdateColumnTeamInvitesCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'ExpireAt' column in the 'TeamInvites' collection"
input UpdateColumnTeamInvitesExpireAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Id' column in the 'TeamInvites' collection"
input UpdateColumnTeamInvitesIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'TeamInvites' collection"
input UpdateColumnTeamInvitesIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'TeamId' column in the 'TeamInvites' collection"
input UpdateColumnTeamInvitesTeamIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'UserId' column in the 'TeamInvites' collection"
input UpdateColumnTeamInvitesUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Alias' column in the 'TeamMembers' collection"
input UpdateColumnTeamMembersAliasInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'TeamMembers' collection"
input UpdateColumnTeamMembersIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'TeamMembers' collection"
input UpdateColumnTeamMembersIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'TeamId' column in the 'TeamMembers' collection"
input UpdateColumnTeamMembersTeamIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'UserId' column in the 'TeamMembers' collection"
input UpdateColumnTeamMembersUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CreatedAt' column in the 'Teams' collection"
input UpdateColumnTeamsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Description' column in the 'Teams' collection"
input UpdateColumnTeamsDescriptionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Teams' collection"
input UpdateColumnTeamsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'Teams' collection"
input UpdateColumnTeamsIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'LastUpdatedAt' column in the 'Teams' collection"
input UpdateColumnTeamsLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Name' column in the 'Teams' collection"
input UpdateColumnTeamsNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'OwnerId' column in the 'Teams' collection"
input UpdateColumnTeamsOwnerIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'TenantId' column in the 'Teams' collection"
input UpdateColumnTeamsTenantIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Country' column in the 'Tenants' collection"
input UpdateColumnTenantsCountryInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'CreatedAt' column in the 'Tenants' collection"
input UpdateColumnTenantsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'CustomerId' column in the 'Tenants' collection"
input UpdateColumnTenantsCustomerIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Description' column in the 'Tenants' collection"
input UpdateColumnTenantsDescriptionInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Email' column in the 'Tenants' collection"
input UpdateColumnTenantsEmailInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'Tenants' collection"
input UpdateColumnTenantsIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'Tenants' collection"
input UpdateColumnTenantsIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'IsPrimary' column in the 'Tenants' collection"
input UpdateColumnTenantsIsPrimaryInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'LastUpdatedAt' column in the 'Tenants' collection"
input UpdateColumnTenantsLastUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz
}

"Update the 'Name' column in the 'Tenants' collection"
input UpdateColumnTenantsNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Phone' column in the 'Tenants' collection"
input UpdateColumnTenantsPhoneInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'TenantId' column in the 'Tenants' collection"
input UpdateColumnTenantsTenantIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'Type' column in the 'Tenants' collection"
input UpdateColumnTenantsTypeInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'VatNumber' column in the 'Tenants' collection"
input UpdateColumnTenantsVatNumberInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'Id' column in the 'UserRoles' collection"
input UpdateColumnUserRolesIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'RoleId' column in the 'UserRoles' collection"
input UpdateColumnUserRolesRoleIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'UserId' column in the 'UserRoles' collection"
input UpdateColumnUserRolesUserIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'CreatedAt' column in the 'Users' collection"
input UpdateColumnUsersCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'Id' column in the 'Users' collection"
input UpdateColumnUsersIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'IsActive' column in the 'Users' collection"
input UpdateColumnUsersIsActiveInput {
    "Set the column to this value"
    set: Bool!
}

"Update the 'LastLogin' column in the 'Users' collection"
input UpdateColumnUsersLastLoginInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'ProfileId' column in the 'Users' collection"
input UpdateColumnUsersProfileIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'TenantId' column in the 'Users' collection"
input UpdateColumnUsersTenantIdInput {
    "Set the column to this value"
    set: Int!
}

"Update the 'UserName' column in the 'Users' collection"
input UpdateColumnUsersUserNameInput {
    "Set the column to this value"
    set: Varchar!
}

"Update the 'created_at' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsCreatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Update the 'description' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsDescriptionInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'id' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsIdInput {
    "Set the column to this value"
    set: Uuid!
}

"Update the 'key_id' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsKeyIdInput {
    "Set the column to this value"
    set: Uuid
}

"Update the 'name' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsNameInput {
    "Set the column to this value"
    set: Text
}

"Update the 'nonce' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsNonceInput {
    "Set the column to this value"
    set: Bytea
}

"Update the 'secret' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsSecretInput {
    "Set the column to this value"
    set: Text!
}

"Update the 'updated_at' column in the 'vault_secrets' collection"
input UpdateColumnVaultSecretsUpdatedAtInput {
    "Set the column to this value"
    set: Timestamptz!
}

"Responses from the 'update_ContactPersons_by_Id' procedure"
type UpdateContactPersonsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ContactPersons!]!
}

"Update the columns of the 'ContactPersons' collection"
input UpdateContactPersonsByIdUpdateColumnsInput {
    "Update the 'CustomerId' column in the 'ContactPersons' collection."
    customerId: UpdateColumnContactPersonsCustomerIdInput
    "Update the 'FirstName' column in the 'ContactPersons' collection."
    firstName: UpdateColumnContactPersonsFirstNameInput
    "Update the 'Id' column in the 'ContactPersons' collection."
    id: UpdateColumnContactPersonsIdInput
    "Update the 'IsActive' column in the 'ContactPersons' collection."
    isActive: UpdateColumnContactPersonsIsActiveInput
    "Update the 'IsPrimary' column in the 'ContactPersons' collection."
    isPrimary: UpdateColumnContactPersonsIsPrimaryInput
    "Update the 'LastName' column in the 'ContactPersons' collection."
    lastName: UpdateColumnContactPersonsLastNameInput
    "Update the 'TenantId' column in the 'ContactPersons' collection."
    tenantId: UpdateColumnContactPersonsTenantIdInput
}

"Responses from the 'update_CountryEntity_by_Id' procedure"
type UpdateCountryEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [CountryEntity!]!
}

"Update the columns of the 'CountryEntity' collection"
input UpdateCountryEntityByIdUpdateColumnsInput {
    "Update the 'CityId' column in the 'CountryEntity' collection."
    cityId: UpdateColumnCountryEntityCityIdInput
    "Update the 'GlobalRegionId' column in the 'CountryEntity' collection."
    globalRegionId: UpdateColumnCountryEntityGlobalRegionIdInput
    "Update the 'Id' column in the 'CountryEntity' collection."
    id: UpdateColumnCountryEntityIdInput
    "Update the 'IsoCode' column in the 'CountryEntity' collection."
    isoCode: UpdateColumnCountryEntityIsoCodeInput
    "Update the 'Name' column in the 'CountryEntity' collection."
    name: UpdateColumnCountryEntityNameInput
}

"Responses from the 'update_Customers_by_Id' procedure"
type UpdateCustomersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Customers!]!
}

"Update the columns of the 'Customers' collection"
input UpdateCustomersByIdUpdateColumnsInput {
    "Update the 'Country' column in the 'Customers' collection."
    country: UpdateColumnCustomersCountryInput
    "Update the 'CurrentlyAtOnboardingFlowStep' column in the 'Customers' collection."
    currentlyAtOnboardingFlowStep: UpdateColumnCustomersCurrentlyAtOnboardingFlowStepInput
    "Update the 'CustomerType' column in the 'Customers' collection."
    customerType: UpdateColumnCustomersCustomerTypeInput
    "Update the 'Id' column in the 'Customers' collection."
    id: UpdateColumnCustomersIdInput
    "Update the 'StripeCustomerId' column in the 'Customers' collection."
    stripeCustomerId: UpdateColumnCustomersStripeCustomerIdInput
    "Update the 'StripeSubscriptionId' column in the 'Customers' collection."
    stripeSubscriptionId: UpdateColumnCustomersStripeSubscriptionIdInput
    "Update the 'Type' column in the 'Customers' collection."
    type: UpdateColumnCustomersTypeInput
    "Update the 'VatId' column in the 'Customers' collection."
    vatId: UpdateColumnCustomersVatIdInput
    "Update the 'VatNumber' column in the 'Customers' collection."
    vatNumber: UpdateColumnCustomersVatNumberInput
}

"Responses from the 'update___EFMigrationsHistory_by_MigrationId' procedure"
type UpdateEfMigrationsHistoryByMigrationIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EfMigrationsHistory!]!
}

"Update the columns of the '__EFMigrationsHistory' collection"
input UpdateEfMigrationsHistoryByMigrationIdUpdateColumnsInput {
    "Update the 'MigrationId' column in the '__EFMigrationsHistory' collection."
    migrationId: UpdateColumnEfMigrationsHistoryMigrationIdInput
    "Update the 'ProductVersion' column in the '__EFMigrationsHistory' collection."
    productVersion: UpdateColumnEfMigrationsHistoryProductVersionInput
}

"Responses from the 'update_EmailAddressEntity_by_Id' procedure"
type UpdateEmailAddressEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailAddressEntity!]!
}

"Update the columns of the 'EmailAddressEntity' collection"
input UpdateEmailAddressEntityByIdUpdateColumnsInput {
    "Update the 'Address' column in the 'EmailAddressEntity' collection."
    address: UpdateColumnEmailAddressEntityAddressInput
    "Update the 'ContactPersonId' column in the 'EmailAddressEntity' collection."
    contactPersonId: UpdateColumnEmailAddressEntityContactPersonIdInput
    "Update the 'CustomerId' column in the 'EmailAddressEntity' collection."
    customerId: UpdateColumnEmailAddressEntityCustomerIdInput
    "Update the 'Id' column in the 'EmailAddressEntity' collection."
    id: UpdateColumnEmailAddressEntityIdInput
    "Update the 'TenantId' column in the 'EmailAddressEntity' collection."
    tenantId: UpdateColumnEmailAddressEntityTenantIdInput
    "Update the 'UserId' column in the 'EmailAddressEntity' collection."
    userId: UpdateColumnEmailAddressEntityUserIdInput
}

"Responses from the 'update_EmailInviteEntity_by_Id' procedure"
type UpdateEmailInviteEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailInviteEntity!]!
}

"Update the columns of the 'EmailInviteEntity' collection"
input UpdateEmailInviteEntityByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'EmailInviteEntity' collection."
    createdAt: UpdateColumnEmailInviteEntityCreatedAtInput
    "Update the 'ExpireAt' column in the 'EmailInviteEntity' collection."
    expireAt: UpdateColumnEmailInviteEntityExpireAtInput
    "Update the 'Id' column in the 'EmailInviteEntity' collection."
    id: UpdateColumnEmailInviteEntityIdInput
    "Update the 'InviteIsUsed' column in the 'EmailInviteEntity' collection."
    inviteIsUsed: UpdateColumnEmailInviteEntityInviteIsUsedInput
    "Update the 'LastUpdatedAt' column in the 'EmailInviteEntity' collection."
    lastUpdatedAt: UpdateColumnEmailInviteEntityLastUpdatedAtInput
    "Update the 'ReferredEmailAddress' column in the 'EmailInviteEntity' collection."
    referredEmailAddress: UpdateColumnEmailInviteEntityReferredEmailAddressInput
    "Update the 'Token' column in the 'EmailInviteEntity' collection."
    token: UpdateColumnEmailInviteEntityTokenInput
    "Update the 'UserEntityId' column in the 'EmailInviteEntity' collection."
    userEntityId: UpdateColumnEmailInviteEntityUserEntityIdInput
}

"Responses from the 'update_EmailVerificationEntity_by_Id' procedure"
type UpdateEmailVerificationEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [EmailVerificationEntity!]!
}

"Update the columns of the 'EmailVerificationEntity' collection"
input UpdateEmailVerificationEntityByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'EmailVerificationEntity' collection."
    createdAt: UpdateColumnEmailVerificationEntityCreatedAtInput
    "Update the 'ExpireAt' column in the 'EmailVerificationEntity' collection."
    expireAt: UpdateColumnEmailVerificationEntityExpireAtInput
    "Update the 'HasBeenOpened' column in the 'EmailVerificationEntity' collection."
    hasBeenOpened: UpdateColumnEmailVerificationEntityHasBeenOpenedInput
    "Update the 'HasBeenVerified' column in the 'EmailVerificationEntity' collection."
    hasBeenVerified: UpdateColumnEmailVerificationEntityHasBeenVerifiedInput
    "Update the 'Id' column in the 'EmailVerificationEntity' collection."
    id: UpdateColumnEmailVerificationEntityIdInput
    "Update the 'LastUpdatedAt' column in the 'EmailVerificationEntity' collection."
    lastUpdatedAt: UpdateColumnEmailVerificationEntityLastUpdatedAtInput
    "Update the 'Token' column in the 'EmailVerificationEntity' collection."
    token: UpdateColumnEmailVerificationEntityTokenInput
    "Update the 'UserEntityId' column in the 'EmailVerificationEntity' collection."
    userEntityId: UpdateColumnEmailVerificationEntityUserEntityIdInput
}

"Responses from the 'update_GlobalRegionEntity_by_Id' procedure"
type UpdateGlobalRegionEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [GlobalRegionEntity!]!
}

"Update the columns of the 'GlobalRegionEntity' collection"
input UpdateGlobalRegionEntityByIdUpdateColumnsInput {
    "Update the 'Id' column in the 'GlobalRegionEntity' collection."
    id: UpdateColumnGlobalRegionEntityIdInput
    "Update the 'Name' column in the 'GlobalRegionEntity' collection."
    name: UpdateColumnGlobalRegionEntityNameInput
}

"Responses from the 'update_Integrations_by_Id' procedure"
type UpdateIntegrationsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Integrations!]!
}

"Update the columns of the 'Integrations' collection"
input UpdateIntegrationsByIdUpdateColumnsInput {
    "Update the 'ApiKeySecretReference' column in the 'Integrations' collection."
    apiKeySecretReference: UpdateColumnIntegrationsApiKeySecretReferenceInput
    "Update the 'CreatedAt' column in the 'Integrations' collection."
    createdAt: UpdateColumnIntegrationsCreatedAtInput
    "Update the 'Description' column in the 'Integrations' collection."
    description: UpdateColumnIntegrationsDescriptionInput
    "Update the 'Id' column in the 'Integrations' collection."
    id: UpdateColumnIntegrationsIdInput
    "Update the 'LastUpdatedAt' column in the 'Integrations' collection."
    lastUpdatedAt: UpdateColumnIntegrationsLastUpdatedAtInput
    "Update the 'Name' column in the 'Integrations' collection."
    name: UpdateColumnIntegrationsNameInput
    "Update the 'ServiceName' column in the 'Integrations' collection."
    serviceName: UpdateColumnIntegrationsServiceNameInput
}

"Responses from the 'update_Languages_by_Id' procedure"
type UpdateLanguagesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Languages!]!
}

"Update the columns of the 'Languages' collection"
input UpdateLanguagesByIdUpdateColumnsInput {
    "Update the 'Code' column in the 'Languages' collection."
    code: UpdateColumnLanguagesCodeInput
    "Update the 'Id' column in the 'Languages' collection."
    id: UpdateColumnLanguagesIdInput
    "Update the 'Name' column in the 'Languages' collection."
    name: UpdateColumnLanguagesNameInput
}

"Responses from the 'update_Notifications_by_Id' procedure"
type UpdateNotificationsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Notifications!]!
}

"Update the columns of the 'Notifications' collection"
input UpdateNotificationsByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'Notifications' collection."
    createdAt: UpdateColumnNotificationsCreatedAtInput
    "Update the 'Id' column in the 'Notifications' collection."
    id: UpdateColumnNotificationsIdInput
    "Update the 'IsRead' column in the 'Notifications' collection."
    isRead: UpdateColumnNotificationsIsReadInput
    "Update the 'Message' column in the 'Notifications' collection."
    message: UpdateColumnNotificationsMessageInput
    "Update the 'Title' column in the 'Notifications' collection."
    title: UpdateColumnNotificationsTitleInput
    "Update the 'UserId' column in the 'Notifications' collection."
    userId: UpdateColumnNotificationsUserIdInput
}

"Responses from the 'update_Permissions_by_Id' procedure"
type UpdatePermissionsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Permissions!]!
}

"Update the columns of the 'Permissions' collection"
input UpdatePermissionsByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'Permissions' collection."
    createdAt: UpdateColumnPermissionsCreatedAtInput
    "Update the 'Description' column in the 'Permissions' collection."
    description: UpdateColumnPermissionsDescriptionInput
    "Update the 'Id' column in the 'Permissions' collection."
    id: UpdateColumnPermissionsIdInput
    "Update the 'LastUpdatedAt' column in the 'Permissions' collection."
    lastUpdatedAt: UpdateColumnPermissionsLastUpdatedAtInput
    "Update the 'Name' column in the 'Permissions' collection."
    name: UpdateColumnPermissionsNameInput
    "Update the 'RoleEntityId' column in the 'Permissions' collection."
    roleEntityId: UpdateColumnPermissionsRoleEntityIdInput
}

"Responses from the 'update_pgmq_meta_by_queue_name' procedure"
type UpdatePgmqMetaByQueueNameResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgmqMeta!]!
}

"Update the columns of the 'pgmq_meta' collection"
input UpdatePgmqMetaByQueueNameUpdateColumnsInput {
    "Update the 'created_at' column in the 'pgmq_meta' collection."
    createdAt: UpdateColumnPgmqMetaCreatedAtInput
    "Update the 'is_partitioned' column in the 'pgmq_meta' collection."
    isPartitioned: UpdateColumnPgmqMetaIsPartitionedInput
    "Update the 'is_unlogged' column in the 'pgmq_meta' collection."
    isUnlogged: UpdateColumnPgmqMetaIsUnloggedInput
    "Update the 'queue_name' column in the 'pgmq_meta' collection."
    queueName: UpdateColumnPgmqMetaQueueNameInput
}

"Responses from the 'update_pgsodium_key_by_id' procedure"
type UpdatePgsodiumKeyByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumKey!]!
}

"Update the columns of the 'pgsodium_key' collection"
input UpdatePgsodiumKeyByIdUpdateColumnsInput {
    "Update the 'associated_data' column in the 'pgsodium_key' collection."
    associatedData: UpdateColumnPgsodiumKeyAssociatedDataInput
    "Update the 'comment' column in the 'pgsodium_key' collection."
    comment: UpdateColumnPgsodiumKeyCommentInput
    "Update the 'created' column in the 'pgsodium_key' collection."
    created: UpdateColumnPgsodiumKeyCreatedInput
    "Update the 'expires' column in the 'pgsodium_key' collection."
    expires: UpdateColumnPgsodiumKeyExpiresInput
    "Update the 'id' column in the 'pgsodium_key' collection."
    id: UpdateColumnPgsodiumKeyIdInput
    "Update the 'key_context' column in the 'pgsodium_key' collection."
    keyContext: UpdateColumnPgsodiumKeyKeyContextInput
    "Update the 'key_id' column in the 'pgsodium_key' collection."
    keyId: UpdateColumnPgsodiumKeyKeyIdInput
    "Update the 'key_type' column in the 'pgsodium_key' collection."
    keyType: UpdateColumnPgsodiumKeyKeyTypeInput
    "Update the 'name' column in the 'pgsodium_key' collection."
    name: UpdateColumnPgsodiumKeyNameInput
    "Update the 'parent_key' column in the 'pgsodium_key' collection."
    parentKey: UpdateColumnPgsodiumKeyParentKeyInput
    "Update the 'raw_key' column in the 'pgsodium_key' collection."
    rawKey: UpdateColumnPgsodiumKeyRawKeyInput
    "Update the 'raw_key_nonce' column in the 'pgsodium_key' collection."
    rawKeyNonce: UpdateColumnPgsodiumKeyRawKeyNonceInput
    "Update the 'status' column in the 'pgsodium_key' collection."
    status: UpdateColumnPgsodiumKeyStatusInput
    "Update the 'user_data' column in the 'pgsodium_key' collection."
    userData: UpdateColumnPgsodiumKeyUserDataInput
}

"Responses from the 'update_pgsodium_key_by_name' procedure"
type UpdatePgsodiumKeyByNameResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PgsodiumKey!]!
}

"Update the columns of the 'pgsodium_key' collection"
input UpdatePgsodiumKeyByNameUpdateColumnsInput {
    "Update the 'associated_data' column in the 'pgsodium_key' collection."
    associatedData: UpdateColumnPgsodiumKeyAssociatedDataInput
    "Update the 'comment' column in the 'pgsodium_key' collection."
    comment: UpdateColumnPgsodiumKeyCommentInput
    "Update the 'created' column in the 'pgsodium_key' collection."
    created: UpdateColumnPgsodiumKeyCreatedInput
    "Update the 'expires' column in the 'pgsodium_key' collection."
    expires: UpdateColumnPgsodiumKeyExpiresInput
    "Update the 'id' column in the 'pgsodium_key' collection."
    id: UpdateColumnPgsodiumKeyIdInput
    "Update the 'key_context' column in the 'pgsodium_key' collection."
    keyContext: UpdateColumnPgsodiumKeyKeyContextInput
    "Update the 'key_id' column in the 'pgsodium_key' collection."
    keyId: UpdateColumnPgsodiumKeyKeyIdInput
    "Update the 'key_type' column in the 'pgsodium_key' collection."
    keyType: UpdateColumnPgsodiumKeyKeyTypeInput
    "Update the 'name' column in the 'pgsodium_key' collection."
    name: UpdateColumnPgsodiumKeyNameInput
    "Update the 'parent_key' column in the 'pgsodium_key' collection."
    parentKey: UpdateColumnPgsodiumKeyParentKeyInput
    "Update the 'raw_key' column in the 'pgsodium_key' collection."
    rawKey: UpdateColumnPgsodiumKeyRawKeyInput
    "Update the 'raw_key_nonce' column in the 'pgsodium_key' collection."
    rawKeyNonce: UpdateColumnPgsodiumKeyRawKeyNonceInput
    "Update the 'status' column in the 'pgsodium_key' collection."
    status: UpdateColumnPgsodiumKeyStatusInput
    "Update the 'user_data' column in the 'pgsodium_key' collection."
    userData: UpdateColumnPgsodiumKeyUserDataInput
}

"Responses from the 'update_PhoneNumbers_by_Id' procedure"
type UpdatePhoneNumbersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [PhoneNumbers!]!
}

"Update the columns of the 'PhoneNumbers' collection"
input UpdatePhoneNumbersByIdUpdateColumnsInput {
    "Update the 'ContactPersonId' column in the 'PhoneNumbers' collection."
    contactPersonId: UpdateColumnPhoneNumbersContactPersonIdInput
    "Update the 'CountryCode' column in the 'PhoneNumbers' collection."
    countryCode: UpdateColumnPhoneNumbersCountryCodeInput
    "Update the 'CreatedAt' column in the 'PhoneNumbers' collection."
    createdAt: UpdateColumnPhoneNumbersCreatedAtInput
    "Update the 'CustomerId' column in the 'PhoneNumbers' collection."
    customerId: UpdateColumnPhoneNumbersCustomerIdInput
    "Update the 'Id' column in the 'PhoneNumbers' collection."
    id: UpdateColumnPhoneNumbersIdInput
    "Update the 'IsPrimary' column in the 'PhoneNumbers' collection."
    isPrimary: UpdateColumnPhoneNumbersIsPrimaryInput
    "Update the 'IsVerified' column in the 'PhoneNumbers' collection."
    isVerified: UpdateColumnPhoneNumbersIsVerifiedInput
    "Update the 'LastUpdatedAt' column in the 'PhoneNumbers' collection."
    lastUpdatedAt: UpdateColumnPhoneNumbersLastUpdatedAtInput
    "Update the 'Number' column in the 'PhoneNumbers' collection."
    number: UpdateColumnPhoneNumbersNumberInput
    "Update the 'TenantId' column in the 'PhoneNumbers' collection."
    tenantId: UpdateColumnPhoneNumbersTenantIdInput
    "Update the 'UserId' column in the 'PhoneNumbers' collection."
    userId: UpdateColumnPhoneNumbersUserIdInput
}

"Responses from the 'update_ProfileEntity_by_Id' procedure"
type UpdateProfileEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [ProfileEntity!]!
}

"Update the columns of the 'ProfileEntity' collection"
input UpdateProfileEntityByIdUpdateColumnsInput {
    "Update the 'Avatar' column in the 'ProfileEntity' collection."
    avatar: UpdateColumnProfileEntityAvatarInput
    "Update the 'CreatedAt' column in the 'ProfileEntity' collection."
    createdAt: UpdateColumnProfileEntityCreatedAtInput
    "Update the 'DateOfBirth' column in the 'ProfileEntity' collection."
    dateOfBirth: UpdateColumnProfileEntityDateOfBirthInput
    "Update the 'FirstName' column in the 'ProfileEntity' collection."
    firstName: UpdateColumnProfileEntityFirstNameInput
    "Update the 'Gender' column in the 'ProfileEntity' collection."
    gender: UpdateColumnProfileEntityGenderInput
    "Update the 'Id' column in the 'ProfileEntity' collection."
    id: UpdateColumnProfileEntityIdInput
    "Update the 'IsActive' column in the 'ProfileEntity' collection."
    isActive: UpdateColumnProfileEntityIsActiveInput
    "Update the 'Language' column in the 'ProfileEntity' collection."
    language: UpdateColumnProfileEntityLanguageInput
    "Update the 'LastLogin' column in the 'ProfileEntity' collection."
    lastLogin: UpdateColumnProfileEntityLastLoginInput
    "Update the 'LastName' column in the 'ProfileEntity' collection."
    lastName: UpdateColumnProfileEntityLastNameInput
    "Update the 'Slug' column in the 'ProfileEntity' collection."
    slug: UpdateColumnProfileEntitySlugInput
    "Update the 'Timezone' column in the 'ProfileEntity' collection."
    timezone: UpdateColumnProfileEntityTimezoneInput
    "Update the 'UserName' column in the 'ProfileEntity' collection."
    userName: UpdateColumnProfileEntityUserNameInput
}

"Responses from the 'update_realtime_messages_by_id_and_inserted_at' procedure"
type UpdateRealtimeMessagesByIdAndInsertedAtResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [RealtimeMessages!]!
}

"Update the columns of the 'realtime_messages' collection"
input UpdateRealtimeMessagesByIdAndInsertedAtUpdateColumnsInput {
    "Update the 'event' column in the 'realtime_messages' collection."
    event: UpdateColumnRealtimeMessagesEventInput
    "Update the 'extension' column in the 'realtime_messages' collection."
    extension: UpdateColumnRealtimeMessagesExtensionInput
    "Update the 'id' column in the 'realtime_messages' collection."
    id: UpdateColumnRealtimeMessagesIdInput
    "Update the 'inserted_at' column in the 'realtime_messages' collection."
    insertedAt: UpdateColumnRealtimeMessagesInsertedAtInput
    "Update the 'payload' column in the 'realtime_messages' collection."
    payload: UpdateColumnRealtimeMessagesPayloadInput
    "Update the 'private' column in the 'realtime_messages' collection."
    private: UpdateColumnRealtimeMessagesPrivateInput
    "Update the 'topic' column in the 'realtime_messages' collection."
    topic: UpdateColumnRealtimeMessagesTopicInput
    "Update the 'updated_at' column in the 'realtime_messages' collection."
    updatedAt: UpdateColumnRealtimeMessagesUpdatedAtInput
}

"Responses from the 'update_realtime_schema_migrations_by_version' procedure"
type UpdateRealtimeSchemaMigrationsByVersionResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [RealtimeSchemaMigrations!]!
}

"Update the columns of the 'realtime_schema_migrations' collection"
input UpdateRealtimeSchemaMigrationsByVersionUpdateColumnsInput {
    "Update the 'inserted_at' column in the 'realtime_schema_migrations' collection."
    insertedAt: UpdateColumnRealtimeSchemaMigrationsInsertedAtInput
    "Update the 'version' column in the 'realtime_schema_migrations' collection."
    version: UpdateColumnRealtimeSchemaMigrationsVersionInput
}

"Responses from the 'update_Roles_by_Id' procedure"
type UpdateRolesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Roles!]!
}

"Update the columns of the 'Roles' collection"
input UpdateRolesByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'Roles' collection."
    createdAt: UpdateColumnRolesCreatedAtInput
    "Update the 'Description' column in the 'Roles' collection."
    description: UpdateColumnRolesDescriptionInput
    "Update the 'Id' column in the 'Roles' collection."
    id: UpdateColumnRolesIdInput
    "Update the 'LastUpdatedAt' column in the 'Roles' collection."
    lastUpdatedAt: UpdateColumnRolesLastUpdatedAtInput
    "Update the 'Name' column in the 'Roles' collection."
    name: UpdateColumnRolesNameInput
}

"Responses from the 'update_StateEntity_by_Id' procedure"
type UpdateStateEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StateEntity!]!
}

"Update the columns of the 'StateEntity' collection"
input UpdateStateEntityByIdUpdateColumnsInput {
    "Update the 'CountryId' column in the 'StateEntity' collection."
    countryId: UpdateColumnStateEntityCountryIdInput
    "Update the 'Id' column in the 'StateEntity' collection."
    id: UpdateColumnStateEntityIdInput
    "Update the 'IsoCode' column in the 'StateEntity' collection."
    isoCode: UpdateColumnStateEntityIsoCodeInput
    "Update the 'Name' column in the 'StateEntity' collection."
    name: UpdateColumnStateEntityNameInput
}

"Responses from the 'update_storage_buckets_by_id' procedure"
type UpdateStorageBucketsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageBuckets!]!
}

"Update the columns of the 'storage_buckets' collection"
input UpdateStorageBucketsByIdUpdateColumnsInput {
    "Update the 'allowed_mime_types' column in the 'storage_buckets' collection."
    allowedMimeTypes: UpdateColumnStorageBucketsAllowedMimeTypesInput
    "Update the 'avif_autodetection' column in the 'storage_buckets' collection."
    avifAutodetection: UpdateColumnStorageBucketsAvifAutodetectionInput
    "Update the 'created_at' column in the 'storage_buckets' collection."
    createdAt: UpdateColumnStorageBucketsCreatedAtInput
    "Update the 'file_size_limit' column in the 'storage_buckets' collection."
    fileSizeLimit: UpdateColumnStorageBucketsFileSizeLimitInput
    "Update the 'id' column in the 'storage_buckets' collection."
    id: UpdateColumnStorageBucketsIdInput
    "Update the 'name' column in the 'storage_buckets' collection."
    name: UpdateColumnStorageBucketsNameInput
    "Update the 'owner' column in the 'storage_buckets' collection."
    owner: UpdateColumnStorageBucketsOwnerInput
    "Update the 'owner_id' column in the 'storage_buckets' collection."
    ownerId: UpdateColumnStorageBucketsOwnerIdInput
    "Update the 'public' column in the 'storage_buckets' collection."
    public: UpdateColumnStorageBucketsPublicInput
    "Update the 'updated_at' column in the 'storage_buckets' collection."
    updatedAt: UpdateColumnStorageBucketsUpdatedAtInput
}

"Responses from the 'update_storage_migrations_by_id' procedure"
type UpdateStorageMigrationsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageMigrations!]!
}

"Update the columns of the 'storage_migrations' collection"
input UpdateStorageMigrationsByIdUpdateColumnsInput {
    "Update the 'executed_at' column in the 'storage_migrations' collection."
    executedAt: UpdateColumnStorageMigrationsExecutedAtInput
    "Update the 'hash' column in the 'storage_migrations' collection."
    hash: UpdateColumnStorageMigrationsHashInput
    "Update the 'id' column in the 'storage_migrations' collection."
    id: UpdateColumnStorageMigrationsIdInput
    "Update the 'name' column in the 'storage_migrations' collection."
    name: UpdateColumnStorageMigrationsNameInput
}

"Responses from the 'update_storage_migrations_by_name' procedure"
type UpdateStorageMigrationsByNameResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageMigrations!]!
}

"Update the columns of the 'storage_migrations' collection"
input UpdateStorageMigrationsByNameUpdateColumnsInput {
    "Update the 'executed_at' column in the 'storage_migrations' collection."
    executedAt: UpdateColumnStorageMigrationsExecutedAtInput
    "Update the 'hash' column in the 'storage_migrations' collection."
    hash: UpdateColumnStorageMigrationsHashInput
    "Update the 'id' column in the 'storage_migrations' collection."
    id: UpdateColumnStorageMigrationsIdInput
    "Update the 'name' column in the 'storage_migrations' collection."
    name: UpdateColumnStorageMigrationsNameInput
}

"Responses from the 'update_storage_objects_by_id' procedure"
type UpdateStorageObjectsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageObjects!]!
}

"Update the columns of the 'storage_objects' collection"
input UpdateStorageObjectsByIdUpdateColumnsInput {
    "Update the 'bucket_id' column in the 'storage_objects' collection."
    bucketId: UpdateColumnStorageObjectsBucketIdInput
    "Update the 'created_at' column in the 'storage_objects' collection."
    createdAt: UpdateColumnStorageObjectsCreatedAtInput
    "Update the 'id' column in the 'storage_objects' collection."
    id: UpdateColumnStorageObjectsIdInput
    "Update the 'last_accessed_at' column in the 'storage_objects' collection."
    lastAccessedAt: UpdateColumnStorageObjectsLastAccessedAtInput
    "Update the 'metadata' column in the 'storage_objects' collection."
    metadata: UpdateColumnStorageObjectsMetadataInput
    "Update the 'name' column in the 'storage_objects' collection."
    name: UpdateColumnStorageObjectsNameInput
    "Update the 'owner' column in the 'storage_objects' collection."
    owner: UpdateColumnStorageObjectsOwnerInput
    "Update the 'owner_id' column in the 'storage_objects' collection."
    ownerId: UpdateColumnStorageObjectsOwnerIdInput
    "Update the 'updated_at' column in the 'storage_objects' collection."
    updatedAt: UpdateColumnStorageObjectsUpdatedAtInput
    "Update the 'user_metadata' column in the 'storage_objects' collection."
    userMetadata: UpdateColumnStorageObjectsUserMetadataInput
    "Update the 'version' column in the 'storage_objects' collection."
    version: UpdateColumnStorageObjectsVersionInput
}

"Responses from the 'update_storage_s3_multipart_uploads_by_id' procedure"
type UpdateStorageS3MultipartUploadsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageS3MultipartUploads!]!
}

"Update the columns of the 'storage_s3_multipart_uploads' collection"
input UpdateStorageS3MultipartUploadsByIdUpdateColumnsInput {
    "Update the 'bucket_id' column in the 'storage_s3_multipart_uploads' collection."
    bucketId: UpdateColumnStorageS3MultipartUploadsBucketIdInput
    "Update the 'created_at' column in the 'storage_s3_multipart_uploads' collection."
    createdAt: UpdateColumnStorageS3MultipartUploadsCreatedAtInput
    "Update the 'id' column in the 'storage_s3_multipart_uploads' collection."
    id: UpdateColumnStorageS3MultipartUploadsIdInput
    "Update the 'in_progress_size' column in the 'storage_s3_multipart_uploads' collection."
    inProgressSize: UpdateColumnStorageS3MultipartUploadsInProgressSizeInput
    "Update the 'key' column in the 'storage_s3_multipart_uploads' collection."
    key: UpdateColumnStorageS3MultipartUploadsKeyInput
    "Update the 'owner_id' column in the 'storage_s3_multipart_uploads' collection."
    ownerId: UpdateColumnStorageS3MultipartUploadsOwnerIdInput
    "Update the 'upload_signature' column in the 'storage_s3_multipart_uploads' collection."
    uploadSignature: UpdateColumnStorageS3MultipartUploadsUploadSignatureInput
    "Update the 'user_metadata' column in the 'storage_s3_multipart_uploads' collection."
    userMetadata: UpdateColumnStorageS3MultipartUploadsUserMetadataInput
    "Update the 'version' column in the 'storage_s3_multipart_uploads' collection."
    version: UpdateColumnStorageS3MultipartUploadsVersionInput
}

"Responses from the 'update_storage_s3_multipart_uploads_parts_by_id' procedure"
type UpdateStorageS3MultipartUploadsPartsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StorageS3MultipartUploadsParts!]!
}

"Update the columns of the 'storage_s3_multipart_uploads_parts' collection"
input UpdateStorageS3MultipartUploadsPartsByIdUpdateColumnsInput {
    "Update the 'bucket_id' column in the 'storage_s3_multipart_uploads_parts' collection."
    bucketId: UpdateColumnStorageS3MultipartUploadsPartsBucketIdInput
    "Update the 'created_at' column in the 'storage_s3_multipart_uploads_parts' collection."
    createdAt: UpdateColumnStorageS3MultipartUploadsPartsCreatedAtInput
    "Update the 'etag' column in the 'storage_s3_multipart_uploads_parts' collection."
    etag: UpdateColumnStorageS3MultipartUploadsPartsEtagInput
    "Update the 'id' column in the 'storage_s3_multipart_uploads_parts' collection."
    id: UpdateColumnStorageS3MultipartUploadsPartsIdInput
    "Update the 'key' column in the 'storage_s3_multipart_uploads_parts' collection."
    key: UpdateColumnStorageS3MultipartUploadsPartsKeyInput
    "Update the 'owner_id' column in the 'storage_s3_multipart_uploads_parts' collection."
    ownerId: UpdateColumnStorageS3MultipartUploadsPartsOwnerIdInput
    "Update the 'part_number' column in the 'storage_s3_multipart_uploads_parts' collection."
    partNumber: UpdateColumnStorageS3MultipartUploadsPartsPartNumberInput
    "Update the 'size' column in the 'storage_s3_multipart_uploads_parts' collection."
    size: UpdateColumnStorageS3MultipartUploadsPartsSizeInput
    "Update the 'upload_id' column in the 'storage_s3_multipart_uploads_parts' collection."
    uploadId: UpdateColumnStorageS3MultipartUploadsPartsUploadIdInput
    "Update the 'version' column in the 'storage_s3_multipart_uploads_parts' collection."
    version: UpdateColumnStorageS3MultipartUploadsPartsVersionInput
}

"Responses from the 'update_StreetEntity_by_Id' procedure"
type UpdateStreetEntityByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [StreetEntity!]!
}

"Update the columns of the 'StreetEntity' collection"
input UpdateStreetEntityByIdUpdateColumnsInput {
    "Update the 'CityId' column in the 'StreetEntity' collection."
    cityId: UpdateColumnStreetEntityCityIdInput
    "Update the 'CountryId' column in the 'StreetEntity' collection."
    countryId: UpdateColumnStreetEntityCountryIdInput
    "Update the 'Id' column in the 'StreetEntity' collection."
    id: UpdateColumnStreetEntityIdInput
    "Update the 'Name' column in the 'StreetEntity' collection."
    name: UpdateColumnStreetEntityNameInput
}

"Responses from the 'update_TeamInvites_by_Id' procedure"
type UpdateTeamInvitesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [TeamInvites!]!
}

"Update the columns of the 'TeamInvites' collection"
input UpdateTeamInvitesByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'TeamInvites' collection."
    createdAt: UpdateColumnTeamInvitesCreatedAtInput
    "Update the 'ExpireAt' column in the 'TeamInvites' collection."
    expireAt: UpdateColumnTeamInvitesExpireAtInput
    "Update the 'Id' column in the 'TeamInvites' collection."
    id: UpdateColumnTeamInvitesIdInput
    "Update the 'IsActive' column in the 'TeamInvites' collection."
    isActive: UpdateColumnTeamInvitesIsActiveInput
    "Update the 'TeamId' column in the 'TeamInvites' collection."
    teamId: UpdateColumnTeamInvitesTeamIdInput
    "Update the 'UserId' column in the 'TeamInvites' collection."
    userId: UpdateColumnTeamInvitesUserIdInput
}

"Responses from the 'update_TeamMembers_by_Id' procedure"
type UpdateTeamMembersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [TeamMembers!]!
}

"Update the columns of the 'TeamMembers' collection"
input UpdateTeamMembersByIdUpdateColumnsInput {
    "Update the 'Alias' column in the 'TeamMembers' collection."
    alias: UpdateColumnTeamMembersAliasInput
    "Update the 'Id' column in the 'TeamMembers' collection."
    id: UpdateColumnTeamMembersIdInput
    "Update the 'IsActive' column in the 'TeamMembers' collection."
    isActive: UpdateColumnTeamMembersIsActiveInput
    "Update the 'TeamId' column in the 'TeamMembers' collection."
    teamId: UpdateColumnTeamMembersTeamIdInput
    "Update the 'UserId' column in the 'TeamMembers' collection."
    userId: UpdateColumnTeamMembersUserIdInput
}

"Responses from the 'update_Teams_by_Id' procedure"
type UpdateTeamsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Teams!]!
}

"Update the columns of the 'Teams' collection"
input UpdateTeamsByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'Teams' collection."
    createdAt: UpdateColumnTeamsCreatedAtInput
    "Update the 'Description' column in the 'Teams' collection."
    description: UpdateColumnTeamsDescriptionInput
    "Update the 'Id' column in the 'Teams' collection."
    id: UpdateColumnTeamsIdInput
    "Update the 'IsActive' column in the 'Teams' collection."
    isActive: UpdateColumnTeamsIsActiveInput
    "Update the 'LastUpdatedAt' column in the 'Teams' collection."
    lastUpdatedAt: UpdateColumnTeamsLastUpdatedAtInput
    "Update the 'Name' column in the 'Teams' collection."
    name: UpdateColumnTeamsNameInput
    "Update the 'OwnerId' column in the 'Teams' collection."
    ownerId: UpdateColumnTeamsOwnerIdInput
    "Update the 'TenantId' column in the 'Teams' collection."
    tenantId: UpdateColumnTeamsTenantIdInput
}

"Responses from the 'update_Tenants_by_Id' procedure"
type UpdateTenantsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Tenants!]!
}

"Update the columns of the 'Tenants' collection"
input UpdateTenantsByIdUpdateColumnsInput {
    "Update the 'Country' column in the 'Tenants' collection."
    country: UpdateColumnTenantsCountryInput
    "Update the 'CreatedAt' column in the 'Tenants' collection."
    createdAt: UpdateColumnTenantsCreatedAtInput
    "Update the 'CustomerId' column in the 'Tenants' collection."
    customerId: UpdateColumnTenantsCustomerIdInput
    "Update the 'Description' column in the 'Tenants' collection."
    description: UpdateColumnTenantsDescriptionInput
    "Update the 'Email' column in the 'Tenants' collection."
    email: UpdateColumnTenantsEmailInput
    "Update the 'Id' column in the 'Tenants' collection."
    id: UpdateColumnTenantsIdInput
    "Update the 'IsActive' column in the 'Tenants' collection."
    isActive: UpdateColumnTenantsIsActiveInput
    "Update the 'IsPrimary' column in the 'Tenants' collection."
    isPrimary: UpdateColumnTenantsIsPrimaryInput
    "Update the 'LastUpdatedAt' column in the 'Tenants' collection."
    lastUpdatedAt: UpdateColumnTenantsLastUpdatedAtInput
    "Update the 'Name' column in the 'Tenants' collection."
    name: UpdateColumnTenantsNameInput
    "Update the 'Phone' column in the 'Tenants' collection."
    phone: UpdateColumnTenantsPhoneInput
    "Update the 'TenantId' column in the 'Tenants' collection."
    tenantId: UpdateColumnTenantsTenantIdInput
    "Update the 'Type' column in the 'Tenants' collection."
    type: UpdateColumnTenantsTypeInput
    "Update the 'VatNumber' column in the 'Tenants' collection."
    vatNumber: UpdateColumnTenantsVatNumberInput
}

"Responses from the 'update_UserRoles_by_Id' procedure"
type UpdateUserRolesByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [UserRoles!]!
}

"Update the columns of the 'UserRoles' collection"
input UpdateUserRolesByIdUpdateColumnsInput {
    "Update the 'Id' column in the 'UserRoles' collection."
    id: UpdateColumnUserRolesIdInput
    "Update the 'RoleId' column in the 'UserRoles' collection."
    roleId: UpdateColumnUserRolesRoleIdInput
    "Update the 'UserId' column in the 'UserRoles' collection."
    userId: UpdateColumnUserRolesUserIdInput
}

"Responses from the 'update_Users_by_Id' procedure"
type UpdateUsersByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [Users!]!
}

"Update the columns of the 'Users' collection"
input UpdateUsersByIdUpdateColumnsInput {
    "Update the 'CreatedAt' column in the 'Users' collection."
    createdAt: UpdateColumnUsersCreatedAtInput
    "Update the 'Id' column in the 'Users' collection."
    id: UpdateColumnUsersIdInput
    "Update the 'IsActive' column in the 'Users' collection."
    isActive: UpdateColumnUsersIsActiveInput
    "Update the 'LastLogin' column in the 'Users' collection."
    lastLogin: UpdateColumnUsersLastLoginInput
    "Update the 'ProfileId' column in the 'Users' collection."
    profileId: UpdateColumnUsersProfileIdInput
    "Update the 'TenantId' column in the 'Users' collection."
    tenantId: UpdateColumnUsersTenantIdInput
    "Update the 'UserName' column in the 'Users' collection."
    userName: UpdateColumnUsersUserNameInput
}

"Responses from the 'update_vault_secrets_by_id' procedure"
type UpdateVaultSecretsByIdResponse {
    "The number of rows affected by the mutation"
    affectedRows: Int!
    "Data from rows affected by the mutation"
    returning: [VaultSecrets!]!
}

"Update the columns of the 'vault_secrets' collection"
input UpdateVaultSecretsByIdUpdateColumnsInput {
    "Update the 'created_at' column in the 'vault_secrets' collection."
    createdAt: UpdateColumnVaultSecretsCreatedAtInput
    "Update the 'description' column in the 'vault_secrets' collection."
    description: UpdateColumnVaultSecretsDescriptionInput
    "Update the 'id' column in the 'vault_secrets' collection."
    id: UpdateColumnVaultSecretsIdInput
    "Update the 'key_id' column in the 'vault_secrets' collection."
    keyId: UpdateColumnVaultSecretsKeyIdInput
    "Update the 'name' column in the 'vault_secrets' collection."
    name: UpdateColumnVaultSecretsNameInput
    "Update the 'nonce' column in the 'vault_secrets' collection."
    nonce: UpdateColumnVaultSecretsNonceInput
    "Update the 'secret' column in the 'vault_secrets' collection."
    secret: UpdateColumnVaultSecretsSecretInput
    "Update the 'updated_at' column in the 'vault_secrets' collection."
    updatedAt: UpdateColumnVaultSecretsUpdatedAtInput
}

type UserRoles {
    id: Int!
    role: Roles
    roleId: Int!
    user: Users
    userId: Int!
}

type UserRolesAggExp {
    _count: Int!
    id: IntAggExp!
    roleId: IntAggExp!
    userId: IntAggExp!
}

input UserRolesBoolExp {
    _and: [UserRolesBoolExp!]
    _not: UserRolesBoolExp
    _or: [UserRolesBoolExp!]
    id: IntBoolExp
    role: RolesBoolExp
    roleId: IntBoolExp
    user: UsersBoolExp
    userId: IntBoolExp
}

input UserRolesFilterInput {
    limit: Int
    offset: Int
    order_by: [UserRolesOrderBy!]
    where: UserRolesBoolExp
}

input UserRolesOrderBy {
    id: OrderBy
    role: RolesOrderBy
    roleId: OrderBy
    user: UsersOrderBy
    userId: OrderBy
}

type Users {
    addresses(limit: Int offset: Int order_by: [AddressesOrderBy!] where: AddressesBoolExp): [Addresses!]
    addressesAggregate(filter_input: AddressesFilterInput): AddressesAggExp!
    auditLogs(limit: Int offset: Int order_by: [AuditLogsOrderBy!] where: AuditLogsBoolExp): [AuditLogs!]
    auditLogsAggregate(filter_input: AuditLogsFilterInput): AuditLogsAggExp!
    createdAt: Timestamptz!
    emailAddressEntities(limit: Int offset: Int order_by: [EmailAddressEntityOrderBy!] where: EmailAddressEntityBoolExp): [EmailAddressEntity!]
    emailAddressEntitiesAggregate(filter_input: EmailAddressEntityFilterInput): EmailAddressEntityAggExp!
    emailInviteEntities(limit: Int offset: Int order_by: [EmailInviteEntityOrderBy!] where: EmailInviteEntityBoolExp): [EmailInviteEntity!]
    emailInviteEntitiesAggregate(filter_input: EmailInviteEntityFilterInput): EmailInviteEntityAggExp!
    emailVerificationEntities(limit: Int offset: Int order_by: [EmailVerificationEntityOrderBy!] where: EmailVerificationEntityBoolExp): [EmailVerificationEntity!]
    emailVerificationEntitiesAggregate(filter_input: EmailVerificationEntityFilterInput): EmailVerificationEntityAggExp!
    id: Int!
    isActive: Bool!
    lastLogin: Timestamptz!
    notifications(limit: Int offset: Int order_by: [NotificationsOrderBy!] where: NotificationsBoolExp): [Notifications!]
    notificationsAggregate(filter_input: NotificationsFilterInput): NotificationsAggExp!
    phoneNumbers(limit: Int offset: Int order_by: [PhoneNumbersOrderBy!] where: PhoneNumbersBoolExp): [PhoneNumbers!]
    phoneNumbersAggregate(filter_input: PhoneNumbersFilterInput): PhoneNumbersAggExp!
    profileEntity: ProfileEntity
    profileId: Int!
    teamInvites(limit: Int offset: Int order_by: [TeamInvitesOrderBy!] where: TeamInvitesBoolExp): [TeamInvites!]
    teamInvitesAggregate(filter_input: TeamInvitesFilterInput): TeamInvitesAggExp!
    teamMembers(limit: Int offset: Int order_by: [TeamMembersOrderBy!] where: TeamMembersBoolExp): [TeamMembers!]
    teamMembersAggregate(filter_input: TeamMembersFilterInput): TeamMembersAggExp!
    teams(limit: Int offset: Int order_by: [TeamsOrderBy!] where: TeamsBoolExp): [Teams!]
    teamsAggregate(filter_input: TeamsFilterInput): TeamsAggExp!
    tenant: Tenants
    tenantId: Int!
    userName: Varchar!
    userRoles(limit: Int offset: Int order_by: [UserRolesOrderBy!] where: UserRolesBoolExp): [UserRoles!]
    userRolesAggregate(filter_input: UserRolesFilterInput): UserRolesAggExp!
}

type UsersAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    id: IntAggExp!
    isActive: BoolAggExp!
    lastLogin: TimestamptzAggExp!
    profileId: IntAggExp!
    tenantId: IntAggExp!
    userName: VarcharAggExp!
}

input UsersBoolExp {
    _and: [UsersBoolExp!]
    _not: UsersBoolExp
    _or: [UsersBoolExp!]
    addresses: AddressesBoolExp
    auditLogs: AuditLogsBoolExp
    createdAt: TimestamptzBoolExp
    emailAddressEntities: EmailAddressEntityBoolExp
    emailInviteEntities: EmailInviteEntityBoolExp
    emailVerificationEntities: EmailVerificationEntityBoolExp
    id: IntBoolExp
    isActive: BoolBoolExp
    lastLogin: TimestamptzBoolExp
    notifications: NotificationsBoolExp
    phoneNumbers: PhoneNumbersBoolExp
    profileEntity: ProfileEntityBoolExp
    profileId: IntBoolExp
    teamInvites: TeamInvitesBoolExp
    teamMembers: TeamMembersBoolExp
    teams: TeamsBoolExp
    tenant: TenantsBoolExp
    tenantId: IntBoolExp
    userName: VarcharBoolExp
    userRoles: UserRolesBoolExp
}

input UsersFilterInput {
    limit: Int
    offset: Int
    order_by: [UsersOrderBy!]
    where: UsersBoolExp
}

input UsersOrderBy {
    createdAt: OrderBy
    id: OrderBy
    isActive: OrderBy
    lastLogin: OrderBy
    profileEntity: ProfileEntityOrderBy
    profileId: OrderBy
    tenant: TenantsOrderBy
    tenantId: OrderBy
    userName: OrderBy
}

scalar Uuid

type UuidAggExp {
    _count: Int!
    _count_distinct: Int!
}

input UuidBoolExp {
    _eq: Uuid
    _gt: Uuid
    _gte: Uuid
    _in: [Uuid!]
    _is_null: Boolean
    _lt: Uuid
    _lte: Uuid
    _neq: Uuid
}

scalar Varchar

type VarcharAggExp {
    _count: Int!
    _count_distinct: Int!
    max: Text
    min: Text
}

input VarcharBoolExp {
    _eq: Varchar
    _gt: Varchar
    _gte: Varchar
    _ilike: Varchar
    _in: [Varchar!]
    _iregex: Varchar
    _is_null: Boolean
    _like: Varchar
    _lt: Varchar
    _lte: Varchar
    _neq: Varchar
    _nilike: Varchar
    _niregex: Varchar
    _nlike: Varchar
    _nregex: Varchar
    _regex: Varchar
    starts_with: Varchar
    ts_match_tt: Varchar
}

type VaultDecryptedSecrets {
    createdAt: Timestamptz
    decryptedSecret: Text
    description: Text
    id: Uuid
    keyId: Uuid
    name: Text
    nonce: Bytea
    secret: Text
    updatedAt: Timestamptz
}

type VaultDecryptedSecretsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    decryptedSecret: TextAggExp!
    description: TextAggExp!
    id: UuidAggExp!
    keyId: UuidAggExp!
    name: TextAggExp!
    nonce: ByteaAggExp!
    secret: TextAggExp!
    updatedAt: TimestamptzAggExp!
}

input VaultDecryptedSecretsBoolExp {
    _and: [VaultDecryptedSecretsBoolExp!]
    _not: VaultDecryptedSecretsBoolExp
    _or: [VaultDecryptedSecretsBoolExp!]
    createdAt: TimestamptzBoolExp
    decryptedSecret: TextBoolExp
    description: TextBoolExp
    id: UuidBoolExp
    keyId: UuidBoolExp
    name: TextBoolExp
    nonce: ByteaBoolExp
    secret: TextBoolExp
    updatedAt: TimestamptzBoolExp
}

input VaultDecryptedSecretsFilterInput {
    limit: Int
    offset: Int
    order_by: [VaultDecryptedSecretsOrderBy!]
    where: VaultDecryptedSecretsBoolExp
}

input VaultDecryptedSecretsOrderBy {
    createdAt: OrderBy
    decryptedSecret: OrderBy
    description: OrderBy
    id: OrderBy
    keyId: OrderBy
    name: OrderBy
    nonce: OrderBy
    secret: OrderBy
    updatedAt: OrderBy
}

"Table with encrypted `secret` column for storing sensitive information on disk."
type VaultSecrets {
    createdAt: Timestamptz!
    description: Text!
    id: Uuid!
    keyId: Uuid
    name: Text
    nonce: Bytea
    pgsodiumKey: PgsodiumKey
    secret: Text!
    updatedAt: Timestamptz!
}

type VaultSecretsAggExp {
    _count: Int!
    createdAt: TimestamptzAggExp!
    description: TextAggExp!
    id: UuidAggExp!
    keyId: UuidAggExp!
    name: TextAggExp!
    nonce: ByteaAggExp!
    secret: TextAggExp!
    updatedAt: TimestamptzAggExp!
}

input VaultSecretsBoolExp {
    _and: [VaultSecretsBoolExp!]
    _not: VaultSecretsBoolExp
    _or: [VaultSecretsBoolExp!]
    createdAt: TimestamptzBoolExp
    description: TextBoolExp
    id: UuidBoolExp
    keyId: UuidBoolExp
    name: TextBoolExp
    nonce: ByteaBoolExp
    pgsodiumKey: PgsodiumKeyBoolExp
    secret: TextBoolExp
    updatedAt: TimestamptzBoolExp
}

input VaultSecretsFilterInput {
    limit: Int
    offset: Int
    order_by: [VaultSecretsOrderBy!]
    where: VaultSecretsBoolExp
}

input VaultSecretsOrderBy {
    createdAt: OrderBy
    description: OrderBy
    id: OrderBy
    keyId: OrderBy
    name: OrderBy
    nonce: OrderBy
    pgsodiumKey: PgsodiumKeyOrderBy
    secret: OrderBy
    updatedAt: OrderBy
}