// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public static partial class StrawberryClient2ServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::StrawberryClient2NS.State.StrawberryClient2StoreAccessor> AddStrawberryClient2(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::StrawberryClient2NS.State.StrawberryClient2StoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.GetAccounts2Query>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.GetAccounts3Query>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.StrawberryClient2>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.IStrawberryClient2>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::StrawberryClient2NS.State.StrawberryClient2StoreAccessor>("StrawberryClient2", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("StrawberryClient2"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("Varchar"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts2Result>, global::StrawberryClient2NS.State.GetAccounts2ResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts2Result>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.IGetAccounts2Query>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryClient2NS.IGetAccounts2Result>, global::StrawberryClient2NS.State.GetAccounts2Builder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryClient2NS.IGetAccounts2Result>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryClient2NS.IGetAccounts2Result>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryClient2NS.IGetAccounts2Result>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryClient2NS.GetAccounts2Query>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryClient2NS.IGetAccounts2Query>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.GetAccounts2Query>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts3Result>, global::StrawberryClient2NS.State.GetAccounts3ResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts3Result>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.IGetAccounts3Query>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryClient2NS.IGetAccounts3Result>, global::StrawberryClient2NS.State.GetAccounts3Builder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryClient2NS.IGetAccounts3Result>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryClient2NS.IGetAccounts3Result>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryClient2NS.IGetAccounts3Result>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryClient2NS.GetAccounts3Query>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryClient2NS.IGetAccounts3Query>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.GetAccounts3Query>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::StrawberryClient2NS.State.StrawberryClient2EntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryClient2NS.StrawberryClient2>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryClient2NS.IStrawberryClient2>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryClient2NS.StrawberryClient2>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace StrawberryClient2NS
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2Result : global::System.IEquatable<GetAccounts2Result>, IGetAccounts2Result
    {
        public GetAccounts2Result(global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts2_Accounts>? accounts)
        {
            Accounts = accounts;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts2_Accounts>? Accounts { get; }

        public virtual global::System.Boolean Equals(GetAccounts2Result? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Accounts, other.Accounts));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAccounts2Result)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Accounts is not null)
                {
                    foreach (var Accounts_elm in Accounts)
                    {
                        hash ^= 397 * Accounts_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2_Accounts_Accounts : global::System.IEquatable<GetAccounts2_Accounts_Accounts>, IGetAccounts2_Accounts_Accounts
    {
        public GetAccounts2_Accounts_Accounts(global::System.String email)
        {
            Email = email;
        }

        public global::System.String Email { get; }

        public virtual global::System.Boolean Equals(GetAccounts2_Accounts_Accounts? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Email.Equals(other.Email));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAccounts2_Accounts_Accounts)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Email.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts2Result
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts2_Accounts>? Accounts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts2_Accounts
    {
        public global::System.String Email { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts2_Accounts_Accounts : IGetAccounts2_Accounts
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3Result : global::System.IEquatable<GetAccounts3Result>, IGetAccounts3Result
    {
        public GetAccounts3Result(global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts3_Accounts>? accounts)
        {
            Accounts = accounts;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts3_Accounts>? Accounts { get; }

        public virtual global::System.Boolean Equals(GetAccounts3Result? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Accounts, other.Accounts));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAccounts3Result)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Accounts is not null)
                {
                    foreach (var Accounts_elm in Accounts)
                    {
                        hash ^= 397 * Accounts_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3_Accounts_Accounts : global::System.IEquatable<GetAccounts3_Accounts_Accounts>, IGetAccounts3_Accounts_Accounts
    {
        public GetAccounts3_Accounts_Accounts(global::System.Int32 accountId)
        {
            AccountId = accountId;
        }

        public global::System.Int32 AccountId { get; }

        public virtual global::System.Boolean Equals(GetAccounts3_Accounts_Accounts? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(AccountId, other.AccountId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAccounts3_Accounts_Accounts)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AccountId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts3Result
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts3_Accounts>? Accounts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts3_Accounts
    {
        public global::System.Int32 AccountId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts3_Accounts_Accounts : IGetAccounts3_Accounts
    {
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts2 GraphQL operation
    /// <code>
    /// query GetAccounts2 {
    ///   accounts {
    ///     __typename
    ///     email
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2QueryDocument : global::StrawberryShake.IDocument
    {
        private GetAccounts2QueryDocument()
        {
        }

        public static GetAccounts2QueryDocument Instance { get; } = new GetAccounts2QueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x63,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x73,
            0x32,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e193d548f434e5fd804020892326a127");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts2 GraphQL operation
    /// <code>
    /// query GetAccounts2 {
    ///   accounts {
    ///     __typename
    ///     email
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2Query : global::StrawberryClient2NS.IGetAccounts2Query
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAccounts2Result> _operationExecutor;
        public GetAccounts2Query(global::StrawberryShake.IOperationExecutor<IGetAccounts2Result> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAccounts2Result);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAccounts2Result>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAccounts2Result>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAccounts2QueryDocument.Instance.Hash.Value, name: "GetAccounts2", document: GetAccounts2QueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts2 GraphQL operation
    /// <code>
    /// query GetAccounts2 {
    ///   accounts {
    ///     __typename
    ///     email
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts2Query : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAccounts2Result>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAccounts2Result>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts3 GraphQL operation
    /// <code>
    /// query GetAccounts3 {
    ///   accounts {
    ///     __typename
    ///     accountId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3QueryDocument : global::StrawberryShake.IDocument
    {
        private GetAccounts3QueryDocument()
        {
        }

        public static GetAccounts3QueryDocument Instance { get; } = new GetAccounts3QueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x63,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x73,
            0x33,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x63,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x49,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "84714944981af7f0b14f3bb947ff53d2");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts3 GraphQL operation
    /// <code>
    /// query GetAccounts3 {
    ///   accounts {
    ///     __typename
    ///     accountId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3Query : global::StrawberryClient2NS.IGetAccounts3Query
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAccounts3Result> _operationExecutor;
        public GetAccounts3Query(global::StrawberryShake.IOperationExecutor<IGetAccounts3Result> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAccounts3Result);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAccounts3Result>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAccounts3Result>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAccounts3QueryDocument.Instance.Hash.Value, name: "GetAccounts3", document: GetAccounts3QueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts3 GraphQL operation
    /// <code>
    /// query GetAccounts3 {
    ///   accounts {
    ///     __typename
    ///     accountId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IGetAccounts3Query : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAccounts3Result>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAccounts3Result>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the StrawberryClient2 GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class StrawberryClient2 : global::StrawberryClient2NS.IStrawberryClient2
    {
        private readonly global::StrawberryClient2NS.IGetAccounts2Query _getAccounts2;
        private readonly global::StrawberryClient2NS.IGetAccounts3Query _getAccounts3;
        public StrawberryClient2(global::StrawberryClient2NS.IGetAccounts2Query getAccounts2, global::StrawberryClient2NS.IGetAccounts3Query getAccounts3)
        {
            _getAccounts2 = getAccounts2 ?? throw new global::System.ArgumentNullException(nameof(getAccounts2));
            _getAccounts3 = getAccounts3 ?? throw new global::System.ArgumentNullException(nameof(getAccounts3));
        }

        public static global::System.String ClientName => "StrawberryClient2";
        public global::StrawberryClient2NS.IGetAccounts2Query GetAccounts2 => _getAccounts2;
        public global::StrawberryClient2NS.IGetAccounts3Query GetAccounts3 => _getAccounts3;
    }

    /// <summary>
    /// Represents the StrawberryClient2 GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial interface IStrawberryClient2
    {
        global::StrawberryClient2NS.IGetAccounts2Query GetAccounts2 { get; }

        global::StrawberryClient2NS.IGetAccounts3Query GetAccounts3 { get; }
    }
}

namespace StrawberryClient2NS.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2ResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.GetAccounts2Result>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAccounts2ResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryClient2NS.IGetAccounts2Result);

        public GetAccounts2Result Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAccounts2ResultInfo info)
            {
                return new GetAccounts2Result(MapIGetAccounts2_AccountsNonNullableArray(info.Accounts, snapshot));
            }

            throw new global::System.ArgumentException("GetAccounts2ResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts2_Accounts>? MapIGetAccounts2_AccountsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var accountss = new global::System.Collections.Generic.List<global::StrawberryClient2NS.IGetAccounts2_Accounts>();
            foreach (global::StrawberryClient2NS.State.AccountsData child in list)
            {
                accountss.Add(MapNonNullableIGetAccounts2_Accounts(child, snapshot));
            }

            return accountss;
        }

        private global::StrawberryClient2NS.IGetAccounts2_Accounts MapNonNullableIGetAccounts2_Accounts(global::StrawberryClient2NS.State.AccountsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetAccounts2_Accounts returnValue = default !;
            if (data.__typename.Equals("Accounts", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAccounts2_Accounts_Accounts(data.Email ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2ResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAccounts2ResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? accounts, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Accounts = accounts;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? Accounts { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAccounts2ResultInfo(Accounts, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3ResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.GetAccounts3Result>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAccounts3ResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryClient2NS.IGetAccounts3Result);

        public GetAccounts3Result Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAccounts3ResultInfo info)
            {
                return new GetAccounts3Result(MapIGetAccounts3_AccountsNonNullableArray(info.Accounts, snapshot));
            }

            throw new global::System.ArgumentException("GetAccounts3ResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.IGetAccounts3_Accounts>? MapIGetAccounts3_AccountsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var accountss = new global::System.Collections.Generic.List<global::StrawberryClient2NS.IGetAccounts3_Accounts>();
            foreach (global::StrawberryClient2NS.State.AccountsData child in list)
            {
                accountss.Add(MapNonNullableIGetAccounts3_Accounts(child, snapshot));
            }

            return accountss;
        }

        private global::StrawberryClient2NS.IGetAccounts3_Accounts MapNonNullableIGetAccounts3_Accounts(global::StrawberryClient2NS.State.AccountsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetAccounts3_Accounts returnValue = default !;
            if (data.__typename.Equals("Accounts", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAccounts3_Accounts_Accounts(data.AccountId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3ResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAccounts3ResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? accounts, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Accounts = accounts;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? Accounts { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAccounts3ResultInfo(Accounts, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts2Builder : global::StrawberryShake.OperationResultBuilder<global::StrawberryClient2NS.IGetAccounts2Result>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _varcharParser;
        public GetAccounts2Builder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts2Result> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _varcharParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Varchar") ?? throw new global::System.ArgumentException("No serializer for type `Varchar` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts2Result> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetAccounts2ResultInfo(Deserialize_IGetAccounts2_AccountsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? Deserialize_IGetAccounts2_AccountsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var accountss = new global::System.Collections.Generic.List<global::StrawberryClient2NS.State.AccountsData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                accountss.Add(Deserialize_NonNullableIGetAccounts2_Accounts(child));
            }

            return accountss;
        }

        private global::StrawberryClient2NS.State.AccountsData Deserialize_NonNullableIGetAccounts2_Accounts(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Accounts", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryClient2NS.State.AccountsData(typename, email: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _varcharParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class GetAccounts3Builder : global::StrawberryShake.OperationResultBuilder<global::StrawberryClient2NS.IGetAccounts3Result>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetAccounts3Builder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts3Result> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::StrawberryClient2NS.IGetAccounts3Result> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetAccounts3ResultInfo(Deserialize_IGetAccounts3_AccountsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryClient2NS.State.AccountsData>? Deserialize_IGetAccounts3_AccountsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var accountss = new global::System.Collections.Generic.List<global::StrawberryClient2NS.State.AccountsData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                accountss.Add(Deserialize_NonNullableIGetAccounts3_Accounts(child));
            }

            return accountss;
        }

        private global::StrawberryClient2NS.State.AccountsData Deserialize_NonNullableIGetAccounts3_Accounts(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Accounts", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryClient2NS.State.AccountsData(typename, accountId: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class AccountsData
    {
        public AccountsData(global::System.String __typename, global::System.String? email = default !, global::System.Int32? accountId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Email = email;
            AccountId = accountId;
        }

        public global::System.String __typename { get; }
        public global::System.String? Email { get; }
        public global::System.Int32? AccountId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class StrawberryClient2EntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.2.0.0")]
    public partial class StrawberryClient2StoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public StrawberryClient2StoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
