using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.Extensions.Logging;
using OpenTelemetry;
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;
using System;
using System.Diagnostics;

namespace Microsoft.Extensions.Hosting;

// Adds common .NET Aspire services: service discovery, resilience, health checks, and OpenTelemetry.
public static class Extensions
{
    public static IHostApplicationBuilder AddServiceDefaults(this IHostApplicationBuilder builder)
    {
        ArgumentNullException.ThrowIfNull(builder, nameof(builder));

        // Set default OTLP endpoint if not set
        string? otlpEndpoint = Environment.GetEnvironmentVariable("OTEL_EXPORTER_OTLP_ENDPOINT");
        if (string.IsNullOrEmpty(otlpEndpoint))
        {
            Environment.SetEnvironmentVariable("OTEL_EXPORTER_OTLP_ENDPOINT", "http://localhost:4318");
        }

        builder.ConfigureOpenTelemetry();

        builder.AddDefaultHealthChecks();

        builder.Services.AddServiceDiscovery();

        builder.Services.ConfigureHttpClientDefaults(http =>
        {
            // Turn on resilience by default
            http.AddStandardResilienceHandler();

            // Turn on service discovery by default
            http.AddServiceDiscovery();
        });

        return builder;
    }

    public static IHostApplicationBuilder ConfigureOpenTelemetry(this IHostApplicationBuilder builder)
    {
        ArgumentNullException.ThrowIfNull(builder, nameof(builder));

        // Get service name from configuration or use application name
        string serviceName = builder.Configuration["OTEL_SERVICE_NAME"] ?? 
                             builder.Environment.ApplicationName;

        // Create a resource builder with appropriate service information
        var resourceBuilder = ResourceBuilder.CreateDefault()
            .AddService(serviceName: serviceName, serviceVersion: "1.0.0");

        // Add OpenTelemetry logging
        builder.Logging.AddOpenTelemetry(logging =>
        {
            logging.SetResourceBuilder(resourceBuilder);
            logging.IncludeFormattedMessage = true;
            logging.IncludeScopes = true;
        });

        // Configure OpenTelemetry with metrics and tracing
        builder.Services.AddOpenTelemetry()
            .ConfigureResource(r => r.AddService(serviceName))
            .WithMetrics(metrics =>
            {
                metrics.AddMeter(serviceName);
                metrics.AddMeter("Microsoft.AspNetCore.Hosting");
                metrics.AddMeter("Microsoft.AspNetCore.Server.Kestrel");
                metrics.AddAspNetCoreInstrumentation();
                metrics.AddHttpClientInstrumentation();
                metrics.AddRuntimeInstrumentation();
            })
            .WithTracing(tracing =>
            {
                // Add sources that should be traced
                tracing.AddSource(serviceName);
                tracing.AddSource("Microsoft.AspNetCore");
                
                // Add instrumentation
                tracing.AddAspNetCoreInstrumentation(options => 
                {
                    options.RecordException = true;
                    options.EnrichWithHttpRequest = (activity, request) => 
                    {
                        activity.SetTag("http.request.headers.host", request.Host);
                        activity.SetTag("http.request.headers.user_agent", request.Headers.UserAgent);
                    };
                });
                tracing.AddHttpClientInstrumentation(options =>
                {
                    options.RecordException = true;
                    options.FilterHttpRequestMessage = (request) => true;
                });
            });

        // Add exporters
        builder.AddOpenTelemetryExporters();

        return builder;
    }    private static IHostApplicationBuilder AddOpenTelemetryExporters(this IHostApplicationBuilder builder)
    {
        ArgumentNullException.ThrowIfNull(builder, nameof(builder));

        try
        {
            // First check for DOTNET_DASHBOARD_OTLP_ENDPOINT_URL (Aspire standard)
            string? otlpEndpoint = builder.Configuration["DOTNET_DASHBOARD_OTLP_ENDPOINT_URL"];
            
            // Fall back to OTEL_EXPORTER_OTLP_ENDPOINT if the Aspire-specific one isn't set
            if (string.IsNullOrWhiteSpace(otlpEndpoint))
            {
                otlpEndpoint = builder.Configuration["OTEL_EXPORTER_OTLP_ENDPOINT"] ?? 
                               Environment.GetEnvironmentVariable("OTEL_EXPORTER_OTLP_ENDPOINT");
            }
            
            // Default as last resort
            if (string.IsNullOrWhiteSpace(otlpEndpoint))
            {
                otlpEndpoint = "http://localhost:18889";
            }

            Console.WriteLine($"Configuring OpenTelemetry with endpoint: {otlpEndpoint}");

            // Determine protocol (prefer gRPC for Aspire)
            var protocol = OpenTelemetry.Exporter.OtlpExportProtocol.Grpc;
            string? protocolStr = builder.Configuration["OTEL_EXPORTER_OTLP_PROTOCOL"] ?? 
                                 Environment.GetEnvironmentVariable("OTEL_EXPORTER_OTLP_PROTOCOL");
            
            if (!string.IsNullOrWhiteSpace(protocolStr))
            {
                if (protocolStr.Equals("http/protobuf", StringComparison.OrdinalIgnoreCase))
                {
                    protocol = OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf;
                }
            }

            // Configure metrics with OTLP exporter
            builder.Services.ConfigureOpenTelemetryMeterProvider(options => 
            {
                options.AddConsoleExporter(); // Add console exporter for debugging
                options.AddOtlpExporter(otlpOptions => 
                {
                    otlpOptions.Endpoint = new Uri(otlpEndpoint);
                    otlpOptions.Protocol = protocol;
                });
            });
            
            // Configure tracing with OTLP exporter
            builder.Services.ConfigureOpenTelemetryTracerProvider(options => 
            {
                options.AddConsoleExporter(); // Add console exporter for debugging
                options.AddOtlpExporter(otlpOptions => 
                {
                    otlpOptions.Endpoint = new Uri(otlpEndpoint);
                    otlpOptions.Protocol = protocol;
                });
            });
            
            // Configure logging with OTLP exporter
            builder.Logging.AddOpenTelemetry(logging =>
            {
                logging.AddOtlpExporter(otlpOptions =>
                {
                    otlpOptions.Endpoint = new Uri(otlpEndpoint);
                    otlpOptions.Protocol = protocol;
                });
            });
            
            Console.WriteLine("Successfully configured OpenTelemetry exporters");
        }
        catch (Exception ex)
        {            
            Console.WriteLine($"Error configuring OpenTelemetry: {ex.Message}");
        }
        
        return builder;
    }

    public static IHostApplicationBuilder AddDefaultHealthChecks(this IHostApplicationBuilder builder)
    {
        ArgumentNullException.ThrowIfNull(builder, nameof(builder));
        
        builder.Services.AddHealthChecks()
            // Add a default liveness check to ensure app is responsive
            .AddCheck("self", () => HealthCheckResult.Healthy(), ["live"]);

        return builder;
    }

    public static WebApplication MapDefaultEndpoints(this WebApplication app)
    {
        ArgumentNullException.ThrowIfNull(app, nameof(app));
        
        // Adding health checks endpoints to applications in non-development environments has security implications.
        // See https://aka.ms/dotnet/aspire/healthchecks for details before enabling these endpoints in non-development environments.
        if (app.Environment.IsDevelopment())
        {
            // All health checks must pass for app to be considered ready to accept traffic after starting
            app.MapHealthChecks("/health");

            // Only health checks tagged with the "live" tag must pass for app to be considered alive
            app.MapHealthChecks("/alive", new HealthCheckOptions
            {
                Predicate = r => r.Tags.Contains("live")
            });
        }

        return app;
    }
}
