using AppBlueprint.ApiService.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.Extensions.Hosting;
using Swashbuckle.AspNetCore.Swagger;
using System;
using System.Diagnostics;
using System.Diagnostics.Metrics;
using System.Threading.Tasks;

// Add instrumentation for telemetry tracking
using var activitySource = new ActivitySource("AppBlueprint.ApiService");
using var meter = new Meter("AppBlueprint.ApiService", "1.0.0");
var requestCounter = meter.CreateCounter<long>("appblueprint.api.requests", "Request", "The number of requests received");

var builder = WebApplication.CreateBuilder(args);

// Add service defaults & Aspire components
builder.AddServiceDefaults();

// Get PostgreSQL connection string from configuration
var connectionString = builder.Configuration.GetConnectionString("PostgreSQL");
Console.WriteLine($"PostgreSQL connection string: {connectionString}");

// Add services to the container.
builder.Services.AddProblemDetails();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Add DbContext using the PostgreSQL provider
builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    options.UseNpgsql(connectionString);
});

// Add PostgreSQL health check
var healthTags = new[] { "database", "postgres" };
builder.Services.AddHealthChecks()
    .AddCheck("postgres-connection", () => 
    {
        try
        {
            using var scope = builder.Services.BuildServiceProvider().CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            if (dbContext.Database.CanConnect())
                return HealthCheckResult.Healthy("PostgreSQL connection is healthy");
            else
                return HealthCheckResult.Unhealthy("Cannot connect to PostgreSQL");
        }
        catch (Exception ex)
        {
            return HealthCheckResult.Unhealthy($"PostgreSQL error: {ex.Message}");
        }
    }, healthTags);

var app = builder.Build();

// Ensure database is created and migrations are applied
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await dbContext.Database.EnsureCreatedAsync().ConfigureAwait(false);
}

// Configure the HTTP request pipeline.
app.UseExceptionHandler();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Add telemetry middleware
app.Use(async (context, next) =>
{
    // Track requests with OpenTelemetry
    using var activity = activitySource.StartActivity("HandleRequest");
    activity?.SetTag("http.path", context.Request.Path);
    activity?.SetTag("http.method", context.Request.Method);
    
    // Count the request
    requestCounter.Add(1);
    
    await next().ConfigureAwait(false);
});

app.MapGet("/weatherforecast", async (ApplicationDbContext db) =>
{
    return await db.WeatherForecasts.ToListAsync().ConfigureAwait(false);
})
.WithName("GetWeatherForecast");

// Add a health check endpoint
app.MapDefaultEndpoints();

await app.RunAsync().ConfigureAwait(false);
